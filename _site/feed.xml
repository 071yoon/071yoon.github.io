<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-09T21:55:15+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi's tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">Fix Error via APM</title><link href="http://localhost:4000/til/2022/10/09/fix-error-via-apm.html" rel="alternate" type="text/html" title="Fix Error via APM" /><published>2022-10-09T00:00:00+09:00</published><updated>2022-10-09T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/09/fix-error-via-apm</id><content type="html" xml:base="http://localhost:4000/til/2022/10/09/fix-error-via-apm.html"><![CDATA[<h2 id="apm-으로-오류-분석-및-해결을-해보자">APM 으로 오류 분석 및 해결을 해보자</h2>

<h3 id="문제-시점">문제 시점</h3>

<p>우리 서비스에는 new-relic 이라는 APM이 연동되어 있다. 하지만 사용법이 너무 복잡하고 어려워서 잘 사용하고 있지는 않고 있는데, 마침 쓸 상황이 왔다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/194757039-4ca5891c-381c-4f84-aebd-6770ced5dee4.png" alt="스크린샷 2022-10-09 오후 9 32 55" />
<img src="https://user-images.githubusercontent.com/66371206/194757036-bb7040a6-092c-4728-a8a2-e15547395f4c.png" alt="스크린샷 2022-10-09 오후 9 32 59" /></p>

<p>친구랑 같이 사용중이였는데, 친구의 어플리케이션이 사파리에 접속하자마자 튕겼다는것!
하지만 콘솔창을 열어보지 않아서 어디가 문제인지 확인을 할 수 없는 상황이였다.</p>

<p>연동한 APM을 활용하여 오류를 고쳐보도록 하자!</p>

<h3 id="문제-분석">문제 분석</h3>

<p>우선 new relic의 browser -&gt; 내가 보려는 Application으로 들어가자</p>

<p><img width="966" alt="image" src="https://user-images.githubusercontent.com/66371206/194757160-df3694ff-ae98-492f-b17f-5a3cf60a9326.png" /></p>

<p>다음 JS errors에서 어떠한 오류들이 났는지 확인해보자</p>

<p><img width="858" alt="image" src="https://user-images.githubusercontent.com/66371206/194757201-787c1172-8e00-4863-b9aa-f75bbf512c6c.png" /></p>

<p>근데 이미 오류가 한 두가지 아니다… 우선 제일 많은 오류가 난 too many re-renders를 확인해보자</p>

<p><img width="1175" alt="image" src="https://user-images.githubusercontent.com/66371206/194757261-60300485-2a82-40ef-903e-d8a5c53a55a0.png" /></p>

<p>음… 이 부분은 localhost 에서 에러가 난 것으로 보아 아마 그냥 팀원이나 내가 테스트를 하다 잘못 걸려 들어왔던 것 같다.</p>

<p>나머지도 확인해보니 거의 localhost 작업시에 나왔던 에러로 보이다,,, 드디어 문제를 찾았다</p>

<p><img width="1151" alt="image" src="https://user-images.githubusercontent.com/66371206/194757389-4a464c5c-6caa-4415-b197-1ab64c137bae.png" /></p>

<p>약 3시간 전, modocode.com 즉 production 사이트에서 Safari오류가 난 것을 확인했다.</p>

<p><code class="language-plaintext highlighter-rouge">navigator.permissions.query</code> 가 왜 문제일까?</p>

<p>혹시 버전의 문제일까 싶어 MDN 문서를 확인해보았다.</p>

<p><img width="827" alt="image" src="https://user-images.githubusercontent.com/66371206/194757590-c09efd79-e1e1-4f49-af57-c20f5b6a2a14.png" /></p>

<p>문서상으로는 fully compatible 이라고 나오기는 한다. 하지만 잘 보면 접속했던 Safari 브라우저는 15.5 이고, 16부터 호환이 된다고 나와있다. 그럼 혹시 15.5에서는 navigator.permissions.query가 작동하지 않는게 아닐까?</p>

<p>내가 좋아하는 다른 웹사이트 <code class="language-plaintext highlighter-rouge">caniuse</code>를 확인해보자.</p>

<p><img width="1449" alt="image" src="https://user-images.githubusercontent.com/66371206/194757641-d4297db0-eba7-4ce1-ac5c-dc310e27bd21.png" /></p>

<p>음 문서를 보니 정확하게 15.6 까지 호환이 안되고 그 이후가 호환이 된다고 나와있다.</p>

<p>이제 오류를 찾고 원인도 분석하였으니 해결해보자</p>

<h3 id="문제-해결">문제 해결</h3>

<p>사실 이번 오류가 난 기능은 그렇게 중요한 기능은 아니다. 내가 방에 입장하기 전, 마이크 혹은 카메라의 permission이 있는지 확인하게 2단계 보안 장치라 볼 수 있다. 하지만, 생각보다 지원하지 않는 버전과 브라우저가 꽤나 있고, 유저가 어떠한 브라우저를 사용하는지는 알 수 없으므로, 만약 지원이 되지 않는 브라우저는 과감하게 해당 기능을 제외하기로 결심했다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">checkValid</span> <span class="o">=</span> <span class="o">!!</span><span class="nb">navigator</span><span class="p">.</span><span class="nx">permissions</span><span class="p">?.</span><span class="nx">query</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">checkValid</span><span class="p">)</span> <span class="p">{</span>
  <span class="nb">navigator</span><span class="p">.</span><span class="nx">permissions</span><span class="p">.</span><span class="nx">query</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="nx">permissionName</span> <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">result</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">granted</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setDisableButton</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">prompt</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setDisableButton</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">state</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">denied</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">setDisableButton</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">});</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그냥 boolean으로, 내가 permissions.query라는 함수가 있을 때는 원하는 기능을 동작하고, 아닌 경우 무시할 수 있도록 설정해주었다.</p>

<h2 id="후기">후기</h2>

<p>사실 문제 자체는 정말 간단하고, 해결도 쉽게 하였지만 만약 APM이 없었다면 생각보다 오래 걸렸을 것이다. 어떤 브라우저 어떤 버전에 따라 어떤 문제가 생길지도 모르는 법이고, 이러한 경우의 수를 모두 테스트해가며 코드를 완성시킬 수 없기 때문이다. APM 때문에, light house 점수도 많이 깎이고 이걸 왜 써야되지… 싶었던 적도 있었지만 해당 기술을 가지고 문제 해결을 하니 기분이 좋다 ㅎㅎ</p>

<blockquote>
  <p>세상에 쓸모 없는것은 없다</p>
</blockquote>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[APM 으로 오류 분석 및 해결을 해보자]]></summary></entry><entry><title type="html">Visitor Pattern</title><link href="http://localhost:4000/gof/2022/10/05/visitor-pattern.html" rel="alternate" type="text/html" title="Visitor Pattern" /><published>2022-10-05T00:00:00+09:00</published><updated>2022-10-05T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/10/05/visitor-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/10/05/visitor-pattern.html"><![CDATA[<h2 id="방문자-패턴">방문자 패턴</h2>

<p>데이터 구조는 많은 요소가 저장되어 있고, 각 요소에 대해 어떻게 <code class="language-plaintext highlighter-rouge">처리</code>가 필요한 경우를 생각해보자.</p>

<p><code class="language-plaintext highlighter-rouge">처리</code>에 대한 코드는 어디에 있어야 될까? 일반적으로 데이터 구조를 표지하는 클래스에 기술하겠지만, <code class="language-plaintext highlighter-rouge">처리</code>가 늘어날 때 마다 데이터 구조의 클래스를 수정해야 되는 경우가 생긴다.</p>

<p>방문자 패턴은 해당 문제를 <strong>데이터 구조와 처리를 분리</strong>하며 해결한다. 데이터 구조 안을 돌아다닐 수 있는 <code class="language-plaintext highlighter-rouge">방문자</code> 클래스를 준비하여, 그 클래스에게 처리를 위임한다. 즉 새로운 처리를 추가하고 싶을 때 새로운 <code class="language-plaintext highlighter-rouge">방문자</code>를 만들게 되면 된다.</p>

<h2 id="방문자-패턴의-등장인물">방문자 패턴의 등장인물</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/194114652-7aed7b17-134c-4cf4-bf18-e95806874317.png" alt="image-1" /></p>

<h3 id="visitor-방문자">Visitor (방문자)</h3>

<p>Visitor는 데이터 구조의 구체적인 요소(ConcreteElement 역할)마다 visit(xxxx) 메소드를 선언합니다. 메소드는 xxxx를 처리하기 위한 메소드이고, 구현은 ConcreteVisitor가 합니다.</p>

<h3 id="concrete-visitor">Concrete Visitor</h3>

<p>Visitor 의 인터페이스(API)를 구현한다.</p>

<blockquote>
  <p>예제의 ListVisitor에서 currentdir 값이 변화하듯 visit을 수행하는 도중 ConcreteVisitor 역할의 내부 상태가 변화하는 일도 있다.</p>
</blockquote>

<h3 id="element">Element</h3>

<p>Visitor역할의 방문할 곳을 나타내는 역할로, 방문자를 받아들이는 accept 메소드를 선언한다. 메소드의 인자값으로는 Visitor역할이 전달된다.</p>

<h3 id="concrete-element">Concrete Element</h3>

<p>Element역할의 인터페이스(API)를 구현하는 역할이다.</p>

<blockquote>
  <p>예제에서 File이나 Directory에서 accept 메소드를 오버라이딩해서 구현한것과 동일.</p>
</blockquote>

<h3 id="object-structure">Object Structure</h3>

<p>Element역할의 집합을 취급하는 역할이다. ConcreteVisitor 역할이 각각의 Element역할을 취급할 수 있는 메소드를 구비하고 있다.</p>

<blockquote>
  <p>예제에서는 Directory가 ConcreteElementB와 ObjectStructure 두 역할을 동시에 수행한다</p>
</blockquote>

<hr />

<h2 id="예제">예제</h2>

<h3 id="composite-패턴-복습">Composite 패턴 복습</h3>

<p>Composite 패턴에서의 상황과 유사한 상황을 가정하고 사용하기 위해, Composite 패턴의 예제를 복습해보자.</p>

<blockquote>
  <p>전체와 부분을 동일시해서 재귀적인 구조를 만들기 위한 디자인 패턴</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/194115416-8410628d-67da-455d-8acc-8dedd1f2ce02.png" alt="image-3" /></p>

<p>File 과 Directory의 <code class="language-plaintext highlighter-rouge">printList</code>를 <code class="language-plaintext highlighter-rouge">accept</code>로 바꾸고, Directory에 <code class="language-plaintext highlighter-rouge">iterator</code> 메소드가 추가된 것을 제외하고는 동일한 구현이다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/194115155-65810fd3-d2e3-4140-98e9-c53335b6783a.png" alt="image" /></p>

<table>
  <thead>
    <tr>
      <th>이름</th>
      <th>해설</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Visitor</td>
      <td>파일과 디렉토리를 방문하는 방문자를 나타내는 추상클래스</td>
    </tr>
    <tr>
      <td>Element</td>
      <td>VIsitor 클래스의 생성자를 받아들이는 데이터 구조를 나타내는 인터페이스</td>
    </tr>
    <tr>
      <td>ListVisitor</td>
      <td>Visitor 클래스의 하위 클래스로 파일과 디렉터리의 종류를 나타내는 클래스</td>
    </tr>
    <tr>
      <td>Entry</td>
      <td>File과 Directory의 상위 클래스가 되는 추상 클래스(Acceptor 인터페이스를 구현)</td>
    </tr>
    <tr>
      <td>File</td>
      <td>파일을 나타내는 클래스</td>
    </tr>
    <tr>
      <td>Directory</td>
      <td>디렉토리를 나타내는 클래스</td>
    </tr>
    <tr>
      <td>FIleTreatmentException</td>
      <td>File에 대해서 add한 경우 발생하는 예외 클래스</td>
    </tr>
    <tr>
      <td>Main</td>
      <td>동작 테스트용 클래스</td>
    </tr>
  </tbody>
</table>

<h3 id="visitor-class">Visitor Class</h3>

<ul>
  <li>
    <p>Visitor는 ‘방문자’를 나타내는 추상클래스이고 자기가 방문할 곳(FIle, Directory)에 의존한다.</p>
  </li>
  <li>
    <p>Visitor클래스는 File과 Directory를 가지는 두개의 메소드를 오버로드해서 가지며 위임의 역할을 할 필드가 된다.</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Visitor</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">);</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="nc">Directory</span> <span class="n">directory</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="element-interface">Element Interface</h3>

<ul>
  <li>Visitor를 <code class="language-plaintext highlighter-rouge">accept</code>로받아들이는 인터페이스</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Element</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">accept</span> <span class="o">(</span><span class="nc">Visitor</span> <span class="n">v</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="entry-class">Entry Class</h3>

<ul>
  <li>Element 인터페이스를 구현</li>
  <li>Entry Class를 Visitor Pattern에 적용시키기 위해 사용</li>
  <li>accept를 실제 구현하는 것은 Entry 의 하위 클래스인 File 과 Directory Class</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Entry</span> <span class="kd">implements</span> <span class="nc">Element</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">();</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">();</span>
  <span class="kd">public</span> <span class="nc">Entry</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Entry</span> <span class="n">entry</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">FileTreatmentException</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">FileTreatmentException</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="nc">Iterator</span> <span class="nf">iterator</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">FileTreatmentException</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">FileTreatmentException</span><span class="o">();</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">" ("</span><span class="o">+</span><span class="n">getSize</span><span class="o">()+</span><span class="s">")"</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>add와 iterator는 Directory Class에만 유효하므로 Entry Class 에서는 에러로 처리</p>
</blockquote>

<h3 id="file-class">File Class</h3>

<ul>
  <li>Composite 에서의 예제와 유사</li>
  <li>accept 메소드 안에서 Visitor의 visit 메소드를 호출</li>
  <li>File로 오버로드 된 메소드가 호출된다</li>
  <li>visit 메소드를 호출하며, File의 인스턴스(this)를 Visitor에세 알려준다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">File</span> <span class="kd">extends</span> <span class="nc">Entry</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">size</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">File</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">Visitor</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">v</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="directory-class">Directory Class</h3>

<ul>
  <li>Composite 패턴의 예제와 유사</li>
  <li>iterator는 포함되어 있는 Directory Entry의 종류를 얻기 위한 Iterator 반환</li>
  <li>accept가 visit(Directory) 메소드를 호출</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Directory</span> <span class="kd">extends</span> <span class="nc">Entry</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nc">ArrayList</span> <span class="n">directory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">();</span>

  <span class="kd">public</span> <span class="nf">Directory</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getSize</span><span class="o">()</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span> <span class="o">(</span><span class="nc">Object</span> <span class="n">o</span> <span class="o">:</span> <span class="n">directory</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Entry</span> <span class="n">entry</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Entry</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
      <span class="n">size</span> <span class="o">+=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getSize</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">size</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">Entry</span> <span class="nf">add</span><span class="o">(</span><span class="nc">Entry</span> <span class="n">entry</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">directory</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">entry</span><span class="o">);</span>
      <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">Iterator</span> <span class="nf">iterator</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">FileTreatmentException</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">directory</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="nc">Visitor</span> <span class="n">v</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">v</span><span class="o">.</span><span class="na">visit</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="listvisitor-class">ListVisitor Class</h3>

<ul>
  <li>Visitor Class의 하위 클래스로, 데이터 구조를 돌아다니며 종류를 표시한다</li>
  <li>visit(File)과 visit(Directory)를 구현</li>
  <li>currentdir는 현재 주목하고 있는 Directory 이름을 저장</li>
  <li>visit(File) 메소드는 <strong>File 클래스의 인스턴스에 대해서 실행해야 될 처리</strong>를 기술</li>
  <li>visit(Directory) 메소드는 <strong>Directory 클래스의 인스턴스에 대해서 실행해야 될 처리</strong>를 기술</li>
</ul>

<blockquote>
  <p>directory의 처리란? Directory의 Iterator를 가져와, 각 엔트리에 대한 accept 메소드를 호출</p>
</blockquote>

<ul>
  <li>accept 메소드는 visit 메소드를 호출하고, visit 메소드는 accept를 호출</li>
  <li>visit 메소드와 accept 메소드가 서로 상대를 호출</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListVisitor</span> <span class="kd">extends</span> <span class="nc">Visitor</span><span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">currentdir</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span> <span class="c1">// 현재 주목하고 있는 디렉토리 이름 저장하는 필드</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="nc">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">currentdir</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">file</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">visit</span><span class="o">(</span><span class="nc">Directory</span> <span class="n">directory</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">currentdir</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">directory</span><span class="o">);</span>
    <span class="nc">String</span> <span class="n">savedir</span> <span class="o">=</span> <span class="n">currentdir</span><span class="o">;</span>
    <span class="n">currentdir</span> <span class="o">=</span> <span class="n">currentdir</span> <span class="o">+</span> <span class="s">"/"</span> <span class="o">+</span> <span class="n">directory</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
    <span class="nc">Iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">directory</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
    <span class="k">while</span> <span class="o">(</span><span class="n">it</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
      <span class="nc">Entry</span> <span class="n">entry</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Entry</span><span class="o">)</span><span class="n">it</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
      <span class="n">entry</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">currentdir</span> <span class="o">=</span> <span class="n">savedir</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="filetreatment-exception">FileTreatment Exception</h3>

<ul>
  <li>예외처리</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileTreatmentException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="nf">FileTreatmentException</span><span class="o">()</span> <span class="o">{</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nf">FileTreatmentException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="main-class">Main Class</h3>

<ul>
  <li>composite 패턴과 매우 유사하지만, Directory 표시를 위해, 표시 방문자인 ListVisitor의 인스턴스를 사용한다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span><span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Making root entries..."</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">rootdir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"root"</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">bindir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"bin"</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">tmpdir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"tmp"</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">usrdir</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"usr"</span><span class="o">);</span>

      <span class="n">rootdir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bindir</span><span class="o">);</span>
      <span class="n">rootdir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">tmpdir</span><span class="o">);</span>
      <span class="n">rootdir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">usrdir</span><span class="o">);</span>
      <span class="n">bindir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"vi"</span><span class="o">,</span> <span class="mi">10000</span><span class="o">));</span>
      <span class="n">bindir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"latex"</span><span class="o">,</span> <span class="mi">20000</span><span class="o">));</span>
      <span class="n">rootdir</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="nc">ListVisitor</span><span class="o">());</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Making user entries..."</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">kim</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"Kim"</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">lee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"Lee"</span><span class="o">);</span>
      <span class="nc">Directory</span> <span class="n">park</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Directory</span><span class="o">(</span><span class="s">"Park"</span><span class="o">);</span>
      <span class="n">usrdir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">kim</span><span class="o">);</span>
      <span class="n">usrdir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">lee</span><span class="o">);</span>
      <span class="n">usrdir</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">park</span><span class="o">);</span>
      <span class="n">kim</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"diary.html"</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
      <span class="n">kim</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"Composite.java"</span><span class="o">,</span> <span class="mi">200</span><span class="o">));</span>
      <span class="n">lee</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"memotex"</span><span class="o">,</span> <span class="mi">300</span><span class="o">));</span>
      <span class="n">park</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"game.doc"</span><span class="o">,</span> <span class="mi">400</span><span class="o">));</span>
      <span class="n">park</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"junk.mail"</span><span class="o">,</span> <span class="mi">500</span><span class="o">));</span>
      <span class="n">rootdir</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="nc">ListVisitor</span><span class="o">());</span>
    <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">FileTreatmentException</span> <span class="n">e</span><span class="o">){</span>
      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="sequence-diagram">Sequence Diagram</h3>

<p><img src="https://user-images.githubusercontent.com/66371206/194121630-a8c37d6a-8755-4016-bcb4-2c4b32fc4671.png" alt="image-2" /></p>

<ol>
  <li>Main 클래스에서 ListVisitor 인스턴스 생성</li>
  <li>Main에서 Directory의 accept 메소드 호출. 인자값으로는 ListVisitor 인스턴스 전달</li>
  <li>Directory 의 인스턴스에서는 인자로 받은 ListVisitor의 visit(Directory) 메소드 호출</li>
  <li>visit(Directory) 로직 내부에서 디렉토리 내부를 조사해 파일의 accept 메소드 호출하며 인자값으로 자기자신(this)를 전달. (자기자신은 ListVisitor)</li>
  <li>File의 인스턴스는 인자로 전달받은 ListVisitor의 visit(File)메소드를 호출.</li>
  <li>5번 항목의 File의 visit(File)로직이 완료되면 다음 Iterator가 다음 File을 next()로 꺼내와서 두 번쨰 파일의 accept메소드를 호출(4~5과정의 반복)</li>
  <li>이전과 동일하게 visit(File)의 메소드를 호출하여 완료되면 자신을 호출한 곳으로 돌아가며 Main까지 돌아갑니다.</li>
</ol>

<p>즉 정리하자면 다음과 같다</p>

<ul>
  <li>Directory와 File 인스턴스에 대해서 accept가 한 번 호출된다</li>
  <li>accept 메소드는 각 인스터에서 한번만 호출된다</li>
  <li>ListVisitor의 인스턴스에 대해 visit 메소드가 호출된다</li>
  <li>visit을 처리하고 있는것은 ListVisitor의 인스턴스이다</li>
</ul>

<blockquote>
  <p><strong>ListVisitor 부분에서 visit에 대한 처리가 집중</strong>된다</p>
</blockquote>

<h2 id="참고">참고</h2>

<h3 id="double-dispatch">Double Dispatch</h3>

<p>Element역할은 accept(Visitor)메소드로 Visitor를 받아들이고 Visitor는 visit(element)메소드로 element를 visit한다. 이처럼 Visitor Pattern에서는 ConcreteElement역할과 ConcreteVisitor 역할 한쌍에 의해 실제 처리가 결정되는데 이런 것을 더블 디스패치(double dispatch: 이중 분리)라고 한다.</p>

<h3 id="왜-이렇게-분리하는가">왜 이렇게 분리하는가</h3>

<p>굳이 Visitor Pattern을 사용해서 기능과 처리를 분리하고 재귀적으로 호출하며 어렵게 설계를 해야하는 이유는 무엇일까?
‘처리’를 데이터 구조에서 분리를 하는게 Visitor Pattern의 핵심인데, 데이터 구조는 요소를 집합으로 정리하거나 요소 사이를 연결해주는 중요한 역할을 한다.
하지만, 구조를 유지하는 것과 구조를 기초로 처리를 정의하는것은 별개다.
만약, 처리내용을 File이나 Diretory 클래스의 메소드로 구현할 경우, 새로운 기능(‘처리’)이 추가될 때마다 클래스를 수정해야하는데, 이러면 클래스의 독립성도 떨어지고 단일 책임 원칙도 위배하게 된다.</p>

<h3 id="ocp">OCP</h3>

<p>확장에대해서는 열려있지만, 수정에 대해서는 닫혀있어야 한다는 ‘The Open-Closed Principle(OCP)’ 원칙이 있다.
즉, 클래스를 설계할 때 특별한 이유가 없는 한 확장을 허용해야 한다는 것인데, 이것이 확장에 대해서는 열려있다는 의미이다.
하지만, 확장을 허용한다고 확장을 할 때마다 기존의 클래스를 수정하는것은 곤란한데, 확장을 해도 기존의 클래스는 수정할 필요가 없는 것이 ‘수정에 대해서는 닫혀있다’ 라는 의미가 된다.</p>

<blockquote>
  <p>결국, 기존의 클래스를 수정하지않고 기능추가 확장이 되야한다는 말.</p>
</blockquote>

<p>개발을 하게되면 시간이 흐를수록 기능을 확장해야하는 경우가 빈번한데 그럴때마다 이미 완성된 클래스를 수정하는 것은 프로그램의 완성도(품질)를 떨어트릴 위험이 있다.</p>

<h3 id="확장성">확장성</h3>

<p>ConcreteVisitor 역할을 추가하는것은 쉽다. 구조를 담당하는 클래스(ConcreteElement)역할을 수정할 필요가 없기 때문.</p>

<p>반면, ConcreteElement 역할의 추가는 어려운데 그 이유는, 기존의 File과 Directory 클래스에 더해 새로운 Entry의 하위 클래스인 Device 클래스를 만들기 위해서는 기존에 구현되있는 모든 Visitor 클래스에 visitor(Device)메소드를 만들어야 하고 하위 클래스(ConcreteVisitor)에도 visit(Device)메소드를 구현해야 하기 때문.</p>

<blockquote>
  <p>데이터와 데이터를 추상화하고, 그 동작을 추상화를 해주는 패턴! 그리고 Visitor가 알고있는 것은 Concrete Element임에 주의</p>
</blockquote>

<hr />

<p>참조</p>

<p>[Java언어로 배우는 디자인 패턴 입문]-영진닷컴</p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="TIL" /><category term="GoF" /><summary type="html"><![CDATA[방문자 패턴]]></summary></entry><entry><title type="html">망 사용료가 대체 뭔데?</title><link href="http://localhost:4000/til/2022/10/03/network-usage-fee.html" rel="alternate" type="text/html" title="망 사용료가 대체 뭔데?" /><published>2022-10-03T00:00:00+09:00</published><updated>2022-10-03T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/03/network-usage-fee</id><content type="html" xml:base="http://localhost:4000/til/2022/10/03/network-usage-fee.html"><![CDATA[<p>요새 망 사용료에 대한 말이 온/오프라인으로 많이 언급되고 있다. 한술 더 떠서 트위치는 화질 제한을 720p로 낮추는 등 화질제한을 거는등 관련 이슈들이 정말 계속 터져나오고 있다. 망 사용료란 무엇이고, 왜 우리가 관심을 가져야 하는지에 대해서 알아보자</p>

<h2 id="망-사용료란">망 사용료란?</h2>

<p>망 사용료에 대한 정의는 다음과 같다. 콘텐츠의 공급자(CP)가 인터넷 서비스 제공 사업자(ISP)인 통신사에게 제불해야 하는 금액</p>

<blockquote>
  <p>CP는 Netflix, Twitch, Youtube 등.. ISP는 SKT, KT, U+ 등..</p>
</blockquote>

<p>근데 사실 이게 일반적인 용어는 아니라고 한다…(실제로 한국에만 있는 단어) 왜?? 일반적으로 CP가 ISP 에게 돈을 지불을 하지 않기 때문.. 그럼 이때까지는 어떤식으로 네트워크가 이루어 지고 있었을까?</p>

<h3 id="망-접속비용">망 접속비용</h3>

<p>우리가 현재 지불해온 방식은 <code class="language-plaintext highlighter-rouge">망접속비용</code>이라는 명칭에서 이루어져왔다. 즉 개인 유저, 네이버, 넷플릭스 등이 해당 국가의 ISP에 지불하게 된다.</p>

<h4 id="일반-유저">일반 유저</h4>

<p>우선 개인 유저가 ISP에 지불하는것은 정말 많이 찾아 볼 수 있다. 그냥 인터넷을 사용하려면 집에서 일반적으로 하듯이 공유기 및 인터넷을 설치해서 사용하면 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/193597316-b1948fc8-4a89-495b-acd1-95c9a12ad9ba.png" alt="image" /></p>

<p>위와 같은 선택지 중에 선택하여 인터넷을 설치하면 빠르게 사용 할 수 있다. 여기서 중요한 점은 우리가 사용하고 인터넷은 <code class="language-plaintext highlighter-rouge">종량제</code>가 아니다.</p>

<blockquote>
  <p>종량제란 : 물품의 무게나 길이, 양에 따라 세금 또는 이용 요금을 매기는 제도.</p>
</blockquote>

<p>인터넷 속도는 1Gbps, 2Gbps 처럼 ISP에서 제어하여 가격에따라 차등을 둘 수는 있지만, 사용량에 따라 가격에 차등을 둘 수는 없다는 이야기이다. 이는 <code class="language-plaintext highlighter-rouge">망중립성 원칙</code>에 의거한다 볼 수 있다.</p>

<blockquote>
  <p>망중립성 원칙 : 사용자들 등 트래픽을 유발하는 것들의 모든 주체가 동일하게 처리(과금)되어야 한다</p>
</blockquote>

<p>즉 특정 콘텐츠에 더 많은 비용을 물릴 수 없다는 내용이다. 그래서 우리나라에서는 현재까지는 유선 인터넷 종량제는 존재하지 않는다. (무선 인터넷은 존재 LTE, 5G 등..)</p>

<blockquote>
  <p>만약 존재한다면… 인터넷을 많이 쓴다면 돈을 더 많이 내야하는 끔찍한 상황이 올지도 모른다..</p>
</blockquote>

<h4 id="기업">기업</h4>

<p>기업같은 경우에는 조금 다르다. <code class="language-plaintext highlighter-rouge">접속료</code>를 낸다고 보면 된다. 하지만 여기서 포인트는 접속료는 종량제가 아니다.</p>

<p>즉 사용한 만큼 내지를 않고 접속용량, 즉 얼마나 많은 트래픽을 받을 수 있게 할 것인가에 대한 비용을 지불을 하는 것이다.</p>

<blockquote>
  <p>예를 들어, 수돗물(망)의 파이프 크기(10Gbps)를 사는것이지, 실제로 수돗물이 24시간 틀어졌다고 해서 더 많이 내고, 1시간 틀었다고 해서 더 작게 내지는 않는다.</p>
</blockquote>

<p>기업도 일반 유저와 마찬가지로, 실제 유저가 많이 들어오는지 얼마나 접속을 하는지에 상관 없이 망중립성 원칙에 의하여 트래픽이 많든 적든 접속료만 내고 끝! 이런 상황을 기대하고 있을 것이다.</p>

<hr />

<h2 id="캐시-서버">캐시 서버</h2>

<p>사실 제일 중요한 문제일 수 도 있는 캐싱에 대한 이야기를 빼놓을 수 없다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/193626114-e1fd7279-79d6-45cb-b6e9-574c6e95f75a.png" alt="image" /></p>

<p>위의 표와 같은 상황에서, 만약 내가 한국 네트워크를 이용하는데, 경유하여 B에 있는 콘텐츠를 보았을 때, B는 한국에 까지 돈을 내야할까? 실제로 해외 기업에서는 이런 말까지 했다</p>

<blockquote>
  <p>자동차 제조사들로 하여금 한국의 고속도로를 건설하고 유지하는 건설 업체에 돈을 내도록 강요하는 것과 마찬가지다</p>
</blockquote>

<p>그리고 이런 방식으로 운영을 했을 때 생기는 다른 문제점들 또한 많이 있다.</p>

<ol>
  <li>
    <p>한국 네트워크에서 출발해서 외국까지 도달하는데, 왔다갔다하는데 트래픽이 너무 많이 발생한다. -&gt; 심지어 한국에서는 일본의 해저케이블을 해외네트워크로 경유할 때 쓰고 있기에 그에 따른 부담도 크다.</p>
  </li>
  <li>
    <p>한국에서 콘텐츠를 즐기려면 외국까지 경유해야되기 때문에 질이 떨어질 수 밖에 없다.</p>
  </li>
</ol>

<p>그래서 캐시서버를 한국에 둔 것이 해결법이라 볼 수 있다. 개발자로써 알고있는 CDN서버가 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/193621212-d9dbb2ae-9186-41c3-9eb7-3709c8422743.png" alt="image" /></p>

<p>아마 몇년 전까지만 해도, 넷플릭스 서버가 느려서 10초 앞으로 가거나 뒤로 갔을때 엄청나게 느렸던 것이 최근들어 느려지지 않게 느껴졌다면 대규모 캐시 서버가 들어오고 난 뒤일 것이다.</p>

<blockquote>
  <p>Netflix는 해당 CDN서버를 OCA(Open Connect), Google은 GGC(Google Global Cache), AWS는 CloudFront라 부른다</p>
</blockquote>

<p>처음에는 글로벌 기업들을 대상으로 무료로 지역 캐시 서버를 만들어 줬다.</p>

<blockquote>
  <p>먹고 떨어져 전략</p>
</blockquote>

<p>근데 이걸 가만히 두었더니, 캐시 서버가 너무 많이 차지하고 있게 되었다.</p>

<blockquote>
  <p>실제로 구글과 넷플릭스의 비중이 각 27.1%와 7.2%로 대한민국의 1/3이 넘는 트래픽을 담당한다.</p>
</blockquote>

<p>그리고 여기서 뒤에 언급할 상호 접속 비용이 문제가 된다. 간단히 이야기하자면, 통신사끼리는 아까 언급했던 <code class="language-plaintext highlighter-rouge">종량제</code>가 적용이 되어, 캐시서버에 트래픽이 증가하게 되면, 해당 통신사의 비용이 증가하게 된다.</p>

<p>즉 대한민국 통신사들이 해외 기업들에 캐시서버 접속료를 요구하면서 문제가 생겼다.</p>

<h3 id="skb-vs-netflix">SKB vs Netflix</h3>

<p>실제로 2020년에 SK 브로드밴드가 넷플릭스에 소송을 걸며 문제를 제기하였다.</p>

<blockquote>
  <p>“소비자에게 요금을 받고 있는 ISP(통신사업자)가 CP에게도 망 이용료를 받는 것은 부당하다”</p>
</blockquote>

<p>구체적인 서로의 입장 표명은 다음과 같다.</p>

<blockquote>
  <p>Netflix: 망중립성 원칙에 따라 망 이용은 무상이라고 주장 → 접속은 유상, 전송은 무상이라고 주장 → 망대가를 받는 접속이라고 하려면 글로벌 연결성이 필요하다고 주장</p>
</blockquote>

<blockquote>
  <p>SKB: 망중립성은 콘텐츠를 차별 없이 다뤄야 한다는 원칙이고 → 국내외에서 접속과 전송을 구분한 사례는 없으며(캘리포니아주법만 예외)→ 접속의 유형은 다양하고 그 중 직접접속의 방식으로 SK브로드밴드의 인터넷 전용회선을 이용하니 대가를 내라고 반박</p>
</blockquote>

<p>현재 1심에서 넷플릭스가 패소한 상황이며, 2심을 진행중이라고 한다.</p>

<hr />

<h2 id="다른-문제들">다른 문제들</h2>

<h3 id="통신사">통신사</h3>

<p>여기서 문제는 통신사가 트래픽에 대한 차등 비용을 징수하겠다! 라고 선언을 한 것이다.</p>

<p>예를들어, 넷플릭스 혹은 구글이 너무 많은 트래픽을 잡아 먹게 되어 추가 망 구축 비용이 생기게 된다면, 기업에게 청구를 하겠다는 것이다.</p>

<p>그럼 통신사의 입장은 다음과 같다</p>

<blockquote>
  <p>너네 기업 트래픽이 많으니까 비용 더내! 망 유지랑 투자에 기업들이 돈을 더 내!</p>
</blockquote>

<p>기업의 입장에서는 다음과 같을 수 있다</p>

<blockquote>
  <p>엥? 유저들한테도 돈을 받고, 유저들이 오래 접속해있다고 돈을 더 내라는거는 TV 오래 본다고 케이블 비를 더 내라는거랑 같은거 아니야? 망 유지는 통신사 몫이지!</p>
</blockquote>

<p>그리고 통신사들의 상호 접속 비용이라는 문제가 하나 더 존재한다</p>

<h3 id="통신사들의-상호-접속-비용">통신사들의 상호 접속 비용</h3>

<p>한국에서만 특이하게 통신사 간의 상호 접속 비용을 지불한다. 즉 인터넷망 상호접속에 따른 비용을 지불한다는 것이다.</p>

<blockquote>
  <p>인터넷망 상호접속 : 통신사가 인터넷 트래픽을 교환하기 위해 인터넷망을 서로 연동하는 것. 즉, 이용자는 한 통신사에 가입하여 전 세계의 콘텐츠 또는 다른 통신사와의 인터넷 통신이 가능하다.</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/193601514-9251ec8e-f3c4-4f8b-bd8d-d5bb19977d05.png" alt="image" /></p>

<p>그리고 지난 16년도에, 트래픽 기반 정산방식을 도입하여, 대형 통신사는 발신 트래픽량에 따라 상호 정산을 하도록 변경을 하였다.</p>

<p>이 때문에, 통신사 간에 발생하는 접속료가 CP에 영향을 미치며 인터넷 시장에서 경쟁이 위축 되기도 하였다.</p>

<p>그래서 19년도에, 대형 통신사 간에 트래픽 교환비율이 일정수준 이하일 경우 접속료 정산제외 구간(무정산 구간)을 만들기도 했지만, 현재 언급되는 인터넷망 사용료는 이 구간을 훨씬 상회하는 범위이다.</p>

<p>짤로 설명하자면 다음과 같다
<img src="https://user-images.githubusercontent.com/66371206/193626422-cdaf3cea-ea2a-43fb-94e2-fff4f5ca677b.png" alt="image" /></p>

<h3 id="미국-또-너야">미국 또 너야?</h3>

<p>현재 상황에 대해서 EU도 조금 마음에 안든다. 왜? 전 세계의 트래픽의 절반 이상이 6개 기업에서 발생하고 있다. (Google, Facebook, Netflix, Apple, Amazon, Microsoft) 그리고 이 기업들에는 공통점이 있다. 전부 미국기업이라는것!!</p>

<blockquote>
  <p>여기에 글로벌 통신망도 결국 미국 기업을 쓰므로 상황이 악화된다 볼 수 있다</p>
</blockquote>

<h3 id="자잘한-문제">자잘한 문제</h3>

<ol>
  <li>
    <p>영상 트래픽이 너무 많아져 버렸다.
현재 영상 트래픽은 전체 모바일 데이터중 약 69%를 차지하고 있으며, 2027년에는 79% 까지 증가할 전망이라고 한다.</p>
  </li>
  <li>
    <p>콘텐츠 사업자들의 대형화
원래는 통신사업자가 대기업이고, 콘텐츠 사업자가 을의 관계였다. 이제는 콘텐츠 사업자가 Google, Netflix 와 같은 대기업으로 성장했다. <code class="language-plaintext highlighter-rouge">Dumb pipe</code> 현상이라고도 부르는 단순 통신망 제공으로는 수익성이 악화되는 현상도 일어나고 있다.</p>
  </li>
  <li>
    <p>상부상조가 안됨
과거에는 기업들이 콘텐츠를 잘 만들어 네트워크가 잘 돌아가 개인들도 비싼 요금제를 가입했지만, 이제는 콘텐츠 기업들이 돈을 잘 벌고 통신사업자가 망만 만들고 푼돈을 벌고 있다.</p>
  </li>
</ol>

<h2 id="피해자는-누구인가">피해자는 누구인가</h2>

<p>지금 상황에서 소비자가 가만히 지켜봐야할 상황이 아닐 수 도 있다. 이대로 망 사용료 논쟁이 커지면서 진행이 된다면 서로의 입장은 다음과 같다.</p>

<blockquote>
  <p>ISP: CP들이 비용을 안내면 소비자 비용 올림 ㅅㄱ</p>
</blockquote>

<blockquote>
  <p>CP: 망비용 걷으면 소비자 비용 올림 ㅅㄱ</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/193624338-ff319c2f-688f-4e20-a90f-a5868302d53c.png" alt="image" /></p>

<p>결국 소비자가 피해보는 입장일 수 밖에 없다.</p>

<p>소비자만 손해를 보는 상황을 만들지 않기 위해, 모두 관심을 가지고 지켜보도록 하자!</p>

<hr />

<p>참고</p>

<p><a href="https://www.bbc.com/korean/news-62979836">BBC news</a></p>

<p><a href="https://www.youtube.com/watch?v=42tbG7A7-Ns">유튜브 슈카월드</a></p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="News" /><summary type="html"><![CDATA[요새 망 사용료에 대한 말이 온/오프라인으로 많이 언급되고 있다. 한술 더 떠서 트위치는 화질 제한을 720p로 낮추는 등 화질제한을 거는등 관련 이슈들이 정말 계속 터져나오고 있다. 망 사용료란 무엇이고, 왜 우리가 관심을 가져야 하는지에 대해서 알아보자]]></summary></entry><entry><title type="html">전략 패턴</title><link href="http://localhost:4000/gof/2022/09/28/strategy-pattern.html" rel="alternate" type="text/html" title="전략 패턴" /><published>2022-09-28T00:00:00+09:00</published><updated>2022-09-28T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/09/28/strategy-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/09/28/strategy-pattern.html"><![CDATA[<h2 id="전략이란">전략이란?</h2>

<ol>
  <li>적을 부수기 위한 작전</li>
  <li>군대를 움직일 때의 방책</li>
  <li>문제를 해결하기 위한 방법</li>
</ol>

<p>등 이라 볼 수 있다.</p>

<blockquote>
  <p>즉 알고리즘을 빈틈없이 교체하여 같은 문제를 다른 방법으로 쉽게 해결할 수 있게 도와주는 패턴이다!</p>
</blockquote>

<h2 id="등장인물">등장인물</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/192945590-e33c0b30-da51-4759-a4b6-68b499b65783.png" alt="StrategyPatternTemplate drawio" /></p>

<h3 id="strategy">Strategy</h3>

<p>Strategy는 전략을 이용하기 위한 API를 결정한다.
-&gt; Strategy Interface로 이용</p>

<h3 id="concrete-strategy">Concrete Strategy</h3>

<p>구체적인 API를 구현한다.
-&gt; Winning Strategy, ProbStrategy로 구현</p>

<h3 id="context">Context</h3>

<p>Strategy를 이용한다.
-&gt; Player로 구현</p>

<h2 id="예제-프로그램">예제 프로그램</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/192945589-86dea94f-74a8-42db-9295-06512f4500bd.png" alt="StrategyPatternExample drawio" /></p>

<h3 id="예제-설명">예제 설명</h3>

<p>Strategy Pattern을 활용한 <code class="language-plaintext highlighter-rouge">가위바위보</code> 프로그램을 제작해보자!</p>

<p>현재 프로그램에서는 두가지 전략이 존재한다.</p>

<ol>
  <li>이기면 다음에 같은 손을 내밀고, 졌다면 랜덤한 손을 내는 간단한 전략</li>
  <li>직전에 냈던 손과 다음에 낼 손을 확률적으로 계산하여 높은 확률의 손을 내는 전략</li>
</ol>

<p>직접 구현을 하며, Strategy Pattern 이 어떤식으로 구현되어 있는지 알아보자</p>

<h3 id="hand-class">Hand Class</h3>

<p>Hand는 Player의 손을 표시하는 클래스로 존재한다. 내부적으로 [주먹, 가위, 보] 를 [0, 1, 2] 로 저장하고 있으며, Player는 필요할 때 언제든 같은 객체를 반복하여 사용할 수 있다.</p>

<blockquote>
  <p>싱글톤을 잘 활용한 예시</p>
</blockquote>

<p>주요 함수로는, 가위바위보를 진행 후에 <code class="language-plaintext highlighter-rouge">isStrongerThan</code>으로 승패를 판단할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Hand</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">ROCK</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">SCIS</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">PAPE</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Hand</span><span class="o">[]</span> <span class="n">hand</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">new</span> <span class="nf">Hand</span><span class="o">(</span><span class="no">ROCK</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">Hand</span><span class="o">(</span><span class="no">SICS</span><span class="o">);</span>
    <span class="k">new</span> <span class="nf">Hand</span><span class="o">(</span><span class="no">PAPE</span><span class="o">);</span>
  <span class="o">};</span>

  <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">name</span> <span class="o">=</span> <span class="o">{</span>
    <span class="err">'</span><span class="nc">Rock</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="nc">Scissors</span><span class="err">'</span><span class="o">,</span> <span class="err">'</span><span class="nc">Paper</span><span class="err">'</span>
  <span class="o">};</span>

  <span class="kd">private</span> <span class="kt">int</span> <span class="n">handValue</span><span class="o">;</span>
  <span class="kd">private</span> <span class="nf">Hand</span><span class="o">(</span><span class="kt">int</span> <span class="n">handValue</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// constructor</span>
    <span class="k">this</span><span class="o">.</span><span class="na">handValue</span> <span class="o">=</span> <span class="n">handValue</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Hand</span> <span class="nf">getHand</span><span class="o">(</span><span class="kt">int</span> <span class="nc">HandValue</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//get instance from value</span>
    <span class="k">return</span> <span class="n">hand</span><span class="o">[</span><span class="n">handValue</span><span class="o">];</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isStrongerThan</span><span class="o">(</span><span class="nc">Hand</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// return true when win</span>
    <span class="k">return</span> <span class="nf">fight</span><span class="o">(</span><span class="n">h</span><span class="o">)</span> <span class="o">==</span> <span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isWeakerThan</span><span class="o">(</span><span class="nc">Hand</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//return true when lose</span>
    <span class="k">return</span> <span class="nf">fight</span><span class="o">(</span><span class="n">h</span><span class="o">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kt">int</span> <span class="nf">fight</span><span class="o">(</span><span class="nc">Hand</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span> <span class="c1">//private fight method</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">h</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// draw</span>
      <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">((</span><span class="k">this</span><span class="o">.</span><span class="na">handValue</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="n">h</span><span class="o">.</span><span class="na">handValue</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// win</span>
      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="c1">// lose</span>
      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">name</span><span class="o">[</span><span class="n">handValue</span><span class="o">];</span>
  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="strategy-interface">Strategy Interface</h3>

<p>전략을 위한 추상 메소드의 집합이다.
nextHand는 다음에 내는 손을 얻기 위한 메소드이며, 이 메소드가 호출되면, 다음에 낼 손을 리턴하게 된다.
Study는 직전에 내가 낸 손으로 이겼는지 졌는지, 그리고 그에 해당하는 학습을 위한 메소드로 사용된다. 이겼다면 <code class="language-plaintext highlighter-rouge">study(true)</code>, 졌다면 <code class="language-plaintext highlighter-rouge">study(false)</code>로 호출된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Strategy</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">Hand</span> <span class="nf">nextHand</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">win</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="winningstrategy-class">WinningStrategy Class</h3>

<p>단순한 Strategy 를 나타낸다.</p>

<p>간단하게, 직전 승부에서 이겼다면, 이긴 손을 계속내고, 만약 졌다면 새로운 랜덤한 손을 생성해서 제공한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WinningStrategy</span> <span class="kd">implements</span> <span class="nc">Strategy</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Random</span> <span class="n">random</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">boolean</span> <span class="n">won</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Hand</span> <span class="n">prevHand</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">WinningStrategy</span><span class="o">(</span><span class="kt">int</span> <span class="n">seed</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// init Random from seed</span>
		<span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seed</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Hand</span> <span class="nf">nextHand</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(!</span><span class="n">won</span><span class="o">){</span> <span class="c1">// lose -&gt; next hand will be random</span>
			<span class="n">prevHand</span> <span class="o">=</span> <span class="nc">Hand</span><span class="o">.</span><span class="na">getHand</span><span class="o">(</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">prevHand</span><span class="o">;</span> <span class="c1">// win -&gt; next hand is same</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">win</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// check if last game is won</span>
		<span class="n">won</span> <span class="o">=</span> <span class="n">win</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="probstrategy-class">ProbStrategy Class</h3>

<p>가위바위보의 복잡한 전략
간단하게 설명을 하자면
<code class="language-plaintext highlighter-rouge">history[이전에 낸 손][이번에 낼 손]</code> 에 해당하는 데이터들을 계속 쌓아, 이번에 낼 손 중에 가장 이겼던 확률이 높았던 것을 내게 결정한다.</p>

<p>예를들어 내가 이때까지 가위를 내고 다음에 주먹을 내서 이겼던 상황이 10번 있었다면 <code class="language-plaintext highlighter-rouge">history[1][2] = 10</code>이 된다.</p>

<p>즉 내가 저번에 가위를 냈고 다음에 주먹, 가위, 보를 냈을때의 승률 즉 <code class="language-plaintext highlighter-rouge">history[1][0]</code> <code class="language-plaintext highlighter-rouge">history[1][1]</code> <code class="language-plaintext highlighter-rouge">history[1][2]</code>의 비율이 <code class="language-plaintext highlighter-rouge">1:3:5</code> 라면 주먹을 낼 확률이 1/9, 가위를 낼 확률이 3/9, 보를 낼 확률이 5/9. 이런식으로 정의를 하였다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProbStrategy</span> <span class="kd">implements</span> <span class="nc">Strategy</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Random</span> <span class="n">random</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">prevHandValue</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">currentHandValue</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">history</span> <span class="o">=</span> <span class="o">{</span>
			<span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,},</span>
			<span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,},</span>
			<span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="mi">1</span><span class="o">,},</span>
	<span class="o">};</span>

	<span class="kd">public</span> <span class="nf">ProbStrategy</span><span class="o">(</span><span class="kt">int</span> <span class="n">seed</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// init Random from seed</span>
		<span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">(</span><span class="n">seed</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="nc">Hand</span> <span class="nf">nextHand</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// next hand algorithm logic</span>
		<span class="kt">int</span> <span class="n">bet</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">getSum</span><span class="o">(</span><span class="n">currentHandValue</span><span class="o">));</span>
		<span class="kt">int</span> <span class="n">handValue</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">if</span><span class="o">(</span><span class="n">bet</span> <span class="o">&lt;</span> <span class="n">history</span><span class="o">[</span><span class="n">currentHandValue</span><span class="o">][</span><span class="mi">0</span><span class="o">]){</span>
			<span class="n">handValue</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">bet</span> <span class="o">&lt;</span> <span class="n">history</span><span class="o">[</span><span class="n">currentHandValue</span><span class="o">][</span><span class="mi">0</span><span class="o">]+</span><span class="n">history</span><span class="o">[</span><span class="n">currentHandValue</span><span class="o">][</span><span class="mi">1</span><span class="o">]){</span>
			<span class="n">handValue</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
		<span class="o">}</span><span class="k">else</span><span class="o">{</span>
			<span class="n">handValue</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
		<span class="o">}</span>
		<span class="n">prevHandValue</span> <span class="o">=</span> <span class="n">currentHandValue</span><span class="o">;</span>
		<span class="n">currentHandValue</span> <span class="o">=</span> <span class="n">handValue</span><span class="o">;</span>
		<span class="k">return</span> <span class="nc">Hand</span><span class="o">.</span><span class="na">getHand</span><span class="o">(</span><span class="n">handValue</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="nf">getSum</span><span class="o">(</span><span class="kt">int</span> <span class="n">hv</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// help next hand algorithm logic</span>
		<span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">3</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="n">sum</span> <span class="o">+=</span> <span class="n">history</span><span class="o">[</span><span class="n">hv</span><span class="o">][</span><span class="n">i</span><span class="o">];</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="nd">@Override</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">study</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">win</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// stack data for algorithm</span>
		<span class="k">if</span><span class="o">(</span><span class="n">win</span><span class="o">){</span>
			<span class="n">history</span><span class="o">[</span><span class="n">prevHandValue</span><span class="o">][</span><span class="n">currentHandValue</span><span class="o">]++;</span>
		<span class="o">}</span><span class="k">else</span><span class="o">{</span>
			<span class="n">history</span><span class="o">[</span><span class="n">prevHandValue</span><span class="o">][(</span><span class="n">currentHandValue</span><span class="o">+</span><span class="mi">1</span><span class="o">)%</span><span class="mi">3</span><span class="o">]++;</span>
			<span class="n">history</span><span class="o">[</span><span class="n">prevHandValue</span><span class="o">][(</span><span class="n">currentHandValue</span><span class="o">+</span><span class="mi">2</span><span class="o">)%</span><span class="mi">3</span><span class="o">]++;</span>
		<span class="o">}</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="player-class">Player Class</h3>

<p>실제 가위바위보를 하는 사람을 표현할 클래스이다.
Player는 <code class="language-plaintext highlighter-rouge">이름</code> 과 <code class="language-plaintext highlighter-rouge">전략</code>이 할당되어 인스턴스를 만들게 된다.
<code class="language-plaintext highlighter-rouge">nextHand</code>를 호출하면, 전략에 알맞는 다음 손을 유추하여 리턴 받고 다음 손으로 지정하게 된다. 즉 다음에 자신이 해야 할 행동을 Strategy에 맡기고 <code class="language-plaintext highlighter-rouge">위임</code>을 하고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Player</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">Strategy</span> <span class="n">strategy</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">wincount</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">losecount</span><span class="o">;</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">gamecount</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nf">Player</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span><span class="nc">Strategy</span> <span class="n">strategy</span><span class="o">){</span>
		<span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">strategy</span> <span class="o">=</span> <span class="n">strategy</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">Hand</span> <span class="nf">nextHand</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// get command from strategy</span>
		<span class="k">return</span> <span class="n">strategy</span><span class="o">.</span><span class="na">nextHand</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">win</span><span class="o">(){</span>
		<span class="n">strategy</span><span class="o">.</span><span class="na">study</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
		<span class="n">wincount</span><span class="o">++;</span>
		<span class="n">gamecount</span><span class="o">++;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">lose</span><span class="o">(){</span>
		<span class="n">strategy</span><span class="o">.</span><span class="na">study</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
		<span class="n">losecount</span><span class="o">++;</span>
		<span class="n">gamecount</span><span class="o">++;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">even</span><span class="o">(){</span>
		<span class="n">gamecount</span><span class="o">++;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">(){</span>
		<span class="k">return</span> <span class="s">"["</span><span class="o">+</span><span class="n">name</span><span class="o">+</span><span class="s">":"</span><span class="o">+</span><span class="n">gamecount</span><span class="o">+</span><span class="s">"games,"</span><span class="o">+</span><span class="n">wincount</span><span class="o">+</span><span class="s">"win,"</span><span class="o">+</span><span class="n">losecount</span><span class="o">+</span><span class="s">"lose"</span><span class="o">+</span><span class="s">"]"</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="main-class">Main Class</h3>

<p>실제로 Main 함수는 다음과 같이 흘러간다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">!=</span><span class="mi">2</span><span class="o">){</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Usage:java Main randomseed1 randomseed2"</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Example:java Main 314 15"</span><span class="o">);</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>

		<span class="kt">int</span> <span class="n">seed1</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span> <span class="c1">// init with seed</span>
		<span class="kt">int</span> <span class="n">seed2</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>

		<span class="nc">Player</span> <span class="n">player1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Player</span><span class="o">(</span><span class="s">"HanRyang"</span><span class="o">,</span><span class="k">new</span> <span class="nc">WinningStrategy</span><span class="o">(</span><span class="n">seed1</span><span class="o">));</span>
		<span class="nc">Player</span> <span class="n">player2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Player</span><span class="o">(</span><span class="s">"Halang"</span><span class="o">,</span><span class="k">new</span> <span class="nc">WinningStrategy</span><span class="o">(</span><span class="n">seed2</span><span class="o">));</span>

		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">1000</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
			<span class="nc">Hand</span> <span class="n">nextHand1</span> <span class="o">=</span> <span class="n">player1</span><span class="o">.</span><span class="na">nextHand</span><span class="o">();</span>
			<span class="nc">Hand</span> <span class="n">nextHand2</span> <span class="o">=</span> <span class="n">player2</span><span class="o">.</span><span class="na">nextHand</span><span class="o">();</span>

			<span class="k">if</span><span class="o">(</span><span class="n">nextHand1</span><span class="o">.</span><span class="na">isStrongThan</span><span class="o">(</span><span class="n">nextHand2</span><span class="o">))</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Winner:"</span><span class="o">+</span><span class="n">player1</span><span class="o">);</span>
				<span class="n">player1</span><span class="o">.</span><span class="na">win</span><span class="o">();</span>
				<span class="n">player2</span><span class="o">.</span><span class="na">lose</span><span class="o">();</span>
			<span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">nextHand1</span><span class="o">.</span><span class="na">isWeakerThan</span><span class="o">(</span><span class="n">nextHand2</span><span class="o">))</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Winner:"</span><span class="o">+</span><span class="n">player2</span><span class="o">);</span>
				<span class="n">player2</span><span class="o">.</span><span class="na">win</span><span class="o">();</span>
				<span class="n">player1</span><span class="o">.</span><span class="na">lose</span><span class="o">();</span>
			<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
				<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Even..."</span><span class="o">);</span>
				<span class="n">player1</span><span class="o">.</span><span class="na">even</span><span class="o">();</span>
				<span class="n">player2</span><span class="o">.</span><span class="na">even</span><span class="o">();</span>
			<span class="o">}</span>
		<span class="o">}</span>

		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Total result:"</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">player1</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">player2</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="왜-사용할까">왜 사용할까?</h2>

<p>일반적으로 메소드 내부에 동화된 형태로 알고리즘을 구현하지만 Strategy Pattern은 알고리즘을 다른 부분을 분리하여 API 즉 알고리즘의 인터페이스만 규정하고있다.</p>

<p>만약 알고리즘을 개량하고 싶은 상황이 온다면, Strategy Pattern의 인터페이스는 유지한 채로, Concrete Strategy만 변경하면 된다. 혹은 새로운 알고리즘을 사용하고 싶다면, 새로운 Concrete Strategy를 만든 후 바꾸기만 하면 된다. 즉 위임이라는 <code class="language-plaintext highlighter-rouge">느슨한 연결</code>을 제공함으로써 알고리즘을 용이하게 교환할 수 있게 된다.</p>

<p>혹은 원래 알고리즘과 속도 비교등도 간단하게 교체를 통하여 진행 할 수 있다.</p>

<h2 id="tip">TIP</h2>

<p>Strategy 패턴을 활용하여, 동작 중에도 Concrete Strategy 역할의 클래스를 교체 할 수도 있다.</p>

<blockquote>
  <p>Ex. 메모리가 적은 환경에서는 속도가 느리지만 메모리를 절약하는 전략, 메모리가 많을 때에서는 속도가 빠르지만 메모리를 많이 사용하는 전략을 선택 할 수 있다.</p>
</blockquote>

<p>Strategy 가 알고리즘의 확장성 즉 OCP를 만족시키며, Context가 알고리즘의 메소드를 모르고도 이용할 수 있게 하며 알고리즘의 복잡도를낮춰준다.</p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><category term="TIL" /><summary type="html"><![CDATA[전략이란?]]></summary></entry><entry><title type="html">Cypress로 e2e 테스트 하기</title><link href="http://localhost:4000/react/2022/09/19/start-cypress.html" rel="alternate" type="text/html" title="Cypress로 e2e 테스트 하기" /><published>2022-09-19T00:00:00+09:00</published><updated>2022-09-19T00:00:00+09:00</updated><id>http://localhost:4000/react/2022/09/19/start-cypress</id><content type="html" xml:base="http://localhost:4000/react/2022/09/19/start-cypress.html"><![CDATA[<h2 id="cypress로-진행하는-e2e-테스트">Cypress로 진행하는 e2e 테스트</h2>

<blockquote>
  <p>환경: React, typescript, styled-components</p>
</blockquote>

<h2 id="테스트를-해야되는-이유">테스트를 해야되는 이유?</h2>

<hr />

<p>사실 테스트를 진행해야 되는이유는 정말 셀 수 없이 많다.</p>

<ul>
  <li>개발 과정에서 문제가 생겼을 때 바로 눈치 챌 수 있디</li>
  <li>리팩토링을 믿고 할 수 있다</li>
  <li>바로 코드의 동작 상태를 확인할 수 있다</li>
  <li>테스트 코드를 만들기 위해 코드를 하다보면 컴포넌트 분할 및 클린코드가 자연스럽게 이루어진다</li>
  <li>품질, 안전, 성능을 확인할 수 있다</li>
  <li>지속적인 운영을 보장한다</li>
  <li>위험을 완화할 수 있다</li>
  <li>등등..</li>
</ul>

<p>하지만 이러한 이유들을 포함하여 도입한 이유 중 큰 이유는 우리 프로젝트가 <code class="language-plaintext highlighter-rouge">Agile</code> 방법론을 따르고 있기 때문이다.</p>

<blockquote>
  <p>“애자일의 기술 실천 방법은 모든 애자일 활동 중 가장 핵심적인 요소다.
기술 실천 방법 없이 애자일을 도입하려는 시도는 실패할 수밖에 없다.”</p>
</blockquote>

<p>그리고 이러한 애자일의 실천방법 중 대표적인 방법이 바로 <code class="language-plaintext highlighter-rouge">TDD</code> Test Driven Development 이다. 하지만 아직 Test를 먼저 짜고 코드를 그에 맞춰 개발하는 레벨에는 도달하지 못하여 우선 e2e 테스트 코드를 짜는 연습부터 시작하기로 했다.</p>

<hr />

<h2 id="cypress-설치하기">Cypress 설치하기</h2>

<h3 id="dependency-설치">dependency 설치</h3>

<p>우선 cypress dependency 를 추가해준다</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">--save-dev</span> cypress
</code></pre></div></div>

<h4 id="styled-component-처리">Styled Component 처리</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">--save-dev</span> react-remove-properties
</code></pre></div></div>

<p>테스트를 위해서 component에 <code class="language-plaintext highlighter-rouge">[data-cy=”new-component”]</code> 이런식으로 선언해주는데 빌드 과정에서 없애주는 dependency를 추가로 설치해준다. 그리고 babelrc에서 빌드하기 전에 처리하지 않는 작업도 포함해주자.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"production"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">[</span><span class="w">
        </span><span class="s2">"react-remove-properties"</span><span class="p">,</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"data-cy"</span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="config-설정">config 설정</h3>

<p>그 다음 cypress가 원하는대로 작동할 수 있게 config설정을 마무리 해준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// cypress.config.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">cypress</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">defineConfig</span><span class="p">({</span>
  <span class="na">e2e</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">setupNodeEvents</span><span class="p">(</span><span class="nx">on</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// implement node event listeners here</span>
    <span class="p">},</span>
    <span class="na">baseUrl</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">projectId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ownProjectId</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>baseUrl같은 경우에는, 테스트할 서버의 주소가 되며, projectId는 추후에 cypress 앱과 연동하여 record 확인등을 할 시에 인증 용도로 사용된다.</p>

<p>그리고 cypress는 테스트 코드를 실행하다보면, 자연스럽게 스크린샷과 영상을 찍어서 로컬에 저장해두는데, 깃이 무거워지기 전에 ignore도 미리 해두자</p>

<pre><code class="language-gitignore"># ...

cypress/videos
cypress/screenshots
</code></pre>

<h3 id="폴더-구조">폴더 구조</h3>

<p>내가 사용하고 있는 Cypress 의 폴더 구조는 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+--cypress
      +--e2e
      |   +--1-main-page
      |   |      +--login.cy.ts
      |   |      +--main.cy.ts
      |   |      +--register.cy.ts
      |   +--2-ready-page
      |          +--ready-modal.cy.ts
      |          +--ready.cy.ys
      +--fixtures
      |   +--allRooms.json
      |   +--loginResult.json
      |   +--profile.json
      +--support

</code></pre></div></div>

<p>e2e 폴더에 실제로 테스트할 코드들을 페이지별로 분리했고,
fixtures 폴더에는 추후에 사용할 모킹하였을 때 결과로 받을 json 형식들을 미리 만들어 두었다.</p>

<hr />

<h2 id="테스트-코드-작성하기">테스트 코드 작성하기</h2>

<p>간단하게 main page를 e2e 테스를 진행해보자. 테스트해볼 사안들은 다음과 같다.</p>

<ul>
  <li>타이틀이 렌더이 잘 되는지</li>
  <li>Header가 잘 렌더링 되었는지
    <ul>
      <li>로고</li>
      <li>로그인 버튼</li>
    </ul>
  </li>
  <li>Footer가 잘 렌더링 되었는지
    <ul>
      <li>Terms, Privacy Policy 버튼</li>
      <li>정보</li>
    </ul>
  </li>
  <li>랜딩 페이지가 잘 렌더링 되었는지</li>
  <li>방 정보API를 잘 호출하는지</li>
  <li>방 정보가 잘 렌더링 되었는지
    <ul>
      <li>방장 정보</li>
      <li>방의 제목</li>
      <li>방의 설명</li>
    </ul>
  </li>
</ul>

<p>그럼 천천히 진행해보도록 하자.</p>

<h3 id="describe">describe</h3>

<p>이 부분은 거의 모든 테스트코드 라이브러리들은 다 유사한 것 같다. describe 에서 내가 어떠한 컴포넌트 혹은 페이지를 검사할지 대주제를 정하고 it에서 개개인의 테스트들을 실제로 구현한다.</p>

<h4 id="beforeeach">beforeEach</h4>

<p>매번 it를 실행하기 전, 어떠한 역할을 수행할지 미리 정할 수 있다. 예를들어 모킹이 필요한 경우, 여기서 어떤 요청을 intercept해서 가져올지, it를 실행하기 전에, 어떤 페이지를 방문할지, viewport는 어떤 비율로 볼지 등 설정 할 수 있다.</p>

<h4 id="intercept">intercept</h4>

<p>여기서 가장 중요한 부분이다. Cypress는 e2e 테스트이기에 모든 방면에서 다 테스트를 진행하기에 BE에 API 요청은 당연히 일어난다. 하지만, 실제 BE에 API를 요청한다면 그건 완벽한 테스트가 될 수 없다.</p>

<blockquote>
  <p>CREATE 같은 경우 매번 BE에 요청하기에도 애매…</p>
</blockquote>

<p>그래서 요청을 보내기전에 method와 url 기준으로 intercept해서 어떠한 요청을 주거나 받을지 미리 설정할 수 있는 방법이다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cy</span><span class="p">.</span><span class="nx">intercept</span><span class="p">(</span>
  <span class="p">{</span> <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span> <span class="s2">`/api/v1/rooms`</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">fixture</span><span class="p">:</span> <span class="dl">"</span><span class="s2">allRooms.json</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<p>해석을 간단하게 해보자면, <code class="language-plaintext highlighter-rouge">GET</code>요청을 <code class="language-plaintext highlighter-rouge">/api/v1/rooms</code>에 요청하게 되면, 실제로 <code class="language-plaintext highlighter-rouge">GET</code>을 하지는 말고, fixtures 디렉토리에 저장해둔 <code class="language-plaintext highlighter-rouge">allRooms.json</code>을 가져오라는 뜻이다.</p>

<p>그렇게 완성된 beforeEach는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">intercept</span><span class="p">({</span> <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span> <span class="nx">API</span><span class="p">.</span><span class="nx">ROOM</span> <span class="p">},</span> <span class="p">{</span> <span class="na">fixture</span><span class="p">:</span> <span class="dl">"</span><span class="s2">allRooms.json</span><span class="dl">"</span> <span class="p">});</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="mi">1536</span><span class="p">,</span> <span class="mi">960</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="it">it</h3>

<blockquote>
  <p>이제 실제로 테스트케이스들을 작성할 준비가 되었다!</p>
</blockquote>

<p>우선 cypress의 문법을 알아야된다. 정말 방대하지만, cypress.io에 정리가 잘 되어 있는지 천천히 읽어보면 좋을 것 같다.</p>

<blockquote>
  <p><a href="https://docs.cypress.io/api/table-of-contents">docs.cypress.io</a>로 바로가기</p>
</blockquote>

<p>간단한 문법들은 다음과 같다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">cy.get('')</code> 으로 원하는 컴포넌트를 선택 할 수 있다. 빈칸에는 class 혹은 id 등으로 검색이 가능하지만, cypress 의 best practice 는 data-cy 태그를 이용하여 unique한 컴포넌트를 가져오는 것이라 하며, 컴포넌트에 추가하여 손쉽게 적용시킬 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">.should()</code> 명령어로 방금 get()에서 가져온 컴포넌트가 어떠한 동작들을 해야하는지 선언 할 수 있다. 예를들어 <code class="language-plaintext highlighter-rouge">should('be.visible')</code> 이라면 선택된 컴포넌트가 보여야된다는 것이며, <code class="language-plaintext highlighter-rouge">should('have.text','word')</code> 라면, <code class="language-plaintext highlighter-rouge">word</code>라는 단어를 꼭 포함해야 된다는 뜻이다. 만약 찾는것이 실행되고 있는 비디오라면, 이런것도 가능하다.
    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="custom-video-screen"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">have.prop</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">paused</span><span class="dl">"</span><span class="p">,</span>
  <span class="kc">false</span>
<span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">cy.wait()</code> 를 이용하여 ms단위로 cypress 의 테스트를 멈춰 둘 수 있다. 영상으로 볼 때 워낙 빠르게 지나가기에, 한번씩 테스트 후에 <code class="language-plaintext highlighter-rouge">wait()</code>를 두어 눈으로 따라가는것도 괜찮았다.</li>
  <li><code class="language-plaintext highlighter-rouge">cy.and()</code> 앞선 명령어를 연계해서 사용할 수 있게 도와준다. 예로 이런것도 가능하다.
    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="dropbox-item"]</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">have.length</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">and</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain.text</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">fake_device_0</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
</ol>

<blockquote>
  <p>간단한 예시코드는 다음과 같이 만들 수 있다!</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">render Main Props</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// check if title is visible</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">MODOCO</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// check if login button is visible and clickable</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="main-login-button"]</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">be.visible</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">have.text</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">로그인</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// check modoco logo</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="modoco-logo"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">modoco</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// check if all footer props are visible</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="main-footer"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">be.visible</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Terms</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Privacy Policy</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>완성된 테스트코드를 Cypress로 실행하면 다음과 같은 결과를 얻을 수 있다.</p>

<blockquote>
  <p>메인 페이지 테스트
<img src="https://user-images.githubusercontent.com/66371206/191083487-d63d6966-6867-47ca-abcd-b69d9e23e205.gif" alt="ezgif-4-1251ac46b2" /></p>
</blockquote>

<blockquote>
  <p>레디 페이지 테스트
<img src="https://user-images.githubusercontent.com/66371206/191083493-8de8438b-ff4d-4f69-a947-35ddafd58276.gif" alt="ezgif-4-350cc82de1" /></p>
</blockquote>

<hr />

<p>참고문서</p>

<p><a href="https://www.kiwa.com/kr/ko/services/testing/why-should-i-have-my-product-tested-or-evaluated/">https://www.kiwa.com/kr/ko/services/testing/why-should-i-have-my-product-tested-or-evaluated/</a>
<a href="https://tech.kakao.com/2021/11/08/test-code/">https://tech.kakao.com/2021/11/08/test-code/</a></p>]]></content><author><name>071yoon</name></author><category term="React" /><category term="React" /><category term="Testing" /><summary type="html"><![CDATA[Cypress로 진행하는 e2e 테스트]]></summary></entry><entry><title type="html">빌더 패턴</title><link href="http://localhost:4000/gof/2022/09/15/builder-pattern.html" rel="alternate" type="text/html" title="빌더 패턴" /><published>2022-09-15T00:00:00+09:00</published><updated>2022-09-15T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/09/15/builder-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/09/15/builder-pattern.html"><![CDATA[<h2 id="java언어로-배우는-디자인-패턴-입문">Java언어로 배우는 디자인 패턴 입문</h2>

<h3 id="생성-패턴-creational-pattern">생성 패턴 Creational Pattern</h3>

<p>생성 패턴에서는 중요한 이슈가 두 가지가 존재한다.</p>

<ul>
  <li>생성 패턴은 시스템이 어떤 Concrete Class를 사용하는지에 대한 정보를 캡슐화한다.</li>
  <li>생성 패턴은 이들 클래스의 인스턴스들이 어떻게 만들고 어떻게 결합하는지에 대한 부분을 완전히 가려준다.</li>
</ul>

<blockquote>
  <p>생성 패턴을 이용하면 무엇이 생성되고, 누가 이것을 생성하며, 이것이 어떻게 생성되는지, 언제 생성할 것인지 결정하는 데 유연성을 확보할 수 있다.</p>
</blockquote>

<p>추후에 어떤식으로 구현할 수 있는지 알아보자.</p>

<h3 id="빌더-패턴의-등장인물">빌더 패턴의 등장인물</h3>

<p><img src="https://user-images.githubusercontent.com/66371206/190228103-b8b180e3-1fb3-4700-872c-5f263b0b6284.jpg" alt="Director 1" /></p>

<ul>
  <li>Builder
    <ul>
      <li>Instance 생성을 위한 API를 결정</li>
      <li>인스턴스의 각 부분을 만들기 위한 메소드 존재</li>
      <li>Builder Class</li>
    </ul>
  </li>
  <li>ConcreteBuilder
    <ul>
      <li>Build 역할의 API를 실제로 구현</li>
      <li>인스턴스 작성으로 호출되는 메소드가 정의</li>
      <li>최종적인 결과물을 얻기위한 메소드가 준비</li>
      <li>TextBuilder와 HTMLBuilder</li>
    </ul>
  </li>
  <li>Director
    <ul>
      <li>Builder 역할의 API를 사용하여 인스턴스 생성</li>
      <li>ConcreteBuilder에 의존하지 않음</li>
      <li>ConcreteBuilder에 상관하지 않고, Builder 역할의 메소드만 사용</li>
      <li>Director Class</li>
    </ul>
  </li>
  <li>Client
    <ul>
      <li>Builder패턴을 이용</li>
      <li>Main Class</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/66371206/190228118-4e62902f-cd49-40ad-b139-f66ac0eef2c0.jpg" alt="Director 2" /></p>

<h3 id="빌더-패턴-예시">빌더 패턴 예시</h3>

<p><code class="language-plaintext highlighter-rouge">문서</code>를 작성하는 프로그램</p>

<h4 id="구조">구조</h4>

<ul>
  <li>타이틀을 한 개 포함</li>
  <li>문자열을 몇 개 포함</li>
  <li>개별항목을 몇 개 포함</li>
  <li>TextBuilder : Plain Text를 사용하여 문서를 생성</li>
  <li>HTMLBuilder : HTML을 사용하여 문서를 생성</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/66371206/190228122-f6accbb8-f15b-4575-b69a-0330d2853373.jpg" alt="Director 3" /></p>

<h4 id="builder-class">Builder Class</h4>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">문서</code>를 만들 메소드들을 선언하고 있는 추상클래스</p>
</blockquote>

<p>makeTitle, makeString, makeItems는 각각 타이틀, 문자열, 개별 항목을 문서 안에 구축하는 메소드</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeString</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeItems</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">items</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="director-class">Director Class</h4>

<blockquote>
  <p>Builder 클래스로 선언되어 있는 메소드를 사용하여 문서를 생성</p>
</blockquote>

<p>Director 클래스의 생성자는 Builder형이지만, 실제로 Builder 클래스의 인스턴스가 주어지지는 않는다.</p>

<blockquote>
  <p>Builder 클래스는 추상클래스이므로, 인스턴스 생성이 불가</p>
</blockquote>

<p>Director 클래스에서 실제로 전달되는것은 Builder 클래스의 하위 클래스의 인스턴스이다. Builder 클래스의 하위 클래스 종류에 따라 Director 클래스가 만들 문서의 형식이 정해진다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Director</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Builder</span> <span class="n">builder</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Director</span><span class="o">(</span><span class="nc">Builder</span> <span class="n">builder</span><span class="o">){</span> <span class="c1">// Builder의 하위 클래스의 인스턴스이므로</span>
		<span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span> <span class="c1">// builder필드에 저장</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeTitle</span><span class="o">(</span><span class="err">'</span><span class="nc">Greeting</span><span class="err">'</span><span class="o">);</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeString</span><span class="o">(</span><span class="err">'</span><span class="n">아침과</span> <span class="n">낮에</span><span class="err">'</span><span class="o">);</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeItems</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span>
			<span class="err">'</span><span class="n">좋은</span> <span class="n">아침입니다</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
			<span class="err">'</span><span class="n">안녕하세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
		<span class="o">});</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeString</span><span class="o">(</span><span class="err">'</span><span class="n">밤에</span><span class="err">'</span><span class="o">);</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeItems</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span>
			<span class="err">'</span><span class="n">안녕하세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
			<span class="err">'</span><span class="n">안녕히</span> <span class="n">주무세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
			<span class="err">'</span><span class="n">안녕히</span> <span class="n">계세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
		<span class="o">});</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">//문서를 완성</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="textbuilder-class">TextBuilder Class</h4>

<blockquote>
  <p>Builder Class의 하위 Class</p>
</blockquote>

<p>일반 텍스트를 사용하여 문서를 구축하고, String으로 봔한</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextBuilder</span> <span class="kd">extends</span> <span class="nc">Builder</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">StringBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">){</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">'</span><span class="o">======================</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'['</span> <span class="o">+</span> <span class="err">'</span><span class="n">title</span><span class="err">'</span> <span class="o">+</span> <span class="err">'</span><span class="o">]</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeString</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">){</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'ㅁ'</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="err">'</span><span class="n">ㅁ</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeItems</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">items</span><span class="o">){</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
			<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">'</span> <span class="o">-</span><span class="err">'</span> <span class="o">+</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="sc">'\n'</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">(){</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">'</span><span class="o">======================</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getResult</span><span class="o">(){</span>
		<span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="htmlbuilder-class">HTMLBuilder Class</h4>

<blockquote>
  <p>Builder Class의 하위 Class</p>
</blockquote>

<p>HTML 파일로 문서를 구축</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HTMLBuilder</span> <span class="kd">extends</span> <span class="nc">Builder</span><span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">filename</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">PrintWriter</span> <span class="n">writer</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">){</span>
		<span class="n">filename</span> <span class="o">=</span> <span class="n">title</span> <span class="o">+</span> <span class="err">'</span><span class="o">.</span><span class="na">html</span><span class="err">'</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWrite</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">filename</span><span class="o">));</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;html&gt;&lt;head&gt;&lt;title&gt;"</span> <span class="o">+</span> <span class="n">title</span> <span class="o">+</span> <span class="s">"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"</span><span class="o">);</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;h1&gt;"</span> <span class="o">+</span> <span class="n">title</span> <span class="o">+</span> <span class="s">"&lt;/h1&gt;"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeString</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">){</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;p&gt;"</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">"&lt;/p&gt;"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeItems</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">items</span><span class="o">){</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;ul&gt;"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
			<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;li&gt;"</span> <span class="o">+</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">"&lt;/li&gt;"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/ul&gt;"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">(){</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/body&gt;&lt;/html&gt;"</span><span class="o">);</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getResult</span><span class="o">(){</span>
		<span class="k">return</span> <span class="n">filename</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="main-class">Main Class</h4>

<blockquote>
  <p>실제로 실행하는 Builder 패턴의 테스트 프로그램</p>
</blockquote>

<p>TextBuilder와 HTMLBuilder는 Builder의 하위클래스이며, Director는 Builder의 메소드만을 사용하여 문서를 작성한다. Builder의 메소드만을 사용한다는 뜻은 Director는 실제로 동작하는것이 TextBuilder인지, HTMLBuilder인지 알 수 없다는 뜻. 즉 Builder는 문서를 구축하기 위해, 필요 충분한 메소드군을 선언할 필요가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">){</span>
			<span class="n">usage</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="err">'</span><span class="n">plain</span><span class="err">'</span><span class="o">)){</span>
			<span class="nc">TextBuilder</span> <span class="n">textbuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextBuilder</span><span class="o">();</span>
			<span class="nc">Director</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Director</span><span class="o">(</span><span class="n">textbuilder</span><span class="o">);</span>
			<span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
			<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">textbuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="err">'</span><span class="n">html</span><span class="err">'</span><span class="o">))</span> <span class="o">{</span>
			<span class="nc">HTMLBuilder</span> <span class="n">htmlbuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HTMLBuilder</span><span class="o">();</span>
			<span class="nc">Director</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Director</span><span class="o">(</span><span class="n">htmlbuilder</span><span class="o">);</span>
			<span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
			<span class="nc">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">htmlbuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">filename</span> <span class="o">+</span> <span class="err">'</span><span class="n">가</span> <span class="n">생성되었습니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">usage</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">usage</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">'</span><span class="nl">Usage:</span> <span class="n">java</span> <span class="nc">Main</span> <span class="n">plain</span> <span class="n">일반</span> <span class="n">텍스트로</span> <span class="n">문서작성</span><span class="err">'</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">'</span><span class="nl">Usage:</span> <span class="n">java</span> <span class="nc">Main</span> <span class="n">html</span> <span class="no">HTML</span> <span class="n">파일로</span> <span class="n">문서작성</span><span class="err">'</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>일반 텍스트 실행결과
<img src="https://user-images.githubusercontent.com/66371206/190231034-16e7b3c7-9880-45b8-8b40-6d4914133567.png" width="400px" /></p>
</blockquote>

<blockquote>
  <p>HTML 파일 실행결과
<img src="https://user-images.githubusercontent.com/66371206/190230554-99d4ada5-afa7-4781-9fad-7d2b7b5362a7.png" width="400px" /></p>
</blockquote>

<blockquote>
  <p>HTMLBuidler가 작성한 Greeting.html의 브라우저 결과
<img src="https://user-images.githubusercontent.com/66371206/190230484-11188473-993c-415e-a887-f311cf88f5b8.png" width="400px" /></p>
</blockquote>

<h3 id="누가-무엇을">누가 무엇을?</h3>

<ul>
  <li>Main Class는 Builder Class의 메소드를 모른다 (호출하지 않음)</li>
  <li>Main Class는 Director Class의 construct만 호출한다</li>
  <li>Director Class는 Builder Class를 알고있다</li>
  <li>Director Class는 실제로 이용하고 있는 클래스가 무엇인지 알 수 없다
    <ul>
      <li>HTMLBuilder인지 TextBuilder인지 알 수 없음</li>
      <li>Director Class는 Builder Class의 메소드만 사용</li>
      <li>Builder Class의 하위 클래스는 메소드를 구현</li>
    </ul>
  </li>
  <li>Director Class가 Builder Class의 하위 클래스를 모르기 때문에, 교체할 수 있다
    <ul>
      <li>모르기 때문에 교환이 가능하며, 교체가 가능하기 때문에 부품의 가치가 높다</li>
    </ul>
  </li>
</ul>

<h2 id="더-알아보기">더 알아보기</h2>

<blockquote>
  <p>엥 이거 완전 팩토리 패턴이랑 비슷한거 아니야?</p>
</blockquote>

<h3 id="여행-예제로-알아보기">여행 예제로 알아보기</h3>

<ul>
  <li>
    <p>클라이언트 프로그램으로부터 팩토리 클래스로 많은 파라미터를 넘겨줄 때 타입, 순서 등에 대한 관리가 어려워져 에러가 발생할 확률이 높아진다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">TourPlan</span><span class="o">(</span><span class="s">"여행 계획"</span><span class="o">,</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2021</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span> <span class="mi">24</span><span class="o">),</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="s">"호텔"</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="k">new</span> <span class="nc">DetailPlan</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"체크인"</span><span class="o">)));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>경우에 따라 필요 없는 파라미터들에 대해서 팩토리 클래스에 일일이 null 값을 넘겨줘야 한다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">TourPlan</span><span class="o">(</span><span class="s">"여행 계획"</span><span class="o">,</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2021</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span> <span class="mi">24</span><span class="o">),</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="k">new</span> <span class="nc">DetailPlan</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"놀고 돌아오기"</span><span class="o">)));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>생성해야 하는 sub class가 무거워지고 복잡해짐에 따라 팩토리 클래스 또한 복잡해진다.</p>
  </li>
</ul>

<h4 id="builder-class-1">Builder Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TourPlanBuilder</span> <span class="o">{</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">nightsAndDays</span><span class="o">(</span><span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">days</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">title</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">startDate</span><span class="o">(</span><span class="nc">LocalDate</span> <span class="n">localDate</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">whereToStay</span><span class="o">(</span><span class="nc">String</span> <span class="n">whereToStay</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">addPlan</span><span class="o">(</span><span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="nc">String</span> <span class="n">plan</span><span class="o">);</span>
    <span class="nc">TourPlan</span> <span class="nf">getPlan</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="concrete-builder">Concrete Builder</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultTourBuilder</span> <span class="kd">implements</span> <span class="nc">TourPlanBuilder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">days</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDate</span> <span class="n">startDate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">whereToStay</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">DetailPlan</span><span class="o">&gt;</span> <span class="n">plans</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">nightsAndDays</span><span class="o">(</span><span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">days</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nights</span> <span class="o">=</span> <span class="n">nights</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">days</span> <span class="o">=</span> <span class="n">days</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">title</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">startDate</span><span class="o">(</span><span class="nc">LocalDate</span> <span class="n">startDate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startDate</span> <span class="o">=</span> <span class="n">startDate</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">whereToStay</span><span class="o">(</span><span class="nc">String</span> <span class="n">whereToStay</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">whereToStay</span> <span class="o">=</span> <span class="n">whereToStay</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">addPlan</span><span class="o">(</span><span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="nc">String</span> <span class="n">plan</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">plans</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">plans</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="o">}</span>

        <span class="k">this</span><span class="o">.</span><span class="na">plans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">DetailPlan</span><span class="o">(</span><span class="n">day</span><span class="o">,</span> <span class="n">plan</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlan</span> <span class="nf">getPlan</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">TourPlan</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">startDate</span><span class="o">,</span> <span class="n">days</span><span class="o">,</span> <span class="n">nights</span><span class="o">,</span> <span class="n">whereToStay</span><span class="o">,</span> <span class="n">plans</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="director-class-1">Director Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TourDirector</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">TourPlanBuilder</span> <span class="n">tourPlanBuilder</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TourDirector</span><span class="o">(</span><span class="nc">TourPlanBuilder</span> <span class="n">tourPlanBuilder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tourPlanBuilder</span> <span class="o">=</span> <span class="n">tourPlanBuilder</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TourPlan</span> <span class="nf">cancunTrip</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tourPlanBuilder</span><span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"칸쿤 여행"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">nightsAndDays</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
                <span class="o">.</span><span class="na">startDate</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2020</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">9</span><span class="o">))</span>
                <span class="o">.</span><span class="na">whereToStay</span><span class="o">(</span><span class="s">"리조트"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">addPlan</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"체크인하고 짐 풀기"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">addPlan</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"저녁 식사"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getPlan</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TourPlan</span> <span class="nf">longBeachTrip</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tourPlanBuilder</span><span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"롱비치"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">startDate</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2021</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">15</span><span class="o">))</span>
                <span class="o">.</span><span class="na">getPlan</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="main-class-1">Main Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">DefaultTourBuilder</span> <span class="n">defaultbuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTourBuilder</span><span class="o">();</span>
    <span class="nc">TourDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TourDirector</span><span class="o">(</span><span class="n">defaultbuilder</span><span class="o">);</span>
    <span class="nc">TourPlan</span> <span class="n">tourPlan</span> <span class="o">=</span> <span class="n">director</span><span class="o">.</span><span class="na">cancunTrip</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>setter가 없으므로 객체 일관성을 유지하여 불변 객체로 생성할 수 있다.</p>
</blockquote>

<h3 id="when-not-to-use">When not to use</h3>

<blockquote>
  <p>객체를 생성하는 대부분의 경우에는 빌더 패턴을 적용하는 것이 좋다.</p>
</blockquote>

<p>예외적으로 2가지 상황에서는 빌더를 구현해야될지 고려하면 좋다.</p>

<ol>
  <li>
    <p>객체의 생성을 라이브러리로 위임하는 경우</p>

    <ul>
      <li>엔티티(Entity) 객체나 도메인(Domain) 객체로부터 DTO를 생성하는 경우라면 직접 빌더를 만들고 하는 작업이 번거로우므로 MapStruct나 Model Mapper와 같은 라이브러리를 통해 생성을 위임할 수 있다.</li>
    </ul>
  </li>
  <li>
    <p>변수의 개수가 2개 이하이며, 변경 가능성이 없는 경우</p>
    <ul>
      <li>또한 변수가 늘어날 가능성이 거의 없으며, 변수의 개수가 2개 이하인 경우에는 정적 팩토리 메소드를 사용하는 것이 더 좋을 수도 있다.</li>
      <li>빌더의 남용은 오히려 코드를 비대하게 만들 수 있으므로  변수의 개수와 변경 가능성 등을 중점적으로 보고 빌더 패턴을 적용할지 판단하면 된다.</li>
    </ul>
  </li>
</ol>

<h3 id="참고">참고</h3>

<p><a href="https://readystory.tistory.com/121">참고링크1</a>
<a href="https://dev-youngjun.tistory.com/197">참고링크2</a>
<a href="https://mangkyu.tistory.com/163">참고링크3</a></p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><category term="TIL" /><summary type="html"><![CDATA[Java언어로 배우는 디자인 패턴 입문]]></summary></entry><entry><title type="html">리액트 테스팅하기</title><link href="http://localhost:4000/react/2022/09/09/react-test.html" rel="alternate" type="text/html" title="리액트 테스팅하기" /><published>2022-09-09T00:00:00+09:00</published><updated>2022-09-09T00:00:00+09:00</updated><id>http://localhost:4000/react/2022/09/09/react-test</id><content type="html" xml:base="http://localhost:4000/react/2022/09/09/react-test.html"><![CDATA[<h2 id="jest와-react-testing-library를-사용하여-테스트를-해보자">Jest와 React-Testing-Library를 사용하여 테스트를 해보자</h2>

<p>이번에는 모킹 없이 간단하게 DOM관련 테스트만 진행할 예정이다. 모킹 관련은 다음 포스트에서 다룰 예정.</p>

<p>여러 테스트 예시들을 보면, 한 <code class="language-plaintext highlighter-rouge">jest.it</code> 함수 에서 render를 여러번 하는것을 손쉽게 볼 수 있다. 그렇게 나도 유사하게 해보며 익혀보았다.</p>

<h2 id="간단한-사용법-익히기">간단한 사용법 익히기</h2>

<h3 id="describe">describe</h3>

<p>describe에서 내가 어떠한 component를 할지 먼저 알려준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;MyPageForm /&gt;</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div></div>

<h3 id="it">it</h3>

<p>it에서 어떠한 동작들을 테스트할 지 선언하여 알려줄 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">matches snapshot</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div></div>

<h3 id="render">render</h3>

<p>그리고 어떤 컴포넌트를 render할지 it안에 선언을 해준다. 해당 render는 react testing library의 기능이다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
  <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <p>ESLint에서 useNavigate를 사용하는 component인 경우 BrowseNavigate 컴포넌트 안에 선언해야 하기에 BrowserRouter as Router로 감싸주었다</p>
</blockquote>

<h3 id="expect">expect</h3>

<p>실제로 방금 선언한 render인 <code class="language-plaintext highlighter-rouge">utils</code>에 어떠한 동작들이 수행되어야 하는지 정의 할 수 있다.</p>

<p>이번 <code class="language-plaintext highlighter-rouge">it</code>는 단순히 이러한 <code class="language-plaintext highlighter-rouge">utils.container</code> 가 snapshot에 매칭 되는지 확인하는 요소이기에 간단하게 <code class="language-plaintext highlighter-rouge">toMatchSnapshot</code>함수를 사용하여 확인할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">container</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
</code></pre></div></div>

<p>최종적으로 구현된 간단한 형태는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;MyPageForm /&gt;</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">matches snapshot</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">container</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>그리고 다음 it에서 원하는 텍스트가 존재한느지 있는지 확인하려면 다음과 같이 추가할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;MyPageForm /&gt;</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">matches snapshot</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">container</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
  <span class="p">});</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">has a texts</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
    <span class="c1">// MyPage에 있는지 확인</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">아바타 재생성</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">프로필 이미지</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">프로필 수정</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">수정 완료</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이런 테스트 코드는 동작하는데에는 문제가 없어 보이지만, 실제로 테스트 코드가 길어지거나, 다양한 동작을 할 때에 문제가 생길 수 있다. 즉 리액트에서 컴포넌트 분할을 하듯이, 테스트 코드 또한 컴포넌트로 쪼개고 재사용할 수 있어야 된다.</p>

<blockquote>
  <p>여기서도 utils를 재사용하는것을 보아 그렇게 좋지않음을 알 수 있다.</p>
</blockquote>

<h2 id="컴포넌트-단위로-쪼개기">컴포넌트 단위로 쪼개기</h2>

<p>조금 더 복잡한 SignUp 페이지를 가지고 테스트를 해보겠다.</p>

<h3 id="기능-빼내기">기능 빼내기</h3>

<p>우선 재사용할 수 있는 기능들을 <code class="language-plaintext highlighter-rouge">describe</code>가 아닌 <code class="language-plaintext highlighter-rouge">function</code>에 빼두자.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">renderSignUp</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// mocking submit button -&gt; not used</span>
  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">();</span>

  <span class="c1">// render SignUpForm</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SignUpForm</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>  <span class="p">);</span>

  <span class="c1">// get blocks</span>
  <span class="kd">const</span> <span class="nx">Heading</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">회원가입</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">selector</span><span class="p">:</span> <span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">Nickname</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span><span class="dl">"</span><span class="s2">닉네임을 입력해주세요.</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">Email</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span><span class="dl">"</span><span class="s2">이메일을 입력해주세요.</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">FirstPassword</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span>
      <span class="dl">"</span><span class="s2">8~16자 영문 대 소문자, 숫자, 특수문자를 사용하세요.</span><span class="dl">"</span>
    <span class="p">);</span>
  <span class="kd">const</span> <span class="nx">SecondPassword</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span><span class="dl">"</span><span class="s2">비밀번호를 다시 입력해주세요.</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// make events for blocks</span>
  <span class="kd">const</span> <span class="nx">typeNickname</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">Nickname</span><span class="p">(),</span> <span class="nx">name</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">typeEmail</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">Email</span><span class="p">(),</span> <span class="nx">name</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">typeFirstPassword</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pass</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">FirstPassword</span><span class="p">(),</span> <span class="nx">pass</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">typeSecondPassword</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pass</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">SecondPassword</span><span class="p">(),</span> <span class="nx">pass</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">SignUpButton</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">회원가입</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">selector</span><span class="p">:</span> <span class="dl">"</span><span class="s2">button</span><span class="dl">"</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">clickSubmit</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">SignUpButton</span><span class="p">());</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">,</span>
    <span class="nx">Heading</span><span class="p">,</span>
    <span class="nx">Nickname</span><span class="p">,</span>
    <span class="nx">Email</span><span class="p">,</span>
    <span class="nx">FirstPassword</span><span class="p">,</span>
    <span class="nx">SecondPassword</span><span class="p">,</span>
    <span class="nx">typeNickname</span><span class="p">,</span>
    <span class="nx">typeEmail</span><span class="p">,</span>
    <span class="nx">typeFirstPassword</span><span class="p">,</span>
    <span class="nx">typeSecondPassword</span><span class="p">,</span>
    <span class="nx">SignUpButton</span><span class="p">,</span>
    <span class="nx">clickSubmit</span><span class="p">,</span>
    <span class="nx">onSubmit</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 테스트할 함수들을 분리하여, 추후에 손쉽게 필요한 함수들을 선언하여 관리도 용이하며, 재사용도 쉽게 설정할 수 있다.</p>

<p>userEvent의 옵션으로는 다음과 같이 정리되어 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">declare</span> <span class="kd">const</span> <span class="nx">userEvent</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">click</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">click</span><span class="p">;</span>
  <span class="nl">dblClick</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">dblClick</span><span class="p">;</span>
  <span class="nl">type</span><span class="p">:</span> <span class="k">typeof</span> <span class="kd">type</span><span class="p">;</span>
  <span class="nl">clear</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">clear</span><span class="p">;</span>
  <span class="nl">tab</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">tab</span><span class="p">;</span>
  <span class="nl">hover</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">hover</span><span class="p">;</span>
  <span class="nl">unhover</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">unhover</span><span class="p">;</span>
  <span class="nl">upload</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">upload</span><span class="p">;</span>
  <span class="nl">selectOptions</span><span class="p">:</span> <span class="p">(</span>
    <span class="nx">args_0</span><span class="p">:</span> <span class="nx">Element</span><span class="p">,</span>
    <span class="nx">args_1</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">string</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HTMLElement</span> <span class="o">|</span> <span class="nx">HTMLElement</span><span class="p">[],</span>
    <span class="nx">args_2</span><span class="p">?:</span> <span class="nx">MouseEventInit</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">,</span>
    <span class="nx">args_3</span><span class="p">?:</span> <span class="k">import</span><span class="p">(</span><span class="dl">"</span><span class="s2">./utils</span><span class="dl">"</span><span class="p">).</span><span class="nx">PointerOptions</span> <span class="o">|</span> <span class="kc">undefined</span>
  <span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
  <span class="nl">deselectOptions</span><span class="p">:</span> <span class="p">(</span>
    <span class="nx">args_0</span><span class="p">:</span> <span class="nx">Element</span><span class="p">,</span>
    <span class="nx">args_1</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">string</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HTMLElement</span> <span class="o">|</span> <span class="nx">HTMLElement</span><span class="p">[],</span>
    <span class="nx">args_2</span><span class="p">?:</span> <span class="nx">MouseEventInit</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">,</span>
    <span class="nx">args_3</span><span class="p">?:</span> <span class="k">import</span><span class="p">(</span><span class="dl">"</span><span class="s2">./utils</span><span class="dl">"</span><span class="p">).</span><span class="nx">PointerOptions</span> <span class="o">|</span> <span class="kc">undefined</span>
  <span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
  <span class="nl">paste</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">paste</span><span class="p">;</span>
  <span class="nl">keyboard</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">keyboard</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>render같은 경우 너무나 방대하여, 그때 그때 필요한 쿼리를 선택하여 찾을 수 있다. 대충 보아하니, query, parameter, role, text 등 정말 원하는 정보를 다 찾을 수 있을 것 같다.</p>

<h3 id="렌더링-확인">렌더링 확인</h3>

<p>아까 위에서 했던것 처럼 원하는 버튼 혹은 컴포넌트가 존재하는지 조금 더 직관적으로 위에서 선언한 함수들을 가지고 구현할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">sign up form rendering</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="nx">Heading</span><span class="p">,</span>
    <span class="nx">Nickname</span><span class="p">,</span>
    <span class="nx">Email</span><span class="p">,</span>
    <span class="nx">FirstPassword</span><span class="p">,</span>
    <span class="nx">SecondPassword</span><span class="p">,</span>
    <span class="nx">SignUpButton</span><span class="p">,</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">renderSignUp</span><span class="p">();</span>

  <span class="c1">// check if blocks are rendered</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Email</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Nickname</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Heading</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">FirstPassword</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">SecondPassword</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">SignUpButton</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이렇게 함으로써, 짧고 보다 확실하게 어떠한 요소들이 있어야 되는지 확인할 수 있는 테스트 코드가 완성되었다.</p>

<h3 id="동작확인">동작확인</h3>

<p>아무래도 이번에 테스트 하는 컴포넌트가 SignUp이다 보니, 동적인 동작들이 이루어져야한다. 예를들어, 내가 Nickname을 친다던가, password를 타이핑 하는 요소들이 들어갈 수 있다. 앞서 이용한 <code class="language-plaintext highlighter-rouge">type*(string)</code> 함수를 이용하여, 간단하게 구현이 가능하다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">form 값으로 onSubmit을 호출.</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="nx">Email</span><span class="p">,</span>
    <span class="nx">Nickname</span><span class="p">,</span>
    <span class="nx">FirstPassword</span><span class="p">,</span>
    <span class="nx">SecondPassword</span><span class="p">,</span>
    <span class="nx">typeNickname</span><span class="p">,</span>
    <span class="nx">typeEmail</span><span class="p">,</span>
    <span class="nx">typeFirstPassword</span><span class="p">,</span>
    <span class="nx">typeSecondPassword</span><span class="p">,</span>
    <span class="nx">clickSubmit</span><span class="p">,</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">renderSignUp</span><span class="p">();</span>

  <span class="c1">// make events for blocks</span>
  <span class="nx">typeNickname</span><span class="p">(</span><span class="dl">"</span><span class="s2">영기</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">typeEmail</span><span class="p">(</span><span class="dl">"</span><span class="s2">yeonggi@mail.com</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">typeFirstPassword</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">typeSecondPassword</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">clickSubmit</span><span class="p">();</span>

  <span class="c1">// check if events are working</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Email</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">yeonggi@mail.com</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Nickname</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">영기</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">FirstPassword</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">SecondPassword</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>여기에서 <code class="language-plaintext highlighter-rouge">clickSubmit()</code>함수를 앞서 <code class="language-plaintext highlighter-rouge">jest.fn()</code>라는 콜백 함수로 불러왔었는데, 이 부분은 추후에 모킹을 하면서 제대로 이용할 예정이다. 모킹할 곳을 만들어 두고, submit을 하였을때 어떠한 json 타입이 오는지 <code class="language-plaintext highlighter-rouge">expect</code>해서 찾아 낼 예정이다.</p>

<p>무사히 테스트 코드를 작성 후 돌려보면, 이렇게 테스트 결과가 통과했다고 나오게 된다.
<img width="622" alt="스크린샷 2022-09-13 오후 2 49 55" src="https://user-images.githubusercontent.com/66371206/189819890-a8ea5e99-693a-4801-ac22-c01e233637f1.png" /></p>

<p>참고 : <a href="https://javascript.plainenglish.io/declarative-and-scalable-testing-with-react-testing-library-177f35f41396">확장가능한 테스트</a></p>]]></content><author><name>071yoon</name></author><category term="react" /><category term="javascript" /><category term="react" /><summary type="html"><![CDATA[Jest와 React-Testing-Library를 사용하여 테스트를 해보자]]></summary></entry><entry><title type="html">오디오 비주얼라이저 만들기</title><link href="http://localhost:4000/modoco/2022/09/07/audio-visualizer.html" rel="alternate" type="text/html" title="오디오 비주얼라이저 만들기" /><published>2022-09-07T00:00:00+09:00</published><updated>2022-09-07T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/07/audio-visualizer</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/07/audio-visualizer.html"><![CDATA[<h2 id="개요">개요</h2>

<p>현재 진행중인 웹 플랫폼에서는 실시간 통신, 즉 음성 및 비디오가 필수적으로 들어가며, 오디오가 잘 나오는지 확인할 수 있는 오디오 비주얼라이저 또한 필수적으로 들어가게 되었다.</p>

<p>처음에 이걸 구현하기에는 다소 어려움이 있었는데, 우선 reference도 많이 없어 힘들었고, 막상 찾았더니 outdated 버전도 많이 있었다.</p>

<blockquote>
  <p>결국 mdn 문서를 뜯어가며 익혔다..</p>
</blockquote>

<h2 id="나만의-오디오-비주얼라이저-만들기">나만의 오디오 비주얼라이저 만들기</h2>

<p>우선 개발하기 앞서, 디자인 시안이 나온 모습은 다음과 같았다.</p>

<p><img width="593" alt="스크린샷 2022-09-13 오후 3 14 00" src="https://user-images.githubusercontent.com/66371206/189823880-d641cc67-7171-4775-a4bc-d7f880a562d3.png" /></p>

<p>마이크를 확인하며, 볼륨이 높을수록 초록색이 올라가는 모습… 직관적이고 보기 좋다!</p>

<h3 id="audiocontext">audioContext</h3>

<p>우선 오디오 비주얼라이저를 구현하기 위해서는 audioContext라는 객체에 대한 이해가 필요하다. 쉽게 말하자면, 오디오 볼률 및 frequency같은 것을 조절해주는 분석기라 볼 수 있다. 나의 audioContext generator는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">audioContext</span> <span class="o">=</span> <span class="p">(</span><span class="nx">stream</span><span class="p">:</span> <span class="nx">MediaStream</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">audioContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">analyser</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">.</span><span class="nx">createAnalyser</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">microphone</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">.</span><span class="nx">createMediaStreamSource</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
  <span class="nx">microphone</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">analyser</span><span class="p">);</span>
  <span class="nx">analyser</span><span class="p">.</span><span class="nx">fftSize</span> <span class="o">=</span> <span class="mi">256</span><span class="p">;</span> <span class="c1">// 256 ~ 2048</span>
  <span class="kd">const</span> <span class="nx">bufferLength</span> <span class="o">=</span> <span class="nx">analyser</span><span class="p">.</span><span class="nx">frequencyBinCount</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">dataArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Uint8Array</span><span class="p">(</span><span class="nx">bufferLength</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">analyser</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">,</span> <span class="nx">dataArray</span> <span class="p">};</span>
<span class="p">};</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">audioContext</span><span class="p">;</span>
</code></pre></div></div>

<p>여기서 인자로 받는 stream은 내가 분석할 오디오 stream이다.
순서를 보면</p>

<ol>
  <li>새로운 <code class="language-plaintext highlighter-rouge">audioContext</code>를 만든다</li>
  <li>해당 <code class="language-plaintext highlighter-rouge">audioContext</code>의 <code class="language-plaintext highlighter-rouge">analyser</code>(분석기)를 만든다</li>
  <li>나의 stream을 source로 하는 <code class="language-plaintext highlighter-rouge">audioContext</code>, 이하 <code class="language-plaintext highlighter-rouge">microphone</code>을 생성한다</li>
  <li>해당하는 <code class="language-plaintext highlighter-rouge">microphone</code>과 미리 만둘어둔 <code class="language-plaintext highlighter-rouge">analyser</code>를 연동시킨다.</li>
  <li><code class="language-plaintext highlighter-rouge">analyser</code>의 <code class="language-plaintext highlighter-rouge">fftSize</code>를 제어한다.</li>
  <li>나의 <code class="language-plaintext highlighter-rouge">analyser</code>에서 <code class="language-plaintext highlighter-rouge">bufferLength를</code> 구한다.</li>
  <li><code class="language-plaintext highlighter-rouge">bufferLength에</code> 해당하는 빈 양수배열의 <code class="language-plaintext highlighter-rouge">dataArray를</code> 생성한다</li>
  <li>필요한 요소들을 리턴해준다</li>
</ol>

<p>여기서 생소한 요소들이 나올 수 있는데, fftSize는 mdn 문서상의 설명으로 <code class="language-plaintext highlighter-rouge">fftSize 속성은 unsigned long 값이고 주파수 영역 데이터를 얻기 위해 고속 푸리에 변환(FFT)을 수행할 때 사용될 샘플에서의 window 사이즈</code> 라고 한다. 즉 내가 자세한 정보를 가지고 싶다면 높일 수 있고, 자세하지 않은 정보를 원한다면 작게 설정이 가능하다는 뜻이다.</p>

<p>예제를 들어 더 자세하게 설명해보면, 주로 오디오 비주얼라이저의 예시는 두개로 볼 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">block</code> 형태의 audio visualizer
<img width="307" height="200" alt="스크린샷 2022-09-13 오후 3 24 24" src="https://user-images.githubusercontent.com/66371206/189825782-d7832949-5654-4f87-9201-a5df168ec634.png" /></p>

<p><code class="language-plaintext highlighter-rouge">주파수</code> 형태의 audio visualizer
<img width="307" height="200" alt="스크린샷 2022-09-13 오후 3 24 52" src="https://user-images.githubusercontent.com/66371206/189825786-cfbde43f-7883-4cb6-9ba4-7fb5bc9f6cbd.png" /></p>

<p>여기서 과연 어떤것이 더 정확한 수치 및 촘촘한 결과가 필요할까? 당연히 아래에 있는 주파수 대역일것이다. 블럭형태는 크게 잘라봐야 30 구간으로 잘려있지만, 주파수는 적어도 300 단위로 자른 후 선을 이어야 되기 때문이다. 이런 경우에서, block형태인 경우 fftSize를 조금 줄여도 되고, 주파수 형태인 경우 fftSize 즉 높은 sampleRate를 가지는것이 용이하다.</p>

<h3 id="get-frequency">get Frequency</h3>

<p>이제 앞서 만든 audioContext를 가지고, 실제 volume 즉 frequency를 구해보도록 하자.</p>

<p>우선 <code class="language-plaintext highlighter-rouge">analyser</code>, <code class="language-plaintext highlighter-rouge">bufferLength</code>, <code class="language-plaintext highlighter-rouge">dataArray</code> 를 잘 가져오고, 가져온 <code class="language-plaintext highlighter-rouge">analyser</code>롤 통하여 <code class="language-plaintext highlighter-rouge">getByteFrequencyData()</code>함수를 실행하고, 인자로 <code class="language-plaintext highlighter-rouge">dataArray</code>를 넣는다.
그렇게 되면, 해당하는 <code class="language-plaintext highlighter-rouge">analyser</code>의 오디오 stream에서 호출된 시점의 frequency data를 앞서 만든 dataArray에 삽입해준다.
그렇게 완성된 data를 가지고, bufferLength만큼 loop을 돌며 평균을 내어주면, 호출한 시점의 audio volume값이라 볼 수 있다.</p>

<p>해당 코드는 아래와 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">analyser</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">,</span> <span class="nx">dataArray</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">(</span><span class="nx">userMediaStream</span><span class="p">);</span>
<span class="nx">analyser</span><span class="p">.</span><span class="nx">getByteFrequencyData</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vol</span> <span class="o">=</span> <span class="nx">audioFrequency</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// audioFrequency.ts</span>
<span class="kd">const</span> <span class="nx">audioFrequency</span> <span class="o">=</span> <span class="p">(</span><span class="nx">dataArray</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">bufferLength</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">total</span> <span class="o">+=</span> <span class="nx">dataArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">total</span> <span class="o">/</span> <span class="nx">bufferLength</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">audioFrequency</span><span class="p">;</span>
</code></pre></div></div>

<p>그럼 이제 getByteFrequencyData를 호출할 때 마다, 그에 해당하는 볼륨값을 찾을 수 있다.</p>

<p>나는 이 값을 setting이라는 모달창이 켜졌을 때만 동작하며, 30ms에서 한번씩 동작하면 되므로, 호출하는 완성된 코드는 다음과 같다. 그리고 이러한 volume을 state로 변경하여, 추후에 값이 바뀔 때 마다 렌더링 할 수 있게 설정하였다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">myInterval</span><span class="p">;</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">analyser</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">,</span> <span class="nx">dataArray</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">(</span><span class="nx">userMediaStream</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">setting</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">myInterval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">analyser</span><span class="p">.</span><span class="nx">getByteFrequencyData</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">vol</span> <span class="o">=</span> <span class="nx">audioFrequency</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">);</span>
      <span class="nx">setVol</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">vol</span> <span class="o">/</span> <span class="mi">256</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">));</span>
    <span class="p">},</span> <span class="mi">30</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">myInterval</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">setting</span><span class="p">]);</span>
</code></pre></div></div>

<p>앞서 volume을 console에 찍어보면 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/189828981-909b12d2-1059-4952-a644-5a3d0c8e6f37.gif" alt="ezgif-3-ebf554f342" /></p>

<h3 id="volume-bar-구현">Volume bar 구현</h3>

<p>이제 거의 끝이 보인다. 해당하는 값을 int로 return 할 수 있게 완성하였으니, 해당하는 값을 volume에 맞게 초록색이 나오도록 설정만 하면 된다.</p>

<p>이 부분은 굳이 js를 사용할 필요도 없이, css로 넘겨주는 prop 즉 volume과 내가 몇번째 volume 아이콘인지 알아 낸후 몇 이상일 때, 초록색으로 표시를 해야 되는지 비교하며 관리할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">VolumeBar</span><span class="p">({</span> <span class="nx">volume</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">volume</span><span class="p">:</span> <span class="kr">number</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Bars</span><span class="o">&gt;</span>
        <span class="p">{[...</span><span class="nb">Array</span><span class="p">(</span><span class="nx">n</span><span class="p">)].</span><span class="nx">map</span><span class="p">((</span><span class="nx">no</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">Bar</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nb">Symbol</span><span class="p">(</span><span class="nx">index</span><span class="p">).</span><span class="nx">toString</span><span class="p">()}</span> <span class="nx">volume</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span> <span class="nx">no</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/Bars</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Bars</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 0.4rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  gap: 0.8rem;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Bar</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">volume</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">no</span><span class="p">:</span> <span class="kr">number</span> <span class="p">}</span><span class="o">&gt;</span><span class="s2">`
  width: 100%;
  height: 1.6rem;
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="o">/</span> <span class="mi">8</span> <span class="o">&gt;</span> <span class="mi">7</span> <span class="o">-</span> <span class="nx">props</span><span class="p">.</span><span class="nx">no</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">#4ADE80</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">rgba(255, 255, 255, 0.3)</span><span class="dl">"</span><span class="p">}</span><span class="s2">;
  border-radius: 5rem;
`</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>map 의 index로 내가 아래에서 몇번째인 볼륨 바 인지 알아 낸 후, volume / 8 보다 클 경우 초록색, 아니면 회색으로 처리</p>
</blockquote>

<h3 id="시연">시연</h3>

<p>그렇게 해서 완성된 모습은 다음과 같다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/189821154-647e4008-d940-407d-91b3-b03b7ce4d364.gif" alt="ezgif-3-7171c44a73" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="javascript" /><category term="web" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">브라우저에서 입출력 제어하기</title><link href="http://localhost:4000/modoco/2022/09/06/audio-inputoutput.html" rel="alternate" type="text/html" title="브라우저에서 입출력 제어하기" /><published>2022-09-06T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/06/audio-inputoutput</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/06/audio-inputoutput.html"><![CDATA[<h2 id="브라우저에서-입출력-제어">브라우저에서 입출력 제어</h2>

<p>현재 만들고 있는 프로제긑는 디스코드와 게더타운과 유사한, 실시간 통신이 들어간 웹 플랫폼이다. 이런 유사한 프로젝트에 필수적으로 들어가야 되는 요소는 오디오의 제어이다.</p>

<blockquote>
  <p>말을 하다가 마이크를 바꿔야 되는 상황이 된다면?</p>
</blockquote>

<blockquote>
  <p>음질이 좋지 않다고 해서, 이어폰을 꼈을 때, 소리를 스피커에서 이어폰을 바꿔야 한다면?</p>
</blockquote>

<blockquote>
  <p>이어폰 배터리가 나가서 중간에 스피커로 교체 해야된다면?</p>
</blockquote>

<p>등 등 정말 많은 상황들이 연출 될 수 있다. 물론 가장 간편한 방법은, 알아서 시스템의 Default장비를 교체 후 브라우저를 refresh 해버리면 된다.
하지만 UX 관점에서, 오디오의 입출력을 브라우저에서 하는건 중요하다. 사실, 웹 플랫폼이 아닌 electron처럼 앱으로 만들었다면 쉬웠겠지만…</p>

<p>그렇게 브라우저 오디오 입출력 제어에 대한 글을 찾아보던 중 정말 쉽게 정리된 글도 없고, 오래된 내용들 특히 이미 지원이 끝난 함수들이 많아 막 사용하기 정말 쉽지 않았다. 그래서 내가 한번 정리를 해보았다.</p>

<h4 id="제공할-기능-목록">제공할 기능 목록</h4>

<ol>
  <li>카메라 입력 디바이스 제어가능</li>
  <li>음성 입력 디바이스 제어가능</li>
  <li>음성 출력 디바이스 제어가능</li>
</ol>

<p>드랍다운 까지 완성된 형태는 <a href="https://velog.io/@071yoon/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%93%9C%EB%9E%8D%EB%8B%A4%EC%9A%B4-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90">참고</a>링크에 있다.</p>

<h3 id="입출력-디바이스-찾기">입출력 디바이스 찾기</h3>

<p>우선, 선택을 하기 위해서는 나의 입출력 디바이스를 찾는것 부터 해야된다.</p>

<p>모든 선택 및 제어는 드랍다운에서 렌더링에도 사용되므로 전부 상태로 관리해주었다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Selectors.tsx</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Selectors</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">audioInput</span><span class="p">,</span> <span class="nx">setAudioInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">audioOutput</span><span class="p">,</span> <span class="nx">setAudioOutput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">videoInput</span><span class="p">,</span> <span class="nx">setVideoInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">getDevice</span><span class="p">(</span><span class="nx">setAudioInput</span><span class="p">,</span> <span class="nx">setAudioOutput</span><span class="p">,</span> <span class="nx">setVideoInput</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SelectorContainer</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">camera</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">videoInput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">mic</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">audioInput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">speaker</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">audioOutput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/SelectorContainer</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 getDevice함수에서 현재 사용하고 있는 모든 장비들을 불러올 수 있는 <code class="language-plaintext highlighter-rouge">navigator.mediaDevices.enumerateDevices()</code>함수를 사용하였다.</p>

<p><code class="language-plaintext highlighter-rouge">console</code>을 찍어보면 나온 device의 리스트는 다음과 같다.
<img width="985" alt="image" src="https://user-images.githubusercontent.com/66371206/188820065-c76d2d54-9e2a-4031-867f-1c3853347934.png" /></p>

<p>여기서 <code class="language-plaintext highlighter-rouge">kind</code>로 분류하여 비디오 입력, 오디오 입력, 오디오 출력을 구별하여 따로 저장하였다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// getDevice.ts</span>
<span class="kd">const</span> <span class="nx">getDevice</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span>
  <span class="nx">setAudioInput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span><span class="p">,</span>
  <span class="nx">setAudioOutput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span><span class="p">,</span>
  <span class="nx">setVideoInput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">devices</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">enumerateDevices</span><span class="p">();</span>
    <span class="nx">setAudioInput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audioinput</span><span class="dl">"</span><span class="p">));</span>
    <span class="nx">setAudioOutput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audiooutput</span><span class="dl">"</span><span class="p">));</span>
    <span class="nx">setVideoInput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">videoinput</span><span class="dl">"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">devices</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="dl">"</span><span class="s2">error getting devices</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>이렇게 주르륵 나온 devices들을 가지고 저번 포스트에서 다뤘던 드랍다운을 통하여 유저가 선택한 디바이스 정보를 나의 상태에 저장될 수 있게 설정해주었다.</p>

<blockquote>
  <p><a href="https://velog.io/@071yoon/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%93%9C%EB%9E%8D%EB%8B%A4%EC%9A%B4-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90">저번 블로그 주소</a></p>
</blockquote>

<h3 id="출력-디바이스-제어">출력 디바이스 제어</h3>

<p>무사히 유저가 원하는 입출력 디바이스를 선택하였고, 그 정보가 <code class="language-plaintext highlighter-rouge">userAudioOutputDevice</code>라는 상태에 존재한다고 가정하고 진행하도록 하겠다.</p>

<p>사실 여기까지 왔다면 거의 다한것이나 마찬가지다. 적어도 출력은 정말 간단하다.</p>

<p>현재 우리의 플랫폼에서 지원하는 오디오 출력은 두가지 존재한다.</p>

<ol>
  <li>테마 bgm</li>
  <li>상대방의 마이크 음성</li>
</ol>

<p>우선 상대방의 마이크 음성을 제어하는 부분을 보면 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Screen.tsx</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">&amp;&amp;</span> <span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">newRef</span> <span class="o">=</span> <span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
  <span class="p">(</span><span class="nx">newRef</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">setSinkId</span><span class="p">(</span><span class="nx">userAudioOutputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">stream</span><span class="p">,</span> <span class="nx">videoRef</span><span class="p">,</span> <span class="nx">userAudioOutputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>테마로 나오는 음성을 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Theme.tsx</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">volume</span> <span class="o">=</span> <span class="nx">volume</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">newAudio</span> <span class="o">=</span> <span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
  <span class="p">(</span><span class="nx">newAudio</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">setSinkId</span><span class="p">(</span><span class="nx">userAudioOutputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">volume</span><span class="p">,</span> <span class="nx">userAudioOutputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>여기서 새로 추가된 부분은 setSinkId를 해주는 부분이다. 바로 deviceId를 넣어주면, 해당하는 device로 출력이 바뀌는 것이다. userAudioOutputDevice가 상태이므로, 해당 상태가 바뀔때 마다 sink를 맞춰서 video의 오디오를 변경 할 수 있게 useEffect로 감싸주고, dependency로 넣어주었다.</p>

<p>type을 any로 변경해준 이유는, 컴파일 할 때 setSinkId를 찾지못해 에러를 내기 때문이다. 추후에 Interface를 하나 만들어 setSinkId를 추가하여 방지할 예정이다.</p>

<p>여기서 문제는 호환성 문제이다.
<img width="823" alt="image" src="https://user-images.githubusercontent.com/66371206/188821917-ecf262ae-c9d0-449f-a9d6-e3675c879224.png" />
보시다시피, Chrome, IE, Opera만 공식적으로 지원하기에, 만약 Safari로 접속한다면 바로 백색화면이 뜨는것을 볼 수 있다. 이 경우에는 browser 감지를 우선하여, Safari에서는 해당 함수를 실행하지 않도록 방지해줘야된다.</p>

<h3 id="입력-디바이스-설정">입력 디바이스 설정</h3>

<p>입력디바이스는 생각보다 까다롭다.</p>

<p>우선, 전송하는 mediaTrack이 이미 getUserMedia에서 audio를 default로 가져왔을테니, 여기서 내가 마음대로 media 장비를 바꾼다고 해서 바로 바뀌지 않을 것이다. 그래서 생각해낸 방법은 다음과 같다.</p>

<ol>
  <li>새로운 오디오 트랙을 만들어낸다 (새로 바뀔 입력 device인 트랙)</li>
  <li>현재 송출하고 있는 오디오 트랙을 삭제한다</li>
  <li>내 stream에 새로운 트랙을 추가한다</li>
  <li>보내고 있는 stream에 audio를 찾아 새로운 track으로 교체한다</li>
</ol>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// useCreateMediaStream.tsx</span>
<span class="kd">const</span> <span class="nx">replaceAudioStream</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">audioStream</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
      <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">deviceId</span><span class="p">:</span> <span class="nx">userAudioInputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">});</span>
    <span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">removeTrack</span><span class="p">(</span><span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">addTrack</span><span class="p">(</span><span class="nx">audioStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">pcs</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">pc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">sender</span> <span class="o">=</span> <span class="nx">pcs</span><span class="p">[</span><span class="nx">pc</span><span class="p">].</span><span class="nx">getSenders</span><span class="p">().</span><span class="nx">find</span><span class="p">((</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">track</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audio</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">sender</span><span class="p">.</span><span class="nx">replaceTrack</span><span class="p">(</span><span class="nx">audioStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">failed to change audio stream</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MediaStream</span><span class="p">();</span>
    <span class="nx">setUserMediaStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>그리고 이런 과정을 useEffect로 감싸서, userAudioInput이 바뀔때 마다 선언해준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// settingModal</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">replaceAudioStream</span><span class="p">();</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">replaceAudioStream</span><span class="p">,</span> <span class="nx">userAudioInputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>무사히 마치고 나면 입력 버튼에서, 이어폰 -&gt; 맥북으로 바꾸어도 음성 입력트랙이 잘 바뀌는것을 확인 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188824872-87f9ddaf-9bcc-44fc-955d-f7abe2beb227.gif" alt="ezgif-2-3f5a74b33f" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="javascript" /><category term="web" /><summary type="html"><![CDATA[브라우저에서 입출력 제어]]></summary></entry><entry><title type="html">드랍다운 애니메이션 제작</title><link href="http://localhost:4000/modoco/2022/09/05/dropdown-animation.html" rel="alternate" type="text/html" title="드랍다운 애니메이션 제작" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-05T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/05/dropdown-animation</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/05/dropdown-animation.html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/66371206/188813661-d31a95d8-8a3d-4916-a82e-8a924d5010f2.gif" alt="ezgif-4-8e32a6168e" /></p>

<h2 id="why">Why?</h2>

<p>나만의 드랍다운을 만들어보자.</p>

<p>사실 커스텀 드랍다운은 옛날부터 만들고 싶었지만, 시간 투자 대비 사소한 디자인이여서 그냥 기본 custom selector를 주로 사용했었다.
그러다 이제는 더이상 미룰 수 없기에 커스텀 드랍다운 제작에 나섰다.
우선 이번 드랍다운의 기능은 다음과 같다.</p>

<ol>
  <li>드랍다운 메뉴를 클릭하면, 드랍다운 메뉴(현재 내가 선택 가능한 입출력 디바이스)가 나타난다.</li>
  <li>드랍다운 메뉴를 다시 클릭 혹은 select하면, 드랍다운 메뉴가 사라진다.</li>
  <li>select된 입출력 디바이스는 해당 브라우저 탭에서 오디오 입출력 디바이스가 된다.</li>
</ol>

<p>입출력 디바이스를 선택하는 부분은, 따로 라이브러리를 사용하지 않고, 브라우저의 MediaDevices API를 사용하여 구현하였다.
내용이 생각보다 길어 다음 포스트에 이어서 작성하겠다.</p>

<h3 id="드랍다운-프레임-만들기">드랍다운 프레임 만들기</h3>

<p>드랍다운을 만들기 전에, 먼저 디자인을 해보자.</p>

<p>우선 어떠한 버튼을 누르면 DropDown이 나오게 될지 만들어야 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dropDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">MouseEvent</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="nx">setDropDown</span><span class="p">(</span><span class="o">!</span><span class="nx">showDropDown</span><span class="p">);</span>
<span class="p">};</span>

<span class="o">&lt;</span><span class="nx">DropDownContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">dropDown</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">myDevice</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">myDevice</span><span class="p">?.</span><span class="nx">label</span> <span class="p">:</span> <span class="nx">defaultDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">BottomArrow</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/DropDownContainer&gt;</span><span class="err">;
</span></code></pre></div></div>

<p>여기서 DropDownContainer를 누르면, !setDropDown을 해주어, 껐다 킬 수 있는 toggle을 만들어 주었다. 그렇게 되면, 애니메이션이 없는 누르면 껐다 켜질 수 있는 토글 버튼이 만들어 지게 된다.</p>

<p>그 다음에, <code class="language-plaintext highlighter-rouge">DropDownItem</code>에 내가 원하는 디바이스의 아이템들을 이쁘게 담아둔다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">setDevice</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">device</span><span class="p">:</span> <span class="nx">MediaDeviceInfo</span><span class="p">,</span>
  <span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">MouseEvent</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="nx">setMyDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">);</span>
  <span class="nx">setDropDown</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="p">};</span>

<span class="o">&lt;</span><span class="nx">DropDownItem</span>
  <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceId</span><span class="p">}</span>
  <span class="nx">onClick</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
  <span class="p">}}</span>
<span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/DropDownItem&gt;</span><span class="err">;
</span>
<span class="kd">const</span> <span class="nx">DropDownItem</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  padding: 1rem;
  cursor: pointer;
  &amp;:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>DropDown을 클릭하게 되면, 현재 내가 선택한 디바이스state로 설정한 후 추후에 state변화를 감지하여, 입출력 디바이스로 변경할 것이다. 그리고, 자연스럽게 DropDown을 닫아준다.
디자인적으로 <code class="language-plaintext highlighter-rouge">Text</code>로 디바이스의 이름을 이쁘게 출력할 수 있게 설정해주었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188814527-971f756d-5b06-4b7f-b2ed-0004c1465103.gif" alt="ezgif-4-76b3c89864" /></p>

<p>이렇게 되면, 애니메이션 없는 드랍다운이 완성된다. 하지만 내가 원하는건 그저 토글이 되는 드랍다운이 아닌, 밑으로 죽 내려오는 드랍다운이다.</p>

<h3 id="드랍다운-애니메이션-만들기">드랍다운 애니메이션 만들기</h3>

<p>여기서 내적 고민을 잠깐 하였다… 간단하게 Bootstrap혹은 이미 있는걸 가져다 사용할 지 아니면 직접 CSS로 완성할지… 그러다 내가 원하는 디자인 및 감성으로 제작하기 위해 커스텀 DropDown을 만들게 되었다.</p>

<p>생각보다 자료도 많이 없고, 아이디어를 생각해내기 쉽지 않았다. 그러다 생각해낸 방법은, 드랍다운이 내려오는 창 바로 위에 선을 하나 두고 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>으로 감싼 뒤 toggle되면 드랍다운을 내리는 animation transition을 넣는 방식이였다.</p>

<p>animation은 간단하게 keyframes 로 구성하였다</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">keyframes</span> <span class="nx">dropdown</span> <span class="p">{</span>
    <span class="mi">0</span><span class="o">%</span> <span class="p">{</span>
      <span class="na">transform</span><span class="p">:</span> <span class="nx">translateY</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="o">%</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="mi">100</span><span class="o">%</span> <span class="p">{</span>
      <span class="na">transform</span><span class="p">:</span> <span class="nx">translateY</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="nx">dropdown</span> <span class="mf">0.4</span><span class="nx">s</span> <span class="nx">ease</span><span class="p">;</span>
</code></pre></div></div>

<p>영상으로 보는것이 이해가 쉬울 것 같아 가져왔다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188813331-8fd6e3ca-6739-429b-84d0-cb6250365424.gif" alt="ezgif-4-c2ecb01224" /></p>

<p>보이는것과 같이, 바를 기준으로 드랍다운이 내려오게 설정하였고, <code class="language-plaintext highlighter-rouge">overflow: hidden</code> 을 하지 않았을 때 상황이다.</p>

<p>이 상태에서, <code class="language-plaintext highlighter-rouge">overflow</code> 를 가려서 위에 부분을 안보이게만 하면 이쁜 드랍다운이 완성된다.</p>

<p>주요 코드는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">DropDownContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">dropDown</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">myDevice</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">myDevice</span><span class="p">?.</span><span class="nx">label</span> <span class="p">:</span> <span class="nx">defaultDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">BottomArrow</span> <span class="o">/&gt;</span>
  <span class="p">{</span><span class="nx">showDropDown</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">DropDownPosition</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">DropDown</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">DropDownItem</span>
            <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceId</span><span class="p">}</span>
            <span class="nx">onClick</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="nx">setDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
            <span class="p">}}</span>
          <span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/DropDownItem</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/DropDown</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/DropDownPosition</span><span class="err">&gt;
</span>  <span class="p">)}</span>
<span class="o">&lt;</span><span class="sr">/DropDownContainer&gt;</span><span class="err">;
</span>
<span class="kd">const</span> <span class="nx">DropDownPosition</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  position: absolute;
  top: 5rem;
  left: 0;
  width: 100%;
  overflow: hidden;
  z-index: 1;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DropDown</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  background-color: #31343e;
  @keyframes dropdown {
    0% {
      transform: translateY(-100%);
    }
    100% {
      transform: translateY(0);
    }
  }
  animation: dropdown 0.4s ease;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DropDownItem</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  padding: 1rem;
  cursor: pointer;
  &amp;:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>완성된 버전</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188813661-d31a95d8-8a3d-4916-a82e-8a924d5010f2.gif" alt="ezgif-4-8e32a6168e" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="css" /><category term="javascript" /><summary type="html"><![CDATA[]]></summary></entry></feed>