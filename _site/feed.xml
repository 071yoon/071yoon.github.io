<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-15T18:23:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi&apos;s tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">마음의 법칙</title><link href="http://localhost:4000/book/2023/01/15/rule-of-mind.html" rel="alternate" type="text/html" title="마음의 법칙" /><published>2023-01-15T00:00:00+09:00</published><updated>2023-01-15T00:00:00+09:00</updated><id>http://localhost:4000/book/2023/01/15/rule-of-mind</id><content type="html" xml:base="http://localhost:4000/book/2023/01/15/rule-of-mind.html"><![CDATA[<h1 id="마음의-법칙">마음의 법칙</h1>

<blockquote>
  <p>사람의 마음은 어떻게 작동하는 것일까?</p>
</blockquote>

<p>책을 읽다보면 공통적으로 언급되는 주제가 있다.</p>

<blockquote>
  <p>자신의 <code class="language-plaintext highlighter-rouge">인생의 통제권</code>을 회복하여야 한다</p>
</blockquote>

<p>여기서 말하는 <code class="language-plaintext highlighter-rouge">인생의 통제권</code>이란 어떤걸 말하는걸까?</p>

<h2 id="overview">Overview</h2>

<p>책은 우리가 평소에 어떠한 문제를 가지고 살아가며 해당 문제를 심리학적으로 분석을 해준다.</p>

<p>그리고 문제에 대한 자세한 해결법을 제시해줄 때도 있고, 문제만 언급하고 다음 주제로 넘어갈 때가 있다.</p>

<p>관련해서 예전에 정형돈이 토크쇼에 나와서 이런 이야기를 한 이야기가 기억이 났다.</p>

<blockquote>
  <p>“대학생이 성공의 기준이 무엇인지에 대해 질문을 한적이 있다. 개그맨을 꿈꾼다면 조언을 해줄 수 있겠지만, 그사람이 가자고 하는 길에 대해 아는것이 하나 없는데 내 얘기에 귀를 귀울여 변한다는것이 무섭고, 다른 사람 인생에 주제넘게 영향을 끼칠까봐 조심스러웠다”</p>
</blockquote>

<p><img width="592" alt="image" src="https://user-images.githubusercontent.com/66371206/212532415-847ae4d9-f02d-4bd2-8a3e-3fc581def0db.png" /></p>

<p>가끔 방송에서 “이렇게 해야된다~” 혹은 “이렇게 하면 안된다~” 라고 직접적으로 조언을 해주는 말을 많이 찾아볼 수 있다. 하지만 이러한 조언들이 항상 모든 사람들에게 적용 되냐는 다른 이야기라 생각한다.</p>

<p>그런 측면에서 책에서 나름 체계적이고 통계적인 분석된 결과를 가지고 문제 상황을 제기하고 해결법을 알려주지 않아, 직접 나의 상황에 맞춰 해답을 찾게 해주는것 같아 흥미롭게 읽을 수 있었다.</p>

<h2 id="인생의-통제권">인생의 통제권</h2>

<p>책을 읽다보면 지속적으로 <code class="language-plaintext highlighter-rouge">인생의 통제권</code>을 회복해야 된다는 이야기가 나오게 된다. 이는 정말 다양한 심리학적 요소들에 개입된다.</p>

<p>그 중 인상깊었던 몇 가지만 이야기해보려 한다.</p>

<h3 id="감정">감정</h3>

<blockquote>
  <p>실제로 우리는 자신의 느낌이 아니라 상대방에게 품은 <code class="language-plaintext highlighter-rouge">생각</code> 곧 주변 사람들을 보는 자신의 <code class="language-plaintext highlighter-rouge">판단</code>을 표현한다.</p>
</blockquote>

<p>예를 들어, <code class="language-plaintext highlighter-rouge">내가 느끼기에 너는 나를 사랑하지 않아</code> 는 <code class="language-plaintext highlighter-rouge">너는 나를 사랑하지않아</code>라는 판단에서 나오게 되는 것이다. 하지만 이러한 <code class="language-plaintext highlighter-rouge">판단</code>에서 나오는 실제 감정은 <code class="language-plaintext highlighter-rouge">슬픔, 무기력함, 우울함</code> 등일 것이다. 그리고 판단이 아닌 감정을 솔직하게 받아들이는 것이 나의 감정에 충실하게 살아갈 수 있는 방법이라 말한다.</p>

<p>감정을 있는 그대로 인정하며 그대로 받아들이며 감정에 충실하게 살아갈 수 있다</p>

<h3 id="귀속-오류">귀속 오류</h3>

<p>사람은 실패나 잘못을 할 때 외부로 돌리고, 잘했을 때 자신의 덕으로 돌린다.</p>

<p>이러한 근본적인 귀속 오류를 범하지 말아야 된다.</p>

<p>특히 외부상황에 따라 어쩔 수 없이 벌어진 일임에도, 성급하게 상대에게 책임을 돌리는 행동을 조심해야 된다. <code class="language-plaintext highlighter-rouge">내부의 원인 찾기</code>로 쏠리는 배경이 무엇인지 제대로 알고 비판적으로 물어보며 자아의 상호 의존적 이해를 실현시켜야 된다.</p>

<h3 id="습관화">습관화</h3>

<p>습관화란 때론 긍정적인 면도 있고 부정적인 면도 있다.</p>

<p>책에서 소개하는 한 실험은 다음과 같다. 여러 맛이 들어있는 사탕을 주며 한 집단에게는 맛별로 구별하며 사탕의 개수를 세게 하고, 다른 집단에는 그냥 전체 사탕의 개수를 먹으면서 세게 만들었다. 그리고 사탕에 대한 만족도를 조사하였을 때 맛별로 구별하며 먹었던 집단에게서 만족도가 더 높게 나왔다.</p>

<p>사탕을 먹는 행위 자체가 습관화가 되어 버려 지루해져 만족도가 떨어지는 것이다. 하지만 맛별로 구별하며 먹게 되면 계속 생각을 하고 지루함을 느끼지 않게 되어 습관화를 예방할 수 있다.</p>

<blockquote>
  <p>즉 구체적인 계획이 지루한 습관화를 예방</p>
</blockquote>

<p>이는 단순히 단순 반복작업이 아닌 우리의 일상에서도 통용되는 말이라 생각된다.</p>

<p>이전에 읽었던 <code class="language-plaintext highlighter-rouge">함께 자라기</code> 라는 책에서 아래와 같은 도표를 언급했을때가 생각났다.</p>

<p><img width="581" alt="image" src="https://user-images.githubusercontent.com/66371206/212532285-60009e0f-d0f9-451e-956d-12a51c84fb62.png" /></p>

<p>우리가 성장을 하기 위해서는 <code class="language-plaintext highlighter-rouge">Flow Channel</code>이란 공간에 속해야 된다는 내용이였다. 만약 너무 어려운 일이라는 짜증나게 되어, 난이도를 낮춰야되고, 너무 쉬워 지루함을 느낀다면 스스로 난이도를 높여야 한다. 그리고 마음의 법칙이란 책에서는 습관화가 된다는 것을 <code class="language-plaintext highlighter-rouge">Boredom</code>이란 공간으로 표시한듯 했다.</p>

<p>하지만 일에 빠르게 적응하거나 경험이 필요할 때는 습관화가 필요할 때가 있다. 이런 때도 마찬가지로 구체적인 상상을 할 수록 습관화를 학습시킬 수 도 있다고 전달한다. 이는 마치 <code class="language-plaintext highlighter-rouge">Anxiety</code>에 속해있던 상황을 <code class="language-plaintext highlighter-rouge">Flow Channel</code>로 옮기는 것과 같다.</p>

<h3 id="소통">소통</h3>

<p>우리는 가끔 상대방의 말을 듣지 않고 말을 하려고 한다. 이는 경청이 곧 찬성이라고 생각하기 때문이다. 하지만 상대방의 말을 듣는것은 완전 무해하며 경청과 찬성이 다른것임을 이해하는것이 중요하다.</p>

<h3 id="인생의-통제권-1">인생의 통제권</h3>

<p>다중의 무지, 방과자 효과, 제노비스 신드롬 등 전부 <code class="language-plaintext highlighter-rouge">conformity</code> 즉 동조에 관련된 단어이다. 남이 하는대로 따라가고 싶어하는 욕구가 있다. 이는 우리가 인생의 통제권을 잃어버린것이다. 그래서 앞서 언급했던 통제권을 연장선으로, 우리는 우리의 감정에 대해 솔직하고 표현할 수 있어야 된다는 말을 계속 언급한다.</p>

<h2 id="후기">후기</h2>

<p>나는 자기계발서를 좋아하는 편은 아니다. 정말 당연한 말을 하며 마치 엄청난 이론인것 마냥 떠드는 책들 접해서 그렇게 됐으리라 생각한다. 이번 책도 어떤 면에서는 당연한 이론을 말하기도 하였지만, 심리학 박사가 근거와 통계를 토대로 말하고 있다는 점에서 신뢰가 갔고, 귀속 오류 등 삶에서 우리가 자주 하는 실수를 언급할 때 마다 <code class="language-plaintext highlighter-rouge">내가 실제로 이랬던가?</code> 라고 반성하는 시간도 가지게 되어 재미있었다.</p>

<p>그리고 주제와 다른 이야기지만, 책에서 마쉬멜로우 실험이 나와서 초등학교 이후로 다시 읽어 보았는데, 공감이 안가는 부분이 있었다. 만약, 참을성이 없어 참지 못하고 먹은 것이 아니라, 아이의 환경에 따라 먹지 못하는것이 아니였을까? 아이의 환경이 그런 선택을 하게끔 만들어주는것이 아닐까? 라는 생각이 들었다. 그래서 이 부분에 대해 요즘 나의 Best Friend 인 Chat GPT에게 물어보았다.</p>

<p><img width="863" alt="image" src="https://user-images.githubusercontent.com/66371206/212532999-2633999b-e991-4e96-8174-1e394b8c89b8.png" /></p>

<p>실제로 결과에 대해서 논란이 존재했고, 이러한 결과는 조심해서 봐야된다고 알려줬다. 역시 나 말고도 비판적으로 보고 있었던 사람이 존재했나보다</p>]]></content><author><name>071yoon</name></author><category term="book" /><category term="book" /><summary type="html"><![CDATA[마음의 법칙]]></summary></entry><entry><title type="html">2022년 회고</title><link href="http://localhost:4000/retrospect/2022/12/31/end-of-2022.html" rel="alternate" type="text/html" title="2022년 회고" /><published>2022-12-31T00:00:00+09:00</published><updated>2022-12-31T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2022/12/31/end-of-2022</id><content type="html" xml:base="http://localhost:4000/retrospect/2022/12/31/end-of-2022.html"><![CDATA[<h2 id="1분기">1분기</h2>

<p>2022년 1분기에는 딱히 많은 일들이 없었다. 소프트웨어 마에스트로에 합격하고싶어 계속 코딩테스트준비와 면접 준비를 했었다. 하지만, 이미 벌려놓은 일들이 꽤나 있어 여러가지를 병행하며 준비를 했었다.</p>

<p>우선, 42서울에서 블랙홀에 빠지지 않기위해 꾸준히 과제를 하며, 42서울 사람들과 웹 게임을 만드는 프로젝트를 하기로해서 그것도 병행해야 했다. 결국, 주로 낮에 프로젝트를 하고, 오후 11시에 매일 알고리즘 스터디를 하며 준비를 하고, 코딩테스트를 2차까지 붙고 난 후 면접 스터디를 하며 준비했다.</p>

<blockquote>
  <p>심지어 3월에는 학교까지 다녔어야 돼서 정말 바빴던것 같다.</p>
</blockquote>

<p>부트캠프치고 정말 준비 기간이 길었는데, 서류합격을 2월 24일에 받고, 최종합격 문자가 4월 8일에 나왔으니 전전긍긍하며 기다렸던 것 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/210166063-57da40db-da8e-44c5-bd73-53560f57f218.png" alt="image" /></p>

<h2 id="2분기">2분기</h2>

<p>2분기에는 학교를 다녔어야돼서, 많은 일을 하지 못했던것 같다. 나름 학교 강의에 대한 욕심이 있어, 수업도 열심히 듣고 과제도 열심히 하느라 바빴었다. 졸업프로젝트 HCI 과목에서 어플 만드는 강의도 있었기에, 과제가 밀렸고, 소프트웨어 마에스트로 과정에서 미니프로젝트를 하며 어플을 또 만들라고 해서 정말 바쁘게 시간이 지나갔다.</p>

<blockquote>
  <p>심지어 팀원들이 제대로 따라주지 않아 정신적으로 조금 힘들었다</p>
</blockquote>

<p>그렇게 바쁘게 5월까지 흘러가고 소프트웨어 마에스트로에서 FIRE 팀원들을 만나게 되었는데, 이 때부터 조금 편했던 것 같다. 나와 맞는 팀원들과 나와 맞는 프로젝트를 진행하며 정말 즐겁게 프로젝트를 진행했다.</p>

<blockquote>
  <p>열심히 기획하던 5월의 어느날
<img width="624" alt="image" src="https://user-images.githubusercontent.com/66371206/210167385-0754a2f6-ff7d-4898-9769-c3e4e0683d06.png" /></p>
</blockquote>

<blockquote>
  <p>그리고 42서울은 자진퇴소를…ㅠㅠ</p>
</blockquote>

<p>그리고 병행한 학교역시 나름 열심히 다닌 덕인지 꽤나 괜찮은 성적으로 7학기를 마무리 지을 수 있었다.</p>

<h2 id="3분기">3분기</h2>

<p>이 때는 나름 고민이 많았다. 우선 4-2를 다니며 바로 졸업을 할지 아니면 휴학을 하고 졸업을 늦출지에 고민을 많이 했다. 하지만, FIRE 팀원을 모집할 때 휴학을 하고 프로젝트에 집중하기로 했기에, 휴학을 하고 완전히 프로젝트에 몰두하게 되었다.</p>

<p>우리팀은 정말 7, 8, 9월동안 미친듯이 개발하며 시간을 보냈다. 어쩌다 보니 올빼미 타입이 3명인 팀이였기에, 오후 1시에 다같이 센터에서 모여서 밤 11시에 각자 집에 가는 것이 일상이 되었다.</p>

<blockquote>
  <p>그런데 새벽 5시까지 팀원들이 칼답을 했다..!</p>
</blockquote>

<p><a href="https://071yoon.github.io/til/2022/11/01/how-we-work.html">FIRE는 이렇게 협업했다 보러가기</a></p>

<p>한가지 아쉬웠던 점은, 소프트웨어 마에스트로를 지원할 때만 해도 그냥 개발만 미친듯이 하면 되는지 알았는데, 과정자체가 창업이 주된 목표이기에, 창업을 위한 기획, 마케팅, 발표, 서류작성 등등을 배우게 되었다. 그리고 멘토링은 최소 주 1번을 했어야 됐고 (우리팀은 주 3번씩 진행했다..) 지원금을 사용할 때 매번 서류를 작성하거나 소모임을 진행할 때 보고서를 제출 등 개발 외적으로 해야될 일들이 너무 많았다. 물론 멘토링 등은 좋은점이 참 많았지만, 개발에만 집중하고 싶었던 나에게 조금 아쉬웠던 점이였다.</p>

<p>그럼에도 불구하고, 우리팀은 일을 정말 많이 하여 누구보다 빠르게 MVP가 나와서, 이벤트도 진행하고 프로젝트의 완성도를 높여갈 수 있었다.</p>

<blockquote>
  <p>7월의 회의록 리스트
<img width="264" alt="image" src="https://user-images.githubusercontent.com/66371206/210166486-9f4ca936-8d3d-45a3-84f6-c8c734e65739.png" /></p>
</blockquote>

<h2 id="4분기">4분기</h2>

<p>멘토링을 진행하며 멘토님께서 디자인 패턴 스터디를 제안하셔서 스터디를 진행하게 되었는데, 정말 내 개발 안목을 높여주는 계기가 되었던 것 같다. 주에 1번 2~3시간씩 진행을 하며 3개월간 하여 11월에 끝나게 되었는데, 멘토님께서 말해주시는 이야기의 절반도 제대로 이해하지 못했지만, 내가 어떠한 점이 부족하고 공부해야되는지, 그리고 더 나아가 좋은 프로그래밍이란 어떠한 것인지에 대한 생각을 할 수 있는 좋은 기회였다. 아쉬웠던 부분은, 아무래도 초반에는 이해도 잘 못하고 재미도 없었기에 제대로 준비를 하지 않았다는 점이다. 정말 내가 발표할 부분만 정리하고 공부를 대충 했었는데, 지금 돌아간다면 이 기회를 제댈 잡아 디자인 패턴을 제대로 학습했을 것 같다.</p>

<p>그리고 이 때는 프로젝트도 진행을 하였지만, 슬슬 취업준비도 같이 했었다. 사실 실제로 취업을 하려고 했던것은 아니고, 멘토님께서 면접을 보는것 까지도 경험이라고 하셔서 경험을 쌓기 위해 지원을 시작했다.</p>

<p><img width="677" alt="image" src="https://user-images.githubusercontent.com/66371206/210167280-19df9a7c-de2f-460f-bfc5-f76196d1da67.png" /></p>

<p>처음에는 이력서도 대충 쓰고, 정말 아무 생각없이 들어본 회사라면 신입/경력 할 것 없이 전부 지원을 해서 불합격을 정말 많이 받았다.</p>

<blockquote>
  <p>소프트웨어 마에스트로 과정 중이여서 가지는 못했지만, 정말 좋게 봐서 나름 중견기업에 합격도 했었다!</p>
</blockquote>

<p><img width="631" alt="image" src="https://user-images.githubusercontent.com/66371206/210167292-abb1d261-9bd5-40c3-bc1f-7900133f230e.png" /></p>

<p>그리고 12월에는 나름 취업 전략을 짜서 이력서도 수정을 하고, 인턴과 신입을 적극적으로 지원했더니 합격 소식을 많이 받을 수 있었다. 그 중에 내 워너비 회사중에 하나에 합격을 하게 되어 내년 1월부터 입사하게 되었다.</p>

<blockquote>
  <p>정규직은 아니지만.. 그래도 어차피 복학을 해야되기에 6개월동안 다녀보기로 했다!!</p>
</blockquote>

<p>많이 한것 없이 빠르게 지나갔다고 생각을 했지만, 글로 적어보니 생각보다 많은 일들이 있었고 나름대로 성장도 많이 한 것 같아 뿌듯하다. 소프트웨어 마에스트로 과정도 무사히 마칠 수 있었고, 좋은 회사에서 일해볼 기회도 생겼다.</p>

<p>내년에는 졸업도 하고, 더 좋은곳으로 취업까지 할 수 있으면 좋겠다~!</p>

<blockquote>
  <p>모도코비드 화이팅!!
<img width="464" alt="image" src="https://user-images.githubusercontent.com/66371206/210167407-a3310bf3-27e0-4236-afc0-48e10f88cce5.png" /></p>
</blockquote>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[1분기]]></summary></entry><entry><title type="html">네트워크 공부를 마치며</title><link href="http://localhost:4000/retrospect/2022/12/28/after-studying-network.html" rel="alternate" type="text/html" title="네트워크 공부를 마치며" /><published>2022-12-28T00:00:00+09:00</published><updated>2022-12-28T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2022/12/28/after-studying-network</id><content type="html" xml:base="http://localhost:4000/retrospect/2022/12/28/after-studying-network.html"><![CDATA[<h2 id="네트워크-공부를-시작하게-된-계기">네트워크 공부를 시작하게 된 계기</h2>

<p>네트워크 공부를 시작한 계기는 생각보다 단순했다. 소프트웨어 마에스트로 과정에서, 우리는 화면공유 기반의 화상채팅 웹 어플리케이션을 제작하였는데, 아무래도 RTC 기반의 작업을 하다보니 네트워크가 필수적이였다. 문제는 내가 네트워크에 대한 지식이 너무 부족하여 항상 아쉬움을 느끼게 되었고, 네트워크 공부를 시작하게 되었다.</p>

<p>사실 9월달부터 시작하려고 크로우즈 교수님이 집필하신 네트워크 하향식 접근 책을 구매했지만, 너무 바빠 볼 시간이 없었고 11월 중순부터 제대로 시작하게 되었다.</p>

<p><img width="546" alt="image" src="https://user-images.githubusercontent.com/66371206/209802965-258902ac-f3d2-457d-a91c-a9c0944531ac.png" /></p>

<blockquote>
  <p>11월에 Network 공부의 시작을 알리는 Commit</p>
</blockquote>

<h2 id="네트워크-스터디">네트워크 스터디</h2>

<p>원래 혼자 천천히 책을 읽으며 정리를 해나가는 방식으로 네트워크 공부를 하려 했지만, 프로젝트를 진행하다 보니 책에 나오는 정보들이 전부가 아님을 깨달았다.</p>

<p>프로젝트를 진행하고 면접을 보다보니 , TLS, Session, HTTP, DNS, JWT 등이 언급 되었지만, 아무래도 책은 OSI 7 Layer 관점에서 매우 세세하게 접근을 하기에 책만 읽고 네트워크 공부를 마쳤다고 하기에는 아쉬움이 들었다. 그래서 네트워크 스터디를 진행하며 네트워크 관련 지식을 전체적으로 쌓는것으로 방향성을 다시 잡게 되었다.</p>

<p>구체적으로는, 매일 오후 23시에 디스코드에서 모여 각자 맡은 네트워크 파트에 대한 공부를 진행하고, 마치게 되면 테크톡처럼 발표를 하는 방식으로 진행을 하였다. 첫 일주일은 꽤나 진행이 잘 되었지만, 아무래도 진행했던 시점인 11월 중순에 소프트웨어 마에스트로 최종 발표및 나의 면접과 채용프로세스 등 일정이 겹쳐 제대로 하지 못했다. 스터디 주최자로서 제대로 방향성을 잡지 못해 아쉬움이 남는다.</p>

<p>그렇게 다들 스터디에대한 의욕도가 떨어지고, 자연스럽게 스터디는 포기하게 되었다. 그래서 나라도 공부를 해야겠다 싶어 혼자서 진행을 하게 되었다.</p>

<h2 id="네트워크-공부">네트워크 공부</h2>

<p>나의 스터디 목표는 네트워크 관련 어떠한 인터뷰 질문을 받아도 정말 잘 대답할 수 있을정도로 말을 할 수 있을만큼 지식을 쌓는 것이였다. 그렇게 하기 위해서는 단순히 인터뷰 질문을 달달 외우기보다는, 정말 관련 이론에 대하여 공식 문서를 읽어보며 학습을 하는 방향으로 공부를 하였다.</p>

<p>예를들어, DNS를 학습하자고 마음 먹었다면, 단순히 DNS query의 순서를 학습하기 보다는, 실제로 우리가 AWS에서 애먹었던 A Record, CName 등도 같이 정리를 하고, 현재 우리가 사용하는 DNS에서는 GSLB 등으로 load balancing을 한다는 것 까지 정리를 해보았다.</p>

<p>그리고 나의 학습에는 특이한 점이 하나 존재한다. 다이어그램을 왠만하면 내가 그린다는 것이다. 다이어그램을 그리면서 학습을 하다보면, 내가 학습한 내용을 정리할 수 있고, 또한 내가 학습한 내용을 다른 사람에게 손쉽게 설명할 수 있기 때문이다.</p>

<p><img width="1242" alt="image" src="https://user-images.githubusercontent.com/66371206/209804324-7432e5ec-9f81-4f90-9154-864a24984e37.png" /></p>

<p><img width="1094" alt="image" src="https://user-images.githubusercontent.com/66371206/209804358-78ad65d1-1d46-41ed-b623-ff318fb7e803.png" /></p>

<h2 id="네트워크-공부를-하며-느낀점">네트워크 공부를 하며 느낀점</h2>

<p>사실 면접을 보면서 네트워크 관련 질문을 받았을 때 힘들었던 일이 생각보다 꽤 있었다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`google.com`을 치면 어떤 일이 일어날까요?
</code></pre></div></div>

<p>이런 질문을 처음 받았을 때 정말 너무 힘들었었다. 어디서부터 시작을 해야될지도 몰랐었지만, 이제는 정말 자신있게 대답을 할 수 있게 되었다.</p>

<p>아마 <code class="language-plaintext highlighter-rouge">네트워크가 연결되기 위한 구성요소 -&gt; 7 layer -&gt; DHCP -&gt; NAT -&gt; ARP -&gt; DNS -&gt; Routing -&gt; TLS -&gt; GET</code> 이런 방향으로 흘러가지 않을까…</p>

<p>그리고 마침 네트워크 공부를 막 마치고 다음날 면접을 보았을때 이런 질문이 나왔었다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">DHCP에 대한 설명을 해주세요</code> 라는 질문이었다. 학습했던 대로, 4가지의 과정을 설명하고, 어떤 이유에서 broadcast를 해야되는지 등 잘 대답을 했었다.</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">REST api 에 대한 설명을 해주세요</code> 라는 다음 질문에도 <code class="language-plaintext highlighter-rouge">로이 필딩</code>이 주장한 REST부터 시작하여 <code class="language-plaintext highlighter-rouge">microsoft</code>가 주장하는 REST까지 내려오며 잘 대답을 해나갔다.</p>
</blockquote>

<p>이렇게 대답을 잘 했을 때 정말 내가 공부한게 헛된게 아니였고 뿌듯함을 더 느꼈던 것 같다.</p>

<p>단순히 인터뷰에 더 잘 대답을 할 수 있는 것 뿐만 아니라, 이제 네트워크 자체에 대해서 더 친숙해진 느낌이고, 다음에 RTC관련 문제가 생긴다면 당당하게 packet을 분석하며 어디가 문제인지 파악하고 해결할 수 있을것 만 같은 자신감이 생겼다.</p>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[네트워크 공부를 시작하게 된 계기]]></summary></entry><entry><title type="html">1일 1커밋에 대한 고찰</title><link href="http://localhost:4000/retrospect/2022/12/26/about-1-day-1-commit.html" rel="alternate" type="text/html" title="1일 1커밋에 대한 고찰" /><published>2022-12-26T00:00:00+09:00</published><updated>2022-12-26T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2022/12/26/about-1-day-1-commit</id><content type="html" xml:base="http://localhost:4000/retrospect/2022/12/26/about-1-day-1-commit.html"><![CDATA[<h1 id="1일-1커밋에-대한-개인적인-생각">1일 1커밋에 대한 개인적인 생각</h1>

<blockquote>
  <p>주관적인 생각 듬뿍 담겼음에 주의</p>
</blockquote>

<h2 id="1일-1커밋이란">1일 1커밋이란?</h2>

<p>말 그대로 하루에 하루에 커밋 한개를 한다는 뜻으로, 매일 코딩하는 습관을 들이자는 것이다.</p>

<p>한국어로 <code class="language-plaintext highlighter-rouge">1일 1커밋</code> 이라는 단어는, 2015년에 <a href="https://blog.outsider.ne.kr/1141">아웃사이더님의 블로그</a>로 시작된것으로 보인다.</p>

<p><a href="https://github.com/071yoon"><img src="https://streak-stats.demolab.com?user=071yoon" alt="GitHub Streak" /></a></p>

<p>블로그 작성 기준 92 streak으로, 나도 열심히 진행중이다!</p>

<h2 id="왜-1일-1커밋인가">왜 1일 1커밋인가</h2>

<p>아웃사이더님의 1일 1커밋에 대한 블로그를 읽고 있으면, <a href="https://johnresig.com/blog/write-code-every-day/">John Resig의 Writce Code Everyday</a> 라는 글로 가게 된다.</p>

<p>이 글에 1일 1커밋을 주장하는 바는 다음과 같다.</p>

<p><code class="language-plaintext highlighter-rouge">a week between working on some code is a long time, it’s very easy to forget what you were working on or what you left off on</code> 즉 한 코드 작업을 하다, 다른 작업을 하다 오면 공백이 생기고 길을 잃게 된다는 뜻이다.</p>

<blockquote>
  <p>컴퓨터 공학도 답게 <code class="language-plaintext highlighter-rouge">context switching</code> 비용이 든다고 적혀있다 ㅋㅋ</p>
</blockquote>

<p>그리고 포스트를 읽다보면 John Resig의 Write Code Everyday 전략은<a href="https://jenniferdewalt.com/">Jennifer Dewlt</a> 의 180일 Blog Challenge(하루에 한 웹사이트씩 180일동안 180개를 만드는 사이드 프로젝트)를 모티브로 따왔다고 한다.</p>

<h2 id="1일-1커밋-규칙">1일 1커밋 규칙</h2>

<p>그리고 완성된 Write Code Everyday는 다음과 같은 임의의 규칙이 존재한다고 알려줬다.</p>

<ol>
  <li>매일 코드를 작성해야 되며, 문서, 블로그 게시물 또는 기타 항목을 작성할 수 있지만 이는 내가 작성하는 코드에 추가되어야 합니다.</li>
  <li>유용한 코드여야 합니다. 들여쓰기 조정, 코드 재포맷, 가능하다면 리팩토링도 없습니다.</li>
  <li>모든 코드는 자정 전에 작성해야 합니다.</li>
  <li>코드는 오픈 소스여야 하고 Github에 있어야 합니다.</li>
</ol>

<p>여기에 꼭 commit을 해야된다는 규칙은 의외로 없지만, 한국에 넘어오며 잔디밭 심는것으로 넘어오며 1일 1커밋으로 말이 고정된 것 같다.</p>

<p>그리고 아웃사이더님의 블로그의 1일 1커밋 규칙은 다음과 같다.</p>

<ol>
  <li>의미 없는 커밋은 하지 않는다. 평소에도 할만한 커밋만을 작성한다. 나는 평소에도 커밋을 좀 잘게 쪼개서 하는 편이라서 이 규칙에 모호함이 있긴 하지만 스스로 양심에 맡기는 수밖에 없다.</li>
  <li>치팅은 하지만 어뷰징은 하지 않는다. 이 규칙도 약간 애매한 구석이 있기는 하다. 예를 들어 package.json에 새로운 라이브러리를 추가하고 이를 커밋하는 경우가 많은데 작업하다 보니 나는 평소에도 이렇게 했나 아니면 일일 커밋을 하기 위해서 하나 하는 고민을 종종 하게 됐다. 컴퓨터 시간을 어제로 바꿔서 커밋한다거나 하는 등의 어뷰징은 하지 않겠다는 의미이다.</li>
  <li>사이드 프로젝트 외에도 오픈 소스에 대한 공헌을 늘려간다. 이는 일일 커밋을 하는 목표이기도 하므로 개인 프로젝트에만 몰두하지 않고 틈나는 대로 다른 오픈 소스 프로젝트의 공헌하는 기회도 늘려간다. 장기적으로 특정 오픈 소스 프로젝트에 지속해서 참여하는 것이 목표이기도 하다.</li>
  <li>아무리 바빠도 일일 커밋을 최대한 한다. 바쁠 때는 안 하고 안 바쁠 때만 일일 커밋을 하게 되면 이전과 다를 바가 없으므로 바쁘고 안 바쁘고의 상관없이 진행한다.</li>
  <li>공개 저장소에 커밋하는 내용을 기준으로 한다. 현재 회사에서도 Github을 사용하기는 하지만 공개저장소에 올리는 커밋만을 기준으로 한다. 즉, Github의 공개 컨트리뷰션 그래프에 그려지는 것을 기준으로 한다.</li>
</ol>

<p>John Resig와 유사하지만, 조금 더 구체적으로 작성해주신것 같다.</p>

<h2 id="1일-1커밋-효과">1일 1커밋 효과</h2>

<p>John Resig가 느낀 매일 코드를 작성하면 느낀바는 다음과 같다.</p>

<ul>
  <li>실행 가능한 최소 코드 작성</li>
  <li>코딩하는 습관 형성</li>
  <li>Context Switching</li>
</ul>

<p>등이 있었지만, 의외로 장점만 있었던 것은 아니다.</p>

<p>흔히 말하는 워라밸이 붕괴가 된다거나, 항상 생각해야되기 때문에 불안해진다는 점도 말을 해주었다.</p>

<h2 id="내-생각">내 생각</h2>

<p>사실 나는 1일 1커밋이라는것이 꼭 프로그래밍 관점에서만 발생한다고 생각하지 않는다. 헬스를 매일매일 하는것이나, 더 단순하게 게임에서 일일 퀘스트를 깨는것도 비슷하다고 생각한다.</p>

<h3 id="숙제">숙제</h3>

<p>예전에 <code class="language-plaintext highlighter-rouge">메이플스토리</code>라는 게임을 한참 할 때 일일 퀘스트라는것이 존재했다. 매일매일 과제처럼 해야 캐릭터가 성장하고 보상을 받는 시스템으로 되어 있었다. 하루에 적어도 30분은 투자해야됐고, 누적되다 보면 정말 심리적으로 압박감이 오게된다. 실제로 게임 커뮤니티에서는 이걸 <code class="language-plaintext highlighter-rouge">숙제</code> 라고 부르기도 했었다. 그리고 나도 처음에는 캐릭터가 성장한다는 성취감에 매일매일 퀘스트를 달성했지만, 3달정도 진행을 하다 끊게 되었다.</p>

<p>캐릭터가 성장하는것은 즐겁지만, 데이트를 하던, 친구들과 술을 마시던, 계속 <code class="language-plaintext highlighter-rouge">오늘 우르스를 했었나?</code> 혹은 <code class="language-plaintext highlighter-rouge">일퀘 깼나?</code> 라는 생각이 들었었다. 이게 계속 쌓이다 보니 심리적으로 압박이 되고, 집착이 됐었던것 같다. 그리고 스트레스를 해소하기 위해 시작했던 게임인데, 오히려 불안함과 스트레스를 주게되어 접게 되었던 것 같다.</p>

<p>1일 1커밋도 마찬가지라고 생각한다. 꼭 하루에 한번쯤으 프로그래밍적으로 생각하게 만들고, 코드를 치게 함으로써 성장시켜준다는 관점, 더 나아가 오픈소스 컨트리뷰트를 하며 프로그래밍 생태계에 기여한다는 것 자체가 너무 좋은 취지라고 생각하지만, 이게 나를 불안하게 만들고 스트레스를 준다면 오히려 집착하지 않는것이 더 좋다고 생각한다.</p>

<h3 id="나만의-규칙">나만의 규칙</h3>

<p>나는 1일 1커밋을 몇년 째 해오는 사람도 아니고, 집착을 가진 사람도 아니다. 그리고 최대한 내가 스트레스를 받지 않고, 꾸준히 성장하기 위해 나만의 규칙을 정해보았다.</p>

<ol>
  <li>의미없는 커밋은 하지 않기 (docs 스페이스 만들었다 지우는 정도)</li>
  <li>시간 조작하지 않기 (amend 금지!)</li>
</ol>

<p>나에게는 딱 이정도가 좋다고 생각한다.</p>

<p>물론 아웃사이더님이나 John Resig가 언급한 정도로 매일 꾸준히 코딩을 할 수 있다면 너무 좋겠지만 나는 나를 알고 있기에 저런 빡빡한 규칙속에서는 금방 지쳐 쓰러질 것이다.</p>

<p>얇고 길게 코딩하자</p>

<p>화이팅👻</p>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[1일 1커밋에 대한 개인적인 생각]]></summary></entry><entry><title type="html">오픈소스 컨트리뷰터 찍먹해보기</title><link href="http://localhost:4000/til/2022/12/04/try-opensource-contributor.html" rel="alternate" type="text/html" title="오픈소스 컨트리뷰터 찍먹해보기" /><published>2022-12-04T00:00:00+09:00</published><updated>2022-12-04T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/04/try-opensource-contributor</id><content type="html" xml:base="http://localhost:4000/til/2022/12/04/try-opensource-contributor.html"><![CDATA[<h2 id="오픈소스-컨트리뷰터가-되어보자">오픈소스 컨트리뷰터가 되어보자</h2>

<blockquote>
  <p>항상 오픈소스 컨트리뷰터가 되어보는것이 꿈이였던 나…</p>
</blockquote>

<h2 id="괜찮은-repository-찾기">괜찮은 Repository 찾기</h2>

<p>깃허브의 망령처럼 돌아다니다 깃허브를 꾸며주는 레포지토리중 하나를 찾게되었다. 기능도 단순하고 이쁜 뱃지를 제공하는 레포였는데 나의 눈에 띈 것은 바로 번역률!</p>

<p><img width="813" alt="image" src="https://user-images.githubusercontent.com/66371206/205490276-b473ef4d-9c13-425c-80aa-4f99ad31a11b.png" /></p>

<p>한국어가 67% 밖에 번역이 되어 있지 않았다. 실제로 그렇게 많은 번역이 필요로 하는 기능은 아니였지만, 최근 업데이트되며 번역해야될 항목이 늘어나 대부분의 언어가 67%에 머물러 있어보였던 것 같다.
그래서 어떤 부분이 필요한지 확인을 해 보았는데… 두줄만 번역을 해주면 됐다..!</p>

<p>해보자!!</p>

<h2 id="issue--chore-찾아보기">Issue / Chore 찾아보기</h2>

<p>바로 PR을 날리기전에 먼저 Issue 확인을 해봐야 된다. 이번것 같은 경우에는 너무 간단한 번역일이라, 누가 선점했을 리는 없지만 누군가 작업중이라면 민폐일 수 있으니 조심하자.</p>

<p><img width="912" alt="image" src="https://user-images.githubusercontent.com/66371206/205492485-7a45de4a-5416-42d6-886e-61b940075b80.png" /></p>

<blockquote>
  <p>확인을 해 보니 다행스럽게도 아무도 작업중이지 않았다!</p>
</blockquote>

<p>README에 친절하게 어떻게 PR을 날리는지, template은 어떤 방식인지 친절하게 적혀 있으므로 천천히 따라가보도록 하자.</p>

<p><img width="947" alt="image" src="https://user-images.githubusercontent.com/66371206/205492546-590fe143-813e-4c4f-8464-41256dba4b44.png" /></p>

<h2 id="pull-request">Pull Request</h2>

<p>우선 해당하는 repository fork를 해서 복제를 하자.</p>

<p>복제한 repository에서 branch를 하나 파서 내가 원하는 부분 수정을 하고 commit -&gt; push 를 한다.</p>

<blockquote>
  <p>여기서 commit/branch name에 정해진 convention이 있을 확률이 높으니 잘 확인해보자</p>
</blockquote>

<p>그리고 github에서 fork 된 repository의 내 branch에서 실제 repository main에 create pull request를 하면 된다.</p>

<h2 id="approve">Approve</h2>

<p>개발자분이 활발하게 개발을 하셔서 그런지 자고 일어났더니 메일이 와있었다.</p>

<p><img width="676" alt="image" src="https://user-images.githubusercontent.com/66371206/205492672-49ef114e-df8b-46f1-aa9c-fa0de148cc99.png" /></p>

<blockquote>
  <p>approve 떴냐??</p>
</blockquote>

<p><img width="1294" alt="image" src="https://user-images.githubusercontent.com/66371206/205492700-6a2cdd0f-0bb8-4400-989a-dc159920ad91.png" /></p>

<p>정말 별것도 아닌 두줄 번역이지만, 나름 star 수가 2,000개가 넘는 레포지토리에 내 코드가 들어갔다니 감격이다…</p>

<p><img width="833" alt="image" src="https://user-images.githubusercontent.com/66371206/205492743-38523d04-97d1-4f38-9a60-9ff50db96cf7.png" /></p>

<p>그리고 62명의 contributor 중에서 내 이름도 들어가 있다!!</p>

<blockquote>
  <p><img width="952" alt="image" src="https://user-images.githubusercontent.com/66371206/205492794-bca47d2a-d28b-44fd-8b70-015b59594632.png" /></p>

  <p>뿌듯한 마음에 pin 까지 달아뒀다 ㅎㅎ</p>
</blockquote>

<p>나도 언젠가는 오픈소스 컨트리뷰터가 되어야지, 오픈소스 프로젝트를 해야지 마음만 먹었는데 이번에 우연한 계기로 정말 간단한 활동을 해보았는데 너무 재미있었다.</p>

<p>비록 별것도 아닌 간단한 번역이였지만, 이번을 계기로 더욱더 활발하게 오픈소스 chore 헌터가 되어야겠다.</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[오픈소스 컨트리뷰터가 되어보자]]></summary></entry><entry><title type="html">명령 패턴</title><link href="http://localhost:4000/gof/2022/11/17/command-pattern.html" rel="alternate" type="text/html" title="명령 패턴" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/11/17/command-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/11/17/command-pattern.html"><![CDATA[<h2 id="command-pattern">Command Pattern</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/202383203-558eb9f4-7433-4b6c-a5b5-8c27f52c1dd7.jpeg" alt="Command Pattern 001" /></p>

<p>커맨드 패턴에 대하여 알아봅시다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383211-00446e40-9907-4b8c-84e3-f093f8120dac.jpeg" alt="Command Pattern 002" /></p>

<p>간단한 게임을 하나 제작할 예정입니다.
이번 게임에서는 두가지 버튼만 활용할 예정이고, 버튼들은 <code class="language-plaintext highlighter-rouge">alt</code> 와 <code class="language-plaintext highlighter-rouge">ctrl</code> 만 사용할 예정이기에, <code class="language-plaintext highlighter-rouge">alt</code>에는 <code class="language-plaintext highlighter-rouge">jump</code> <code class="language-plaintext highlighter-rouge">ctrl</code> 에는 <code class="language-plaintext highlighter-rouge">attack</code> 이라는 함수를 매핑을 했습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383233-2b84ab5a-7db6-482f-947d-59eb3a38d294.jpeg" alt="Command Pattern 003" /></p>

<p>사실 이정도의 게임이라면 문제가 없습니다. 하지만 키보드 세팅이 복잡한 게임이라면 어떻게 될까요?
그럼 키 마다 세팅을 할 것입니다. 그리고 모든 키 매핑이 character에 관한 것도 아니고, <code class="language-plaintext highlighter-rouge">esc</code>는 게임 세팅창을 여는 등 다양한 <code class="language-plaintext highlighter-rouge">action</code>이 이루어 질 것입니다.</p>

<p>여기서 더 복잡한 상황을 생각해 보겠습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202387140-a83c1032-65f7-444d-b5e8-6767e8866b83.gif" alt="img" /></p>

<p>위의 영상을 보면, 같은 공격키를 누르지만, 공격에는 곰 -&gt; 새 -&gt; 호랑이 -&gt; 창 순서로 공격하게 되어 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383238-80b7e3af-ea54-4569-bdc3-a08a86e32bd2.jpeg" alt="Command Pattern 004" /></p>

<p>그걸 간단하게 코드로 보면 다음과 같이, <code class="language-plaintext highlighter-rouge">ctrl</code>을 눌렀을 때, 상황에 따라 다른 공격이 이루어지도록 수정을 해둬야 됩니다.</p>

<p>단순히 <code class="language-plaintext highlighter-rouge">키를 누른다</code> -&gt; <code class="language-plaintext highlighter-rouge">해당 키에 해당하는 Action을 취한다</code> 면 됐다고 생각했던 코드가 점점 복잡해져 가는게 보이시나요?</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383248-5e72fd6d-45c7-448e-8199-ceb56ce0b2ec.jpeg" alt="Command Pattern 005" /></p>

<p>하지만 여기서 끝이 나지 않습니다. 보통 게임에는 유저가 원하는 키에 유저가 원하는 Action을 취하도록 커스텀 가능한 환경을 제공합니다. 그럼 alt에 해당했던 <code class="language-plaintext highlighter-rouge">jump</code> 가 <code class="language-plaintext highlighter-rouge">npc/채집</code>으로 바뀌어야 됩니다.
이런 수정사항이 게임에 runtime에 수정되기란 상당히 힘들어 보입니다.</p>

<p>아니면 게임을 진행 할 수록 아까 보았던 attack 순서가 바뀌거나 추가가 되었다면 어떻게 될까요? 공격으로 지정된 키를 찾아 공격에 대한 로직을 수정해야 될 것입니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383258-1020a0e2-2f2e-4389-8d0a-660ba409f980.jpeg" alt="Command Pattern 006" /></p>

<p>Command Pattern을 활용하면 다음과 같이 간결하고 유지보수가 쉬운 형태로 유지 할 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383263-0b6a0c2e-f958-4ebd-9554-bd3d1858f8a0.jpeg" alt="Command Pattern 007" /></p>

<p>Command Pattern에는 5개의 등장인물이 존재합니다.</p>

<ol>
  <li>Command : 명령의 Interface를 정의</li>
  <li>Concrete Command : Command Interface를 구현</li>
  <li>Invoker : 명령의 행동을 개시하는 역할로 Command를 호출</li>
  <li>Receiver : Command가 실행될 때 대상이 되는 역할</li>
  <li>Client : Concrete Command를 생성 및 Receiver 역할을 할당</li>
</ol>

<p>Command는 단순히 실행을 하라는 execute 메소드만 생성을 하고, Concrete Command에서 해당하는 execute 메소드를 구현을 합니다.</p>

<p>예를 들어, AttackCommand에서의 execute라는 명령은 캐릭터를 공격을 유발합니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383268-9e6626e0-f74f-441e-8f3d-787d7bbdf0c2.jpeg" alt="Command Pattern 008" /></p>

<p>이와 유사하게 JumpCommand도 만들 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383273-f1c4eec2-1842-4e28-9219-621bad62eb1d.jpeg" alt="Command Pattern 009" /></p>

<p>마찬가지로, SettingCommand는 game에 해당하는 setting창을 여는 Concrete Command또한 만들 수 있다.</p>

<blockquote>
  <p>해당 command는 멤버변수는 character가 아닌 game임에 주의!</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/202383276-e859b904-42ef-4d3d-8da2-b235c8c740ce.jpeg" alt="Command Pattern 010" /></p>

<p>이제 Receiver는 Concrete Command의 실행에서 사용되는 클래스이다. 여기서 게임에서 동작하는 실제 로직을 작성하면 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383278-0a4eebac-5603-4b20-93fe-afd07b044966.jpeg" alt="Command Pattern 011" /></p>

<p>Client는 버튼으로, 해당 버튼이 어떠한 커맨드를 할 지 지정할 수 있는 setCommand 메소드가 존재하며, Invoke된 경우 커맨드를 실행시킬 수 있는 onPressed란 메소드를 구현해 주었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383279-7ea3c8ed-f171-41ee-9400-17e7ad2f54e6.jpeg" alt="Command Pattern 012" /></p>

<p>이제 실제로 Main에서 동작시켜보자.</p>

<p>우선, 필요한 버튼, 커맨드, Receiver 등을 할당시켜준다.
그 다음, 필요한 버튼에 원하는 커맨드를 setCommand로 할당시켜 준다.
마지막으로, 어떠한 입력이 나왔을 때, 원하는 버튼에 해당하는 command만 실행시켜주면 끝이다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383286-03ab9de2-cb11-4dc8-ba69-298d752f7669.jpeg" alt="Command Pattern 013" /></p>

<p>괜히 더 복잡해 보일 수 있지만, 유지보수의 관점에서 보면 정말 좋다.
아까와 같은 상황처럼, 버튼에 해당하는 Action이 수정되어야 한다면, <code class="language-plaintext highlighter-rouge">Button.setCommand(원하는 커맨드)</code> 한줄로 수정할 수 있게 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383293-d9a3720e-2cba-41d2-82ea-09248e220ac5.jpeg" alt="Command Pattern 014" /></p>

<p>혹은 공격에 대한 로직에 수정이 필요하다면, character 안에서 attack의 로직만 수정해 주면 되기에, 유지보수가 정말 쉬워진다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383298-b5d3877f-3572-4c2b-8b52-8404b8499019.jpeg" alt="Command Pattern 015" /></p>

<p>이걸 sequence diagram에서 보면 다음과 같다.</p>

<ol>
  <li>미리 버튼에 Command를 설정해준다</li>
  <li>버튼을 누른다면</li>
  <li>해당하는 Command의 execute를 호출</li>
  <li>execute에 해당하는 행동을 Receiver가 동작</li>
</ol>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><category term="TIL" /><summary type="html"><![CDATA[Command Pattern]]></summary></entry><entry><title type="html">REACT Hook 구현하기</title><link href="http://localhost:4000/til/2022/11/10/react-hook.html" rel="alternate" type="text/html" title="REACT Hook 구현하기" /><published>2022-11-10T00:00:00+09:00</published><updated>2022-11-10T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/10/react-hook</id><content type="html" xml:base="http://localhost:4000/til/2022/11/10/react-hook.html"><![CDATA[<h1 id="react-hook-구현해보기">React Hook 구현해보기</h1>

<h2 id="클로저">클로저</h2>

<h3 id="클로저의-개념">클로저의 개념</h3>

<p>Hook 을 구현하기 앞서 Closure에 대한 개념을 알고 가야된다. 클로저는 자바스크립트 처음 등장한 것은 아니며 함수를 일급 객체로 취급하는 함수형 프로그래밍 언어에서 사용되는 중요한 특성이다.</p>

<p>MDN 공식문서를 읽어 보면 다음과 같다.</p>

<blockquote>
  <p>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</p>
</blockquote>

<p>즉 함수와 선언 됐을때의 렉시컬 환경과의 조합이며, function 내부에서 function 바깥에서의 범위까지 접근할 수 있게 해준다는 뜻으로 해석된다.</p>

<h3 id="클로저-예제">클로저 예제</h3>

<p>개념이 잘 와닿지 않을 수 있으므로 예제를 보고 이해해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="nx">innerFunc</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">outerFunc</span><span class="p">();</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>코드에서 보이듯 outerFunc에서 innerFunc가 선언되고, 호출도 되었다. 하지만 여기서 핵심은 <code class="language-plaintext highlighter-rouge">var x</code>이다. innerFunc에서 <code class="language-plaintext highlighter-rouge">x</code>가 호출되었지만, 이는 외부함수인 <code class="language-plaintext highlighter-rouge">outerFunc</code>에서 선언되어있다. 여기서 innerFunc가 함수 outerFunc의 내부에 선언된 내부함수이므로 innerFunc는 자신이 속한 렉시컬스코프를 참조 할 수 있으므로 x에 접근할 수 있다.</p>

<blockquote>
  <p>scope는 함수를 호출할 때가 아닌 어디에 선언했는지에 따라 달라지며, 이를 렉시컬 스코핑이라 한다</p>
</blockquote>

<p>실행 컨텍스트 관점에서 보면 다음과 같다.</p>

<ol>
  <li>내부 innerFunc가 호출되며 자신의 실행 컨텍스트가 스택에 쌓이고 변수 객체, 스코프 체인, this에 바인딩할 객체가 결정</li>
  <li>스코프 체인은 전역 스코프를 가리키는 전역 객체, outerFunc의 활성객체, 함수 자신의 스코프를 가리키는 활성 객체를 바인딩 -&gt; 렉시컬 스코프</li>
</ol>

<p>앞선 예제를 해석하면 다음과 같다</p>

<ol>
  <li>innerFunc 내부에서 x를 검색 -&gt; 실패</li>
  <li>innerFunc의 외부함수 outerFunc의 스코프에서 x를 검색 -&gt; 성공</li>
</ol>

<p>이제 innerFunc를 호출이 아닌 return으로 변환하여 보자</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">innerFunc</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nx">outerFunc</span><span class="p">();</span>
<span class="nx">inner</span><span class="p">();</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>이제 outerFunc는 innerFunc를 반환하고 끝이 났다. 즉 1회 실행 후 실행 컨텍스트에서 제거되었으므로 outerFunc의 <code class="language-plaintext highlighter-rouge">var x</code>가 유효하지 않아, 접근할 수 있는 방법이 없어 보인다. 하지만 실제로 실행해보면 10이 잘 나온다. 이렇게 자신을 포함한 외부함수보다 내부함수가 더 오래 유지되는 경우, 내부함수가 호출되더라도 외부함수의 변수에 접근할 수 있는 환경을 클로저라 부른다.</p>

<blockquote>
  <p>반환된 내부함수가 자신이 선언됐을 때의 환경인 스코프를 기억하여 환경 밖에서 호출되어도 환경에 접근 할 수 있는 함수</p>
</blockquote>

<blockquote>
  <p>클로저에 의해 참조되는 변수는 자유변수라고 부른다</p>
</blockquote>

<h2 id="hook-구현해보기">Hook 구현해보기</h2>

<h3 id="usestate-hook">useState Hook</h3>

<p>먼저 useState의 사용 예시를 보면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">counter</span><span class="p">,</span> <span class="nx">setCounter</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nx">setCounter</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 1 and reflow</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p>즉 간단하게 생각하면, useState를 destruct한 형태로 받아오고, 첫번째 인자로 state에 대한 정보를 호출, 두번째 인자로 state를 변경할 수 있는 React의 common hook 이라 할 수 있다.</p>

<p>그럼 위와 유사하게 useState hook을 직접 구현해보자.</p>

<blockquote>
  <p>state() 함수에서 나의 상태, setState(val)에서 상태 변경</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">init</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">init</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">state</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">function</span> <span class="nx">setState</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="p">[</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">setFoo</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// 0</span>
<span class="nx">setFoo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p>앞서 봤던 클로저의 개념과 매우 유사하게 이해할 수 있다. val 같은 경우에는, useState(0)을 실행한 후, 직접적으로 호출하지 않아 더 이상 접근이 안될 것 같지만, state() 와 setState()에서 사용하는 변수기에 앞서 설명했던 것 처럼 외부함수의 자유변수 즉 val에 접근을 할 수 있다.</p>

<p>이를 React 와 같은 함수형 컴포넌트에서는 다음과 같이 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">click</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">render:</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">count</span><span class="p">()</span> <span class="p">}),</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">C</span> <span class="o">=</span> <span class="nx">Counter</span><span class="p">();</span>
<span class="nx">C</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="c1">// render: { count: 0 }</span>
<span class="nx">C</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">C</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="c1">// render: { count: 1 }</span>
</code></pre></div></div>

<p>그리고 Closure를 사용하여 구현할 때 주의해야 될 점은, 함수로 꼭 감싸주어야 된다는 것이다.
다음 함수를 확인해보자</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">initialValue</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">_val</span> <span class="o">=</span> <span class="nx">initialValue</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">setState</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_val</span> <span class="o">=</span> <span class="nx">newVal</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">_val</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="p">[</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">setFoo</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nx">setFoo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p>왜 setFoo(1)을 호출했는데 아직 0일까?</p>

<blockquote>
  <p>useState의 foo를 destruct 할 때 호출에서 val을 참조하고 변경되지 않기 때문!!</p>
</blockquote>

<h3 id="useeffect-hook">useEffect Hook</h3>

<p>useEffect의 사용 예시를 보면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">do something</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">someDependency</span><span class="p">]);</span>
</code></pre></div></div>

<p>해석해보면 someDependency에 변경이 생겼을 때 useEffect의 함수를 실행한다는 것이다.
그럼 마찬가지로 위와 유사하게 closure를 사용하여 구현해보자.</p>

<p>먼저 closure로 저장할 hook에 대한 정보를 만들어야된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="p">[],</span>
  <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>여기서 hooks 배열은 closure에 해당하는 부분으로 나의 state들의 정보들을 가지고 있다. <code class="language-plaintext highlighter-rouge">hooks[currentHook]</code>으로 해당하는 state 정보를 호출 할 수 있다.</p>

<p>이제 실제로 useEffect 함수를 구현을 하면 된다. 2가지 parameter를 받아, 첫번째로는 실행할 callback 함수, 두번째는 dependency 배열을 받는다.
실행 논리는 다음과 같다.</p>

<ol>
  <li>만약 빈 array라면 처음 callback 함수를 실행 후 다시 실행되면 안된다.</li>
  <li>내 dependency array가 이전 버전과 다르다면 callback 함수를 실행한다.</li>
</ol>

<p>이제 javascript로 구현하면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">depArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">hasNoDeps</span> <span class="o">=</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">;</span> <span class="c1">// if dependency is [] run once first time</span>
  <span class="kd">const</span> <span class="nx">deps</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">];</span> <span class="c1">// closure hook</span>
  <span class="kd">const</span> <span class="nx">hasChangedDeps</span> <span class="o">=</span> <span class="nx">deps</span> <span class="c1">// check closure hook and depArray</span>
    <span class="p">?</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span> <span class="o">===</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
    <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hasNoDeps</span> <span class="o">||</span> <span class="nx">hasChangedDeps</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// call callback when depArray changed or dependency is []</span>
    <span class="nx">callback</span><span class="p">();</span>
    <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">depArray</span><span class="p">;</span> <span class="c1">// set hook to current dependency</span>
  <span class="p">}</span>
  <span class="nx">currentHook</span><span class="o">++</span><span class="p">;</span> <span class="c1">// increase hook iterator</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 마치 React에서 사용할 수 있도록 render와 useState를 함께 붙여보면 다음과 같은 형태로 나오게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyReact</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// hook iterator</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">(</span><span class="nx">Component</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">Comp</span> <span class="o">=</span> <span class="nx">Component</span><span class="p">();</span> <span class="c1">// run effect</span>
      <span class="nx">Comp</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
      <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// init for next render</span>
      <span class="k">return</span> <span class="nx">Comp</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">useEffect</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">depArray</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">hasNoDeps</span> <span class="o">=</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">;</span> <span class="c1">// if dependency is [] run once first time</span>
      <span class="kd">const</span> <span class="nx">deps</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">];</span> <span class="c1">// closure hook</span>
      <span class="kd">const</span> <span class="nx">hasChangedDeps</span> <span class="o">=</span> <span class="nx">deps</span> <span class="c1">// check closure hook and depArray</span>
        <span class="p">?</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span> <span class="o">===</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">hasNoDeps</span> <span class="o">||</span> <span class="nx">hasChangedDeps</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// call callback when depArray changed or dependency is []</span>
        <span class="nx">callback</span><span class="p">();</span>
        <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">depArray</span><span class="p">;</span> <span class="c1">// set hook to current dependency</span>
      <span class="p">}</span>
      <span class="nx">currentHook</span><span class="o">++</span><span class="p">;</span> <span class="c1">// increase hook iterator</span>
    <span class="p">},</span>
    <span class="nx">useState</span><span class="p">(</span><span class="nx">initialValue</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">||</span> <span class="nx">initialValue</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">setStateHookIndex</span> <span class="o">=</span> <span class="nx">currentHook</span><span class="p">;</span> <span class="c1">// for setState closure</span>
      <span class="kd">const</span> <span class="nx">setState</span> <span class="o">=</span> <span class="p">(</span><span class="nx">newState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">hooks</span><span class="p">[</span><span class="nx">setStateHookIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newState</span><span class="p">);</span>
      <span class="k">return</span> <span class="p">[</span><span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="o">++</span><span class="p">],</span> <span class="nx">setState</span><span class="p">];</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">})();</span>
</code></pre></div></div>

<p>이를 활용한 Counter hook을 만든다면 다음과 같이 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MyReact</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">text</span><span class="p">,</span> <span class="nx">setText</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MyReact</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// second hook state</span>
  <span class="nx">MyReact</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">effect</span><span class="dl">"</span><span class="p">,</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">text</span><span class="p">]);</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">click</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
    <span class="na">type</span><span class="p">:</span> <span class="p">(</span><span class="nx">txt</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setText</span><span class="p">(</span><span class="nx">txt</span><span class="p">),</span>
    <span class="na">noop</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span><span class="p">),</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">render</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">text</span> <span class="p">}),</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="결론">결론</h2>

<p>물론 실제 React에서 구현된 hook은 이것보다 훨씬 효율적이고 잘 작성되었을 것이다. 여기서는 render함수를 JSX로 받아 DOM에 마운트 하는과정도 건너 뛰었고, 여럿 비효율적인 부분도 많아 보인다. 하지만, 클로저에 대한 개념과 hook의 동작과정을 더 잘 이해할 수 있게 되었다면 그걸로 충분하지 않을까?</p>

<p>참고
https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/</p>

<p>https://poiemaweb.com/js-closure</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="JavaScript" /><summary type="html"><![CDATA[React Hook 구현해보기]]></summary></entry><entry><title type="html">상태 패턴</title><link href="http://localhost:4000/gof/2022/11/03/state-pattern.html" rel="alternate" type="text/html" title="상태 패턴" /><published>2022-11-03T00:00:00+09:00</published><updated>2022-11-03T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/11/03/state-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/11/03/state-pattern.html"><![CDATA[<h2 id="개요">개요</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/199532363-edfb9a5d-b93d-4833-8c2a-c82655b23369.png" alt="image" /></p>

<blockquote>
  <p>Finite-state_machine 참고</p>
</blockquote>

<p>모든 주어진 순간에 프로그램이 속해 있을 수 있는 상태들의 수는 유한하며, 어떤 고유한 상태 내에서든 프로그램은 다르게 행동하고 한 상태에서 다른 상태로 즉시 전환될 수 있다. 현재의 상태에 따라 프로그램은 특정 다른 상태로 전환되거나 전환되지 않을 수 있으며, 이러한 전환 규칙들을 전환들(transitions)​이라고도 하고, 이러한 규칙들 또한 유한하고 미리 결정되어 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/199532122-689635dd-d965-4eda-9650-ad9e25d698ef.png" alt="image" /></p>

<p>단순한 상태 머신의 단점은 코드를 보면 바로 이해할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Document</span> <span class="ow">is</span>
    <span class="n">field</span> <span class="n">state</span><span class="p">:</span> <span class="n">string</span>
    <span class="o">//</span> <span class="err">…</span>
    <span class="n">method</span> <span class="n">publish</span><span class="p">()</span> <span class="ow">is</span>
        <span class="n">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span>
            <span class="s">"draft"</span><span class="p">:</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s">"moderation"</span>
                <span class="k">break</span>
            <span class="s">"moderation"</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">currentUser</span><span class="p">.</span><span class="n">role</span> <span class="o">==</span> <span class="s">"admin"</span><span class="p">)</span>
                    <span class="n">state</span> <span class="o">=</span> <span class="s">"published"</span>
                <span class="k">break</span>
            <span class="s">"published"</span><span class="p">:</span>
                <span class="o">//</span> <span class="n">Do</span> <span class="n">nothing</span><span class="p">.</span>
                <span class="k">break</span>
    <span class="o">//</span> <span class="err">…</span>
</code></pre></div></div>

<p>일반적으로 객체의 상태에 따라 적절한 행동들을 선택하는 많은 조건문​(if 또는 switch)​으로 구현되며, <code class="language-plaintext highlighter-rouge">Document</code> 클래스에 상태들과 상태에 의존하는 행동들을 추가할수록 분명해지게 된다. 그리고 프로젝트의 부피가 커질수록, transition이 발생했을 때, 메소드의 상태 조건들이 변경되어 관리가 힘들어지게 된다.</p>

<h2 id="예제">예제</h2>

<h3 id="조건">조건</h3>

<ul>
  <li>프로그램상의 1초를 현실 세계의 1시간으로 가정</li>
  <li>금고는 1개가 있음</li>
  <li>금고는 경비센터와 접속되어 있음</li>
  <li>금고에는 비상벨과 일반통화용 전화가 접속되어 있음</li>
  <li>금고에는 시계가 설치되어 있어 현재의 시간을 감시하고 있음</li>
  <li>주간은 09:00~16:59, 야간은 17:00~23:59 및 0:00~8:59</li>
  <li>금고는 주간에만 사용할 수 있음</li>
  <li>주간에 금고를 사용하면 경비센터에 사용기록이 남음</li>
  <li>야간에 금고를 사용하면 경비센터에 비상사태로 통보</li>
  <li>비상벨은 언제나 사용할 수 있음</li>
  <li>비상벨을 사용하면 경비센터에 비상벨 통보</li>
  <li>일반통화용의 전화는 언제나 사용할 수 있음(야간은 녹음만 가능)</li>
  <li>주간에 전화를 사용하면 경비센터가 호출</li>
  <li>야간에 전화를 사용하면 경비센터의 자동응답기가 호출</li>
</ul>

<blockquote>
  <p>예제 실행화면
<img src="https://user-images.githubusercontent.com/66371206/199536253-e2de98e3-b074-460f-b67f-01a008980ad8.png" alt="image" /></p>
</blockquote>

<p><img width="585" alt="image" src="https://user-images.githubusercontent.com/66371206/199536792-04b4b454-4c44-4187-9d79-02a2726e8ca2.png" /></p>

<p><img width="760" alt="image" src="https://user-images.githubusercontent.com/66371206/199537669-aef4aab4-d7c6-4da4-928a-9d43fb85f9fd.png" /></p>

<h3 id="state">State</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// state.java</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">State</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doClock</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doUse</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doAlarm</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doPhone</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="daystate">DayState</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DayState.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DayState</span> <span class="kd">implements</span> <span class="nc">State</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">DayState</span> <span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DayState</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">DayState</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">State</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">singletone</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DayState</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">singletone</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doClock</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">9</span> <span class="o">||</span> <span class="mi">17</span> <span class="o">&lt;=</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">context</span><span class="o">.</span><span class="na">changeState</span><span class="o">(</span><span class="nc">NightState</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doUse</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">recordLog</span><span class="o">(</span><span class="s">"금고사용(주간)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doAlarm</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"비상벨(주간)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPhone</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"일반통화(주간)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[주간]"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="nightstate">NightState</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NightState.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NightState</span> <span class="kd">implements</span> <span class="nc">State</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">NightState</span> <span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NightState</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">NightState</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">State</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">singletone</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span><span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NightState</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">singletone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doClock</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">9</span> <span class="o">&lt;=</span> <span class="n">hour</span> <span class="o">&amp;&amp;</span> <span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">17</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">context</span><span class="o">.</span><span class="na">changeState</span><span class="o">(</span><span class="nc">DayState</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doUse</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">recordLog</span><span class="o">(</span><span class="s">"비상: 야간금고 사용!"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doAlarm</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"비상벨(야간)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPhone</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"야간통화 녹음"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[야간]"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="context">Context</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Context.java</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Context</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">setClock</span><span class="o">(</span><span class="kt">int</span> <span class="n">hour</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">changeState</span><span class="o">(</span><span class="nc">State</span> <span class="n">state</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">callSecurityCenter</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">recordLog</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="safeframe">SafeFrame</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SafeFrame.java</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SafeFrame</span> <span class="kd">extends</span> <span class="nc">Frame</span> <span class="kd">implements</span> <span class="nc">ActionListener</span><span class="o">,</span> <span class="nc">Context</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextField</span> <span class="n">textClock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextField</span><span class="o">(</span><span class="mi">60</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextArea</span> <span class="n">textScreen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextArea</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">60</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonUse</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"금고사용"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonAlarm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"비상벨"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonPhone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"일반통화"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonExit</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"종료"</span><span class="o">);</span>

    <span class="kd">private</span> <span class="nc">State</span> <span class="n">state</span> <span class="o">=</span> <span class="nc">DayState</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">SafeFrame</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">HeadlessException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">title</span><span class="o">);</span>
        <span class="n">setBackground</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">lightGray</span><span class="o">);</span>
        <span class="n">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">BorderLayout</span><span class="o">());</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textClock</span><span class="o">,</span> <span class="nc">BorderLayout</span><span class="o">.</span><span class="na">NORTH</span><span class="o">);</span>
        <span class="n">textClock</span><span class="o">.</span><span class="na">setEditable</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textScreen</span><span class="o">,</span> <span class="nc">BorderLayout</span><span class="o">.</span><span class="na">CENTER</span><span class="o">);</span>
        <span class="n">textScreen</span><span class="o">.</span><span class="na">setEditable</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>

        <span class="nc">Panel</span> <span class="n">panel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Panel</span><span class="o">();</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonUse</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonAlarm</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonPhone</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonExit</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">panel</span><span class="o">,</span> <span class="nc">BorderLayout</span><span class="o">.</span><span class="na">SOUTH</span><span class="o">);</span>

        <span class="n">pack</span><span class="o">();</span>
        <span class="n">show</span><span class="o">();</span>

        <span class="n">buttonUse</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonAlarm</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonPhone</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonExit</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//Event Listener Handler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonUse</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span><span class="o">.</span><span class="na">doUse</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonAlarm</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span><span class="o">.</span><span class="na">doAlarm</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonPhone</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span><span class="o">.</span><span class="na">doPhone</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonExit</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"?"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setClock</span><span class="o">(</span><span class="kt">int</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">clockstring</span> <span class="o">=</span> <span class="s">"현재 시간은"</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">clockstring</span> <span class="o">+=</span> <span class="s">"0"</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="s">":00"</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">clockstring</span> <span class="o">+=</span> <span class="n">hour</span> <span class="o">+</span> <span class="s">":00"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clockstring</span><span class="o">);</span>
        <span class="n">textClock</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">clockstring</span><span class="o">);</span>
        <span class="n">state</span><span class="o">.</span><span class="na">doClock</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">hour</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">//상태전환</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeState</span><span class="o">(</span><span class="nc">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">+</span> <span class="s">"에서"</span> <span class="o">+</span> <span class="n">state</span> <span class="o">+</span> <span class="s">"로 상태가 변화했습니다."</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//경비센터의 호출</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">callSecurityCenter</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">textScreen</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"call! "</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">//경비센터의 기록</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">recordLog</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">textScreen</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"record ... "</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="main">Main</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Main.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SafeFrame</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SafeFrame</span><span class="o">(</span><span class="s">"State Sample"</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">24</span><span class="o">;</span> <span class="n">hour</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">frame</span><span class="o">.</span><span class="na">setClock</span><span class="o">(</span><span class="n">hour</span><span class="o">);</span>
                <span class="k">try</span><span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
                <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="등장인물">등장인물</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/199541328-2a641f2e-745a-4abf-b8ff-65473c7035e4.png" alt="image" /></p>

<h2 id="point">Point</h2>

<h3 id="strategy-pattern과의-차이">Strategy Pattern과의 차이</h3>

<p>이 구조는 전략 패턴과 비슷해 보이지만 한 가지 중요한 차이점이 있다. 상태 패턴에서의 특정 상태들은 서로를 인식하고 한 상태에서 다른 상태로 전환을 시작할 수 있지만 전략들은 거의 대부분 서로에 대해 알지 못한다.</p>

<h3 id="분할정복">분할정복</h3>

<p>복잡하고 규모가 큰 문제 혹은 프로그램은 그대로 해결하려하기보단, 우선 작은 문제로 나누고 또 나눠서 하나하나의 모듈들이 쉽게 해결가능한 수준까지 나눠 해결해야 한다.
State Pattern에서는 각각의 <code class="language-plaintext highlighter-rouge">상태</code>를 각각의 클래스로 표현해 문제를 분할했다. 조건과 규모가 커질수록 조건은 많아지고 분기문은 많아진다. 하지만 이번처럼 State Pattern을 사용하면 각각의 ‘상태’를 클래스고 표현해 복잡한 프로그램을 분할하여 효율적으로 관리할 수 있다.</p>

<h3 id="상태의존">상태의존</h3>

<p>SafeFrame 클래스의 setClock메소드는 Main클래스로부터 시간이 변경될 때(반복문의 순회)마다 호출되고 있다. 그리고 이 메소드는 시간을 인자값으로받아 출력 후 state.doClock(this,hour)으로 책임을 위임하고 있다. 즉, 시간의 설정을 ‘현재의 상태에 의존한 처리’로 취급하고 있다는 말입니다. 즉 state는 항상 같은값이 아닌 시간이 변경되서 기준을 충족할 때마다 주간과 야간 상태클래스로 변경하기 때문.
이처럼 State Pattern에서는 ‘상태에 의존한 처리’를 프로그램에서 표현하는방법은 다음과 같다.</p>

<ul>
  <li>추상 메소드로 선언후 인터페이스 명세(API)</li>
  <li>구현 메소드로 구현 후 각각의 클래스로 한다.</li>
</ul>

<h3 id="상태전환의-관리">상태전환의 관리</h3>

<p>State Pattern에서 상태전환을 어디서 관리하는지에 대해서는 고려해봐야 할 부분이다.
예제에서는 Context역할의 SafeFrame 클래스에서 상태전환 메소드(changeState)를 구현했다. 그리고 이 메소드를 호출하는 부분은 ConcreteState역할인 DayState나 NightState클래스이다. 다시말하면 예제에서는 ‘상태전환’을 ‘상태에 의존한 동작’으로 간주하고 있다. 이 방법은 장점과 단점이 있다.
장점은 상태전환의 시기를 하나의 클래스 내에서 가지고 있다는 점.</p>

<blockquote>
  <p>DayState 클래스가 상태전환되는 시기는 DayState 클래스 코드를 보면 된다.</p>
</blockquote>

<p>단점은 하나의 ConcreteState역할이 다른 ConcreteState역할을 알아야 한다는 점입니다.</p>

<blockquote>
  <p>doClock메소드 context.changeState(NightState.getInstance());</p>
</blockquote>

<p>이것의 문제는 클래스 사이의 의존관계를 깊게한다는 점이다.<br />
그럼, 모든 상태전환을 Context 역할의 SafeFrame클래스에 맡길수도 있는데 이 경우 ConcreteState역할의 독립성이 높아지지만 Context가 모든 ConcreteState역할을 알아야하는 문제가 발생한다. 해결책으로는 Mediator Pattern을 쓰거나 혹은 State Pattern대신 상태의 테이블(표)를 사용해 설계하는 방식이 있다.</p>

<h3 id="상태추가-is-easy">상태추가 is easy</h3>

<p>State 인터페이스를 구현하는 ConcreteState 클래스를 만들어 구현하면되기에 상태추가는 어렵지 않다.
다만, 상태전환은 다른 ConcreteState 역할과 접점이 되기에 주의해야 할 필요는 있다.
그리고 완성된 State Pattern에 새로운 ‘상태의존의 처리’를 추가하는 것은 곤란하다. 이 말은 State 역할이 인터페이스에 메소드를 추가한다는 것을 의미하며 이를 구현하는 모든 ConcreteState역할에 구현이 필요하기 때문이다.</p>

<p>출처 : Java언어로 배우는 디자인 패턴 입문</p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">FIRE는 이렇게 협업했다</title><link href="http://localhost:4000/til/2022/11/01/how-we-work.html" rel="alternate" type="text/html" title="FIRE는 이렇게 협업했다" /><published>2022-11-01T00:00:00+09:00</published><updated>2022-11-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/01/how-we-work</id><content type="html" xml:base="http://localhost:4000/til/2022/11/01/how-we-work.html"><![CDATA[<h2 id="fire는-이렇게-협업했다">FIRE는 이렇게 협업했다</h2>

<p>FIRE팀이 모도코를 개발한지 어느새 7개월이 넘었다. 소프트웨어 마에스트로과정도 이제 끝이 보이고 (글쓴 기준 25일정도 남았다) 우리가 어떻게 작업했었는지 정리할겸 작성해보았다.</p>

<h2 id="팀-구성">팀 구성</h2>

<p>팀 구성은 나(팀장이자 FE) 외 두명(FE, BE)로 이루어졌다. 팀은 모으는것도 정말 쉽지 않은 길이였다. 소프트웨어 마에스트로 과정이 아무래도 고등학생부터 대학교 졸업자까지 아우르는 활동이기에 나에게 딱 맞는 사람을 모으고 싶었다. 우선 소프트웨어 마에스트로에 100% 진심을 다해서 진행할 사람. 물론, 창업을 염두에 두고 한 말은 아니였고, 그냥 11월까지 정말 알차게 공부 및 개발 할 사람을 뽑고 싶었다.</p>

<p>그래서 나의 제외대상은 고등학생과 졸업자였다. 고등학생은 아무래도 학교를 가야되니 함꼐 활동을 하기 힘들것 같았고, 졸업자는 아무래도 취준을 하고 취업하면 병행을 못하기에 팀에서 두명만 남는 상황을 피하고 싶었다. 그리고 웹서비스를 해보고싶은 사람. 물론, 앱개발, IoT, Game 모두 훌륭하지만, 이번에 웹 프로젝트를 하며 커리어를 쌓고 싶었다. 그래서 처음 모집당시에는 실시간 통신을 하는 웹 플랫폼을 만들고자 했고, 나와 같이 해보고 싶은 사람들을 모집하게 되었다.</p>

<iframe src="https://giphy.com/embed/DYH297XiCS2Ck" width="480" height="372" frameborder="0" class="giphy-embed" allowfullscreen=""></iframe>

<blockquote>
  <p>그리고 운이 좋게 너무나도 좋은 사람들과 오랜기간 협업을 하게 되었다 ㅎㅎ</p>
</blockquote>

<p>프로젝트는 결국 처음 생각했던것과 유사하게 흘러가긴 했지만, 처음에는 기획이 때문에 스트레스를 정말 많이 받았다. 세명이서 열심히 아이디어를 만들어서, 기획을 다듬고 멘토님꼐 가면 Business Model이 부족하다던가, 시장에서 먹힐것 같지 않다거나 부정적인 이야기들을 정말 많이 들었다. 결국 Business Model 그런거 잘 모르겠고, 우리가 하고싶은것, 재미있는것, 사용자들이 많이 사용할만한것만 보고 현재의 모도코가 만들어졌다.</p>

<h2 id="ground-rule">Ground Rule</h2>

<p>우리팀은 결성당시(4월)에 3명다 프로젝트에 100% 시간을 쏟기 위해 휴학을 하자고 결심했다. 그럼 가장 중요한게 그라운드 룰 이라고 생각했다. 우리의 주요 그라운드룰은 다음과 같다.</p>

<h3 id="project">Project</h3>

<ul>
  <li>
    <p>코어 타임, 평일(공휴일 제외) 13:00 ~ 17:00</p>

    <ul>
      <li>주 50시간, 주말 포함 (센터에 상주)</li>
      <li>오프라인 단체 활동(세미나) 하루 10시간 취급</li>
    </ul>
  </li>
  <li>
    <p>스크럼 회의 13:00 시작</p>

    <ul>
      <li>스크럼 때 할 일은 Jira의 Issue기반으로 얘기할 것</li>
    </ul>
  </li>
  <li>
    <p>스프린트 단위</p>

    <ul>
      <li>2주</li>
      <li>스크럼 마스터도 2주 단위로 바꾸기</li>
    </ul>
  </li>
</ul>

<h3 id="work-life-balance">Work Life Balance</h3>

<ul>
  <li>
    <p>소원권 (팀 빌딩 관련 이어야 됨, 여행 가능)</p>

    <ul>
      <li>한 달 하나</li>
      <li>누적 X (말에 무조건 써야됨)</li>
    </ul>
  </li>
  <li>
    <p>개인 휴가권</p>

    <ul>
      <li>누적 가능에 한달에 2번</li>
      <li>최소 일주일 전에 캘린더에 말해주기</li>
    </ul>
  </li>
  <li>
    <p>아프면 쉬기</p>

    <ul>
      <li>건강이 우선이다!</li>
    </ul>
  </li>
  <li>
    <p>회의 안 되는 날은 최소한 1주일 전에 아래 캘린더 일정에 기록해두기!</p>
  </li>
  <li>
    <p>회고는 특별한 곳에서</p>
    <ul>
      <li>고양이 카페, 한강 코딩, MT 등</li>
    </ul>
  </li>
</ul>

<h3 id="life-and-culture">Life and Culture</h3>

<ul>
  <li>개인 운동 인증
    <ul>
      <li>카톡방 인증</li>
      <li>개인 목표</li>
      <li>일주일 3번</li>
    </ul>
  </li>
</ul>

<h3 id="penalty">Penalty</h3>

<ul>
  <li>
    <p>운동 안 지키면</p>

    <ul>
      <li>커피</li>
    </ul>
  </li>
  <li>
    <p>코어 타임에 늦으면</p>

    <ul>
      <li>커피</li>
    </ul>
  </li>
  <li>
    <p>주 50시간 못 채우면</p>
    <ul>
      <li>커피</li>
      <li>Expert님 회사 가서 시간 채우기</li>
    </ul>
  </li>
</ul>

<p>처음에는 되게 거창하게 이것저것, 재미있을 것 같은것(소원권 ㅋㅋ)도 있었지만, 개발을 하다보니 시간에 쫓기고 게을러져서 그라운드룰에 대한 의미가 퇴색됐던 것 같다. 그래도 코어타임, 스프린트, 회고 등 프로젝트에 관한 그라운드룰은 꽤나 잘 지켜졌던 것 같다.
그래도 팀원들이 해이해진건 아니고, 다들 밤을 새면서 개발하고 멘토링 일정이 꼬이고 하는 바람에 잘 안지켜졌던 것 같다.</p>

<h2 id="google-calendar">Google Calendar</h2>

<p>우리팀은 13시부터 22시까지 센터에서 오프라인으로 프로젝트를 하는것이 기본이였으므로, 일정관리를 되게 열심히 정리했다고 생각한다. 구글로 일정을 알려주는 공유 캘린더를 하나 만들어, 개인일정 및 팀 일정을 관리했다.</p>

<p><img width="1548" alt="스크린샷 2022-11-01 오후 6 52 18" src="https://user-images.githubusercontent.com/66371206/199215584-1b16fab9-3f92-4371-9f98-93cc69d0b9bf.png" /></p>

<blockquote>
  <p>적당히 널널했던 6월의 일정</p>
</blockquote>

<p><img width="1540" alt="스크린샷 2022-11-01 오후 6 58 44" src="https://user-images.githubusercontent.com/66371206/199215588-341ab2e1-e7e8-4ca7-9239-6310fee8a837.png" /></p>

<blockquote>
  <p>점점 바빠지는 11월의 일정..</p>
</blockquote>

<p>아마 사용했던 협업툴 중에 가장 활용도가 높았던 것 같다.</p>

<h2 id="sprint">Sprint</h2>

<p>애자일 방법론을 택하고 사용한 스프린트. 처음에는 정말 힘들었다.</p>

<p>처음에는 2주로 했다가 잘 활용 하는것 같지도 않고, 너무 어려워서 1주로 바꿧다 추후에 스프린트에 익숙해지면서 다시 2주로 늘어났다. 팀마다 다르겠지만, 익숙하지 않을수록 짧게 가져가고 빠른 회고를 하는것이 적응하기 편할 것 같다.</p>

<p>우리는 스프린트를 시작하기 전 해야 할 스토리들을 엄청나게 만들어 두었다. 그리고 충분한 스토리를 생성한 후, 이번주에 어떤 스토리들을 해결해 나갈지 결정하고 백로그에 넣어둔 뒤 스프린트를 시작했다. 그리고 1주 혹은 2주 후 스프린트를 마무리 지으며 회고를 하는 방향으로 했다.</p>

<p>회고는 처음에는 AAR(After Action Review) 라는 회고 방식을 사용했었다.</p>

<ol>
  <li>의도한 결과</li>
  <li>일어난 일</li>
  <li>계획과 실제의 차이</li>
  <li>배운것</li>
</ol>

<p>이렇게 회고를 하였고, 옛날 KATUSA 시절에 미군부대에서 사용했던 회고 방식이여서 추억이였다 ㅋㅋ</p>

<p>그러고 여러 회고들을 해보다 결국 KPT(Keep Problem Try)회고로 정착했다.</p>

<p>회고는 우선 이번 스프린트가 어땠는지에 대한 간단한 평을 진행하고 해당 스프린트에 대한 Keep Problem Try순으로 정리했다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200366441-84a36df8-aa92-4273-8cc7-0cc9a7323f6f.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/200367608-2934ba32-4671-4295-8c1e-f283818c1313.png" alt="image" /></p>

<p>그리고 회고록이 쌓여 가는걸 보면 기분이 매우 좋다!!</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200367824-29a869ad-e279-4ad5-bcb7-ed49c0f437c0.png" alt="image" /></p>

<h2 id="jira">Jira</h2>

<p>Jira도 처음사용해본 것 치고 정말 활용을 잘했다고 생각했다</p>

<p>우리는 Jira를 크게 3단계로 나눠서 관리했다.</p>

<ol>
  <li>에픽</li>
  <li>스토리</li>
  <li>하위이슈</li>
</ol>

<h3 id="에픽">에픽</h3>

<p>우선 에픽은 우리가 두개 혹은 세개의 스프린트중 완성할 수 있는 단위로, 기능의 구현의 단위로 끊었다.
예를 들어, [DM 개발] 이나 [프로필 화면] 처럼 큰 단위로 묶어서 관리했다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200359778-528460b4-c353-46db-9b13-9e34677544ad.png" alt="image" /></p>

<blockquote>
  <p>화려한 우리의 로드맵과 에픽들..</p>
</blockquote>

<h3 id="스토리">스토리</h3>

<p>다음은 그 에픽에서 구현하게될 스토리로 쪼갰다. 스토리는 주로 스프린트가 끝났을 때 데모 가능한 단위로 설정했다. 예를들어 <strong>[프로필 화면]</strong> 이라는 에픽이였다면, 스토리로는 [프로필 화면에서 통계를 확인할 수 있다], [프로필 버튼을 통하여 친구의 프로필 페이지로 넘어갈 수 있다], [내 프로필의 정보를 수정할 수 있다] 등 데모 가능하게 정했다. 그리고 추가로 스토리포인트라는 해당 스토리가 얼마나 걸릴지에 대한 시간 예측도 해보았는데, 생각보다 잘 맞지는 않았다 ㅠㅠ</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200360294-649cc7eb-53c9-446f-805f-08f54cad772e.png" alt="image" /></p>

<blockquote>
  <p>몇개는 아직도 해야 할 일로 등록되어있다 ㅠㅠ</p>
</blockquote>

<h3 id="하위이슈">하위이슈</h3>

<p>마지막으로 하위이슈는 해당 스토리를 구현하기 위한 하위 작업들이였다. 하위이슈에서는 내가 어떤 작업을 할건지, 결과물은 어떤 형식이고, 참고할 페이지는 어떤것이 있는지 적어서 올려뒀다. 그리고 스토리와 마찬가지로 해당 이슈가 얼마나 걸릴지에 대한 스토리포인트를 지정해두었는데, 주로 3-4시간어치 이슈였고, 스토리보다는 더 정확도가 높았던 것 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200361715-305a60b8-ebaf-4de8-86e9-f0ba02f79ccd.png" alt="image" /></p>

<p>개발 할 때는 미리 연동해둔 Github를 활용하여, Branch를 만들고 커밋 혹은 빌드를 하면 다음과 같이 자동으로 연동이 된다!</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200364657-dcc401e5-6914-419b-afc2-7a3b700514f3.png" alt="image" /></p>

<p>그래서 티켓 번호만 알고 있다면, Github가 아닌 Jira에서 빠른 확인이 가능하다.</p>

<p>그리고 마지막으로 누적 플로우 다이어그램을 보면 얼마나 열심히 그리고 꾸준히 살았는지 한눈에 확인 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200368090-bf89c8a6-4da0-4577-a6e9-22c95b8c46ce.png" alt="image" /></p>

<blockquote>
  <p>처음 계단형식에서 일자형식으로 발전한 우리의 누적 플로우 다이어그램</p>
</blockquote>

<h2 id="confluence">Confluence</h2>

<p>컨플루언스는 우리의 Wiki 저장소로 활용되었다. 앞서 보였던 회고록 부터 시작해서 데일리 회의록이나, 개발관련 API문서, 관련 자료 등등 모두 기록을 했었다.</p>

<p>우리가 정말 팀 중에 가장 문서를 잘 정리한 팀 중 하나라고 해도 될 만큼 문서 정리에 진심이였다. (사실 나보다 문서에 미친 팀원분이 정말 정리를 열심히 해주셨다) 한창 기획을 하느라 바빴던 5월은 회의록만 18개가 나왔을 정도였고 희의록 하나하나의 양도 정말… 말도 안나올 정도로 많았다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200369846-5b6b5d46-0386-40fd-bf62-8fc5bf125f1c.png" alt="image" /></p>

<blockquote>
  <p>한창 기획을 하던 5월의 어느날의 회의록..</p>
</blockquote>

<p>회의록 말고도, 개발에 관한 컨벤션이나 API 문서화도 최대한 깔끔하게 정리를 했었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200370149-6478fe31-e831-4b2b-8939-b92d44d28fdb.png" alt="image" /></p>

<blockquote>
  <p>프론트엔드 컨벤션 문서중…</p>
</blockquote>

<h2 id="github">Github</h2>

<p>그리고 마지막으로 실제로 개발을 진행한 Github</p>

<p>처음에는 Jira, Confluence, Bitbucket이 세트로 움직이면 정말 편하다는 말을 많이 들어 혹했지만, 그래도 아직까지는 한국에서 Github를 많이 활용하고, 포트폴리오로도 사용하기 간편할것 같아 Github를 활용하였다.</p>

<h3 id="readme">README</h3>

<p><a href="https://github.com/SWM-FIRE">» 우리의 깃허브 «</a></p>

<p>최대한 README도 이쁘게 하고 바로 우리의 프로젝트를 확인할 수 있게 만들었고, 순서는 다음과 같다.</p>

<ol>
  <li>프로젝트 소개</li>
  <li>실행방법</li>
  <li>Stack</li>
  <li>동작화면</li>
  <li>기능</li>
  <li>아키텍처</li>
  <li>그 외</li>
</ol>

<p><img src="https://user-images.githubusercontent.com/66371206/200371249-888df608-ffb7-48c4-836a-deb036d1ea40.png" alt="image" /></p>

<blockquote>
  <p>내가 열심히 꾸몄던 FE README</p>
</blockquote>

<h3 id="development">Development</h3>

<p>커밋로그 같은 경우에는 Jira ticket만 잘 명시해두면, Jira에서 확인이 가능하여 크게 신경쓰지는 않았다.</p>

<blockquote>
  <p>근데 이것도 컨벤션을 만들어서 적용해 두었으면 더 좋았을 것 같아 후회도 된다</p>
</blockquote>

<p>그리고 브랜치 전략은 간단한 트렁크 기반의 전략을 사용했다. dev를 현재 개발하고 있는 브랜치로 활용하고, main을 본 프로젝트의 배포된 형태로 사용하였다. 그러다 Jira Issue가 생기면, 브랜치를 하나 만들어 개발 후 PR을 날리고 동료가 Approve후 Merge 할 수 있는 시스템을 사용했다. 그리고 main은 어느정도 기능이 완성되고 안전하다고 판단 되었을 때 code review 및 검증 단계를 거친 후 배포되었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/200372623-967a9635-4713-42de-a97b-bdc9918774c3.png" alt="image" /></p>

<blockquote>
  <p>분명히 이론은 완벽한데 이상하게 생긴 브랜치…</p>
</blockquote>

<h2 id="후기">후기</h2>

<p>정말 간단하게 우리의 프로젝트 과정을 설명해봤는데, 생각보다 양이 많았다. 휴학을 하고 진행을 한 프로젝트라 시간이 아깝지 않게 열심히 노력한 프로젝트였는데, 정리를 해 보니 꽤나 열심히 살았던 것 같아 뿌듯해진다. 이렇게 프로젝트를 기획부터 배포 그리고 유지보수까지 해볼 경험이 많지 않은데, 정말 값진 경험을 했던 것 같고 너무나도 좋은 팀원과 멘토님들을 만날 수 있어서 영광이였다.</p>

<blockquote>
  <p>하지만 모도코는 아직 끝나지 않았다… 소프트웨어 마에스트로가 끝이나도 서비스는 운영됩니다..</p>
</blockquote>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[FIRE는 이렇게 협업했다]]></summary></entry><entry><title type="html">중개자 패턴</title><link href="http://localhost:4000/gof/2022/10/27/mediator-pattern.html" rel="alternate" type="text/html" title="중개자 패턴" /><published>2022-10-27T00:00:00+09:00</published><updated>2022-10-27T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/10/27/mediator-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/10/27/mediator-pattern.html"><![CDATA[<h2 id="왜-중개자-패턴">왜 중개자 패턴?</h2>

<blockquote>
  <p>객체 간의 혼란스러운 의존 관계들을 줄일 수 있는 행동 디자인 패턴</p>
</blockquote>

<p><strong>즉 중개자 패턴은 객체 간의 직접 통신을 제한하고 중재자 객체를 통해서만 협력할 수 있게 설정</strong></p>

<p>간단한 로그인 Form을 만든다고 구현을 해보자</p>

<p><img width="279" alt="image" src="https://user-images.githubusercontent.com/66371206/198242069-ca392cd8-0124-4ab5-ad5a-b3162d6266e3.png" /></p>

<p><img width="278" alt="image" src="https://user-images.githubusercontent.com/66371206/198242099-dccf424c-c2c7-4d75-9821-1cd588e21031.png" /></p>

<p>Guest를 누르면 Username과 Password가 막히고, Login을 누르면 Username이 활성화 되고, Username에 입력이 오면 Password가 활성화 되고, Password의 입력이 되면 OK가 활성화 된다.</p>

<p>생각나는대로 구현을 해보면 다음과 유사하다.</p>

<p><img width="300" alt="image" src="https://user-images.githubusercontent.com/66371206/198241000-6f63ef32-41c3-4e77-9a77-b79fe75b1e2c.png" /></p>

<p>하지만 이렇게 되면</p>

<ul>
  <li>Guest 인지 Login인지에 따라 어떤 TextField를 활성화 비활성화</li>
  <li>Password는 Login이고 Username이 활성화 됐을 때 input이 되는 환경이어야 되고</li>
  <li>OK 버튼은 Guest 일 때는 바로 활성화며, Login 일 때는 Username 과 Password에 입력이 있어야 활성화</li>
</ul>

<p>등 조건이 추가되고, 프로그램이 복잡해 질 수록 어떤 클래스가 어떤 역할을 하는지 정확하게 파악하기가 어려울 수 있다. 그럴 때 중개자를 두면 손쉽게 해결을 할 수 있다.</p>

<p><img width="298" alt="image" src="https://user-images.githubusercontent.com/66371206/198241095-f9c99d16-7094-43ae-8534-42ab295f514a.png" /></p>

<p>다음과 같이 Dialog란 중개자를 두어, 여러 TextField, CheckBox, Button 등을 확인하여 각각에 상황에 맞는 역할을 하라고 지시하게 만들 수 있다.</p>

<h2 id="구현">구현</h2>

<p><img width="500" alt="image" src="https://user-images.githubusercontent.com/66371206/198255317-c3e7600d-e7b1-4f6b-a2ae-2afb8fb129e2.png" /></p>

<h3 id="mediator">Mediator</h3>

<blockquote>
  <p>중개자 Interface로 colleague를 추가하고, colleague의 변화가 왔을 때 할 일을 지정할 수 있다</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Mediator interface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Mediator</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">createColleagues</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">colleagueChanged</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="colleague">Colleague</h3>

<blockquote>
  <p>Colleague 인터페이스, 공통적으로 제공하는 중개자를 세팅하는 부분과, 내가 활성화를 제어하는 부분이 포함</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Colleague interface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Colleague</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">setMediator</span><span class="o">(</span><span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">setColleagueEnabled</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">enabled</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="colleaguebutton">ColleagueButton</h3>

<blockquote>
  <p>CheckBox에 따라 OK / Cancel을 할 수 있는 버튼</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// OK, cancel button</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColleagueButton</span> <span class="kd">extends</span> <span class="nc">Button</span> <span class="kd">implements</span> <span class="nc">Colleague</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ColleagueButton</span><span class="o">(</span><span class="nc">String</span> <span class="n">caption</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">caption</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMediator</span><span class="o">(</span><span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mediator</span> <span class="o">=</span> <span class="n">mediator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColleagueEnabled</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">setEnabled</span><span class="o">(</span><span class="n">enabled</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="colleaguecheckbox">ColleagueCheckbox</h3>

<blockquote>
  <p>Guest인지 Login인지 선택할 수 있는 체크박스</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Guest, Login checkbox</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ItemEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ItemListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColleagueCheckbox</span> <span class="kd">extends</span> <span class="nc">Checkbox</span> <span class="kd">implements</span> <span class="nc">ItemListener</span><span class="o">,</span> <span class="nc">Colleague</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ColleagueCheckbox</span><span class="o">(</span><span class="nc">String</span> <span class="n">label</span><span class="o">,</span> <span class="nc">CheckboxGroup</span> <span class="n">group</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">state</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">HeadlessException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">label</span><span class="o">,</span> <span class="n">group</span><span class="o">,</span> <span class="n">state</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMediator</span><span class="o">(</span><span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mediator</span> <span class="o">=</span> <span class="n">mediator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColleagueEnabled</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">setEnabled</span><span class="o">(</span><span class="n">enabled</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">itemStateChanged</span><span class="o">(</span><span class="nc">ItemEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mediator</span><span class="o">.</span><span class="na">colleagueChanged</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="colleaguetextfield">ColleagueTextField</h3>

<blockquote>
  <p>Login이라면 Username를 enable, Username이 존재하면 Password를 enable 하는 input field</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Username, Password input box</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.TextEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.TextListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ColleagueTextField</span> <span class="kd">extends</span> <span class="nc">TextField</span> <span class="kd">implements</span> <span class="nc">TextListener</span><span class="o">,</span> <span class="nc">Colleague</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ColleagueTextField</span><span class="o">(</span><span class="nc">String</span> <span class="n">text</span><span class="o">,</span> <span class="kt">int</span> <span class="n">columns</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">HeadlessException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">columns</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMediator</span><span class="o">(</span><span class="nc">Mediator</span> <span class="n">mediator</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mediator</span> <span class="o">=</span> <span class="n">mediator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setColleagueEnabled</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">enabled</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">setEnabled</span><span class="o">(</span><span class="n">enabled</span><span class="o">);</span>
        <span class="n">setBackground</span><span class="o">(</span><span class="n">enabled</span><span class="o">?</span><span class="nc">Color</span><span class="o">.</span><span class="na">white</span> <span class="o">:</span> <span class="nc">Color</span><span class="o">.</span><span class="na">lightGray</span><span class="o">);</span>
    <span class="o">}</span>

	<span class="c1">// event listener</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">textValueChanged</span><span class="o">(</span><span class="nc">TextEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mediator</span><span class="o">.</span><span class="na">colleagueChanged</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="loginframe">LoginFrame</h3>

<blockquote>
  <p>mediator로 생성부터 change를 감지하면, 동작을 하며 변화에 대한 처리를 해준다</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// mediator LoginFrame</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginFrame</span> <span class="kd">extends</span> <span class="nc">Frame</span> <span class="kd">implements</span> <span class="nc">ActionListener</span><span class="o">,</span> <span class="nc">Mediator</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">ColleagueCheckbox</span> <span class="n">checkGuest</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ColleagueCheckbox</span> <span class="n">checkLogin</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ColleagueTextField</span> <span class="n">textUser</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ColleagueTextField</span> <span class="n">textPass</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ColleagueButton</span> <span class="n">buttonOk</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ColleagueButton</span> <span class="n">buttonCancel</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">LoginFrame</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">HeadlessException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">title</span><span class="o">);</span>
        <span class="n">setBackground</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">lightGray</span><span class="o">);</span>
        <span class="n">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">GridLayout</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">2</span><span class="o">));</span>
        <span class="n">createColleagues</span><span class="o">();</span>
        <span class="n">add</span><span class="o">(</span><span class="n">checkGuest</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">checkLogin</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Label</span><span class="o">(</span><span class="s">"Username"</span><span class="o">));</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textUser</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Label</span><span class="o">(</span><span class="s">"Password"</span><span class="o">));</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textPass</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">buttonOk</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">buttonCancel</span><span class="o">);</span>
        <span class="n">colleagueChanged</span><span class="o">();</span>
        <span class="n">pack</span><span class="o">();</span>
        <span class="n">show</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">createColleagues</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// init components and set mediator</span>
        <span class="nc">CheckboxGroup</span> <span class="n">g</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheckboxGroup</span><span class="o">();</span>
        <span class="n">checkGuest</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColleagueCheckbox</span><span class="o">(</span><span class="s">"Guest"</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
        <span class="n">checkLogin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColleagueCheckbox</span><span class="o">(</span><span class="s">"Login"</span><span class="o">,</span> <span class="n">g</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
        <span class="n">textUser</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColleagueTextField</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
        <span class="n">textPass</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColleagueTextField</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
        <span class="n">textPass</span><span class="o">.</span><span class="na">setEchoChar</span><span class="o">(</span><span class="sc">'*'</span><span class="o">);</span>
        <span class="n">buttonOk</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColleagueButton</span><span class="o">(</span><span class="s">"OK"</span><span class="o">);</span>
        <span class="n">buttonCancel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColleagueButton</span><span class="o">(</span><span class="s">"Cancel"</span><span class="o">);</span>

        <span class="n">checkGuest</span><span class="o">.</span><span class="na">setMediator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">checkLogin</span><span class="o">.</span><span class="na">setMediator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">textUser</span><span class="o">.</span><span class="na">setMediator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">textPass</span><span class="o">.</span><span class="na">setMediator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonOk</span><span class="o">.</span><span class="na">setMediator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonCancel</span><span class="o">.</span><span class="na">setMediator</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>

        <span class="n">checkGuest</span><span class="o">.</span><span class="na">addItemListener</span><span class="o">(</span><span class="n">checkGuest</span><span class="o">);</span>
        <span class="n">checkLogin</span><span class="o">.</span><span class="na">addItemListener</span><span class="o">(</span><span class="n">checkLogin</span><span class="o">);</span>
        <span class="n">textUser</span><span class="o">.</span><span class="na">addTextListener</span><span class="o">(</span><span class="n">textUser</span><span class="o">);</span>
        <span class="n">textPass</span><span class="o">.</span><span class="na">addTextListener</span><span class="o">(</span><span class="n">textPass</span><span class="o">);</span>
        <span class="n">buttonOk</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonCancel</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">colleagueChanged</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">checkGuest</span><span class="o">.</span><span class="na">getState</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">textUser</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="n">textPass</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="n">buttonOk</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">textUser</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">userpassChanged</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">userpassChanged</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">textUser</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">textPass</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">textPass</span><span class="o">.</span><span class="na">getText</span><span class="o">().</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">buttonOk</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">buttonOk</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">textPass</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="n">buttonOk</span><span class="o">.</span><span class="na">setColleagueEnabled</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="main">Main</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">new</span> <span class="nf">LoginFrame</span><span class="o">(</span><span class="s">"Mediator Sample"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="등장인물">등장인물</h2>

<p><img width="680" alt="image" src="https://user-images.githubusercontent.com/66371206/198248610-bedf001f-b4d7-47be-a786-d9370317482b.png" /></p>

<h3 id="mediator-1">Mediator</h3>

<p>Colleague 역할과 통신을 하며 조정을 실행하기 위한 Interface(API)를 결정</p>

<h3 id="concrete-mediator">Concrete Mediator</h3>

<p>Mediator 역할의 인터페이스(API)를 구현하여 실제의 조정을 실행</p>

<h3 id="colleague-1">Colleague</h3>

<p>Mediator역할과 통신을 실행할 인터페이스(API) 결정</p>

<h3 id="concrete-colleague">Concrete Colleague</h3>

<p>Colleague 역할의 인터페이스(API)를 구현</p>

<h2 id="point">POINT</h2>

<h3 id="분산처리">분산처리?</h3>

<p>유효/무효에 대한 모든 로직은 colleagueChanged 메소드에 포함이 되어 있기에 해당 메소드만 수정을 하면 된다. 객체지향 프로그래밍을 하다보면, 한 곳에 집중되는것을 피하기 위해 분산하여 처리를 하는 경우가 있지만, 무조건 분산하는것이 옳은 것이 아닌, 분산 할 것은 분산시키며, 집중시킬 것은 집중시켜야 된다.</p>

<h3 id="통신-경로의-증가">통신 경로의 증가</h3>

<p>OK button 이 text field에 따라 on/off 가 정해지는 상황에서, 중개자가 없는 경우에는 바로 text-field 가 있는지 확인 후 on/off 를 확인 할 수 있었다. 하지만, 중개자가 있기에 text field의 변화를 중개자에게 알리고, 중개자가 on/off를 결정하는 단계가 하나 늘었다. 이러한 인스턴스가 늘어날 수록 부담이 될 수 있다.</p>

<h3 id="재사용">재사용</h3>

<p>ConcreteColleague 역할은 concreteMediator가 손쉽게 재사용 할 수 있지만, concreteMediator의 재사용은 쉽지 않다. 예제에서의 LoginFrame이 생성과 제어를 모두 담당하기 때문에 의존도가 너무 높아 재사용하기 어려운 상황이 올 수 있다.</p>

<blockquote>
  <p>React와 비교하면 LoginFrame이라는 전역 상태를 사용하는것과 유사하다 볼 수 있을듯..!!</p>
</blockquote>

<blockquote>
  <p>mediator가 원래 생성부터 중개 역할까지 부담을 하는걸까? Factory? 한번 고민해보자</p>
</blockquote>

<p>참고 : https://refactoring.guru/ko/design-patterns/mediator</p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><category term="TIL" /><summary type="html"><![CDATA[왜 중개자 패턴?]]></summary></entry></feed>