<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-12T19:25:54+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi's tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">리액트 테스팅하기</title><link href="http://localhost:4000/react/2022/09/09/react-test.html" rel="alternate" type="text/html" title="리액트 테스팅하기" /><published>2022-09-09T00:00:00+09:00</published><updated>2022-09-09T00:00:00+09:00</updated><id>http://localhost:4000/react/2022/09/09/react-test</id><content type="html" xml:base="http://localhost:4000/react/2022/09/09/react-test.html"><![CDATA[<h2 id="jest와-react-testing-library를-사용하여-테스트를-해보자">Jest와 React-Testing-Library를 사용하여 테스트를 해보자</h2>

<p>이번에는 모킹 없이 간단하게 DOM관련 테스트만 진행할 예정이다.</p>

<p>여러 테스트 예시들을 보면, 한 <code class="language-plaintext highlighter-rouge">jest.it</code> 함수 에서 render를 여러번 하는것을 손쉽게 볼 수 있다. 그렇게 나도 유사하게 해보며 익혀보았다.</p>

<p>참고 : <a href="https://javascript.plainenglish.io/declarative-and-scalable-testing-with-react-testing-library-177f35f41396">확장가능한 테스트</a></p>]]></content><author><name>071yoon</name></author><category term="react" /><category term="javascript" /><category term="react" /><summary type="html"><![CDATA[Jest와 React-Testing-Library를 사용하여 테스트를 해보자]]></summary></entry><entry><title type="html">오디오 비주얼라이저 만들기</title><link href="http://localhost:4000/modoco/2022/09/07/audio-visualizer.html" rel="alternate" type="text/html" title="오디오 비주얼라이저 만들기" /><published>2022-09-07T00:00:00+09:00</published><updated>2022-09-07T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/07/audio-visualizer</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/07/audio-visualizer.html"><![CDATA[]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="javascript" /><category term="web" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">브라우저에서 입출력 제어하기</title><link href="http://localhost:4000/modoco/2022/09/06/audio-inputoutput.html" rel="alternate" type="text/html" title="브라우저에서 입출력 제어하기" /><published>2022-09-06T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/06/audio-inputoutput</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/06/audio-inputoutput.html"><![CDATA[<h2 id="브라우저에서-입출력-제어">브라우저에서 입출력 제어</h2>

<p>현재 만들고 있는 프로제긑는 디스코드와 게더타운과 유사한, 실시간 통신이 들어간 웹 플랫폼이다. 이런 유사한 프로젝트에 필수적으로 들어가야 되는 요소는 오디오의 제어이다.</p>

<blockquote>
  <p>말을 하다가 마이크를 바꿔야 되는 상황이 된다면?</p>
</blockquote>

<blockquote>
  <p>음질이 좋지 않다고 해서, 이어폰을 꼈을 때, 소리를 스피커에서 이어폰을 바꿔야 한다면?</p>
</blockquote>

<blockquote>
  <p>이어폰 배터리가 나가서 중간에 스피커로 교체 해야된다면?</p>
</blockquote>

<p>등 등 정말 많은 상황들이 연출 될 수 있다. 물론 가장 간편한 방법은, 알아서 시스템의 Default장비를 교체 후 브라우저를 refresh 해버리면 된다.
하지만 UX 관점에서, 오디오의 입출력을 브라우저에서 하는건 중요하다. 사실, 웹 플랫폼이 아닌 electron처럼 앱으로 만들었다면 쉬웠겠지만…</p>

<p>그렇게 브라우저 오디오 입출력 제어에 대한 글을 찾아보던 중 정말 쉽게 정리된 글도 없고, 오래된 내용들 특히 이미 지원이 끝난 함수들이 많아 막 사용하기 정말 쉽지 않았다. 그래서 내가 한번 정리를 해보았다.</p>

<h4 id="제공할-기능-목록">제공할 기능 목록</h4>

<ol>
  <li>카메라 입력 디바이스 제어가능</li>
  <li>음성 입력 디바이스 제어가능</li>
  <li>음성 출력 디바이스 제어가능</li>
</ol>

<p>드랍다운 까지 완성된 형태는 <a href="https://velog.io/@071yoon/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%93%9C%EB%9E%8D%EB%8B%A4%EC%9A%B4-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90">참고</a>링크에 있다.</p>

<h3 id="입출력-디바이스-찾기">입출력 디바이스 찾기</h3>

<p>우선, 선택을 하기 위해서는 나의 입출력 디바이스를 찾는것 부터 해야된다.</p>

<p>모든 선택 및 제어는 드랍다운에서 렌더링에도 사용되므로 전부 상태로 관리해주었다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Selectors.tsx</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Selectors</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">audioInput</span><span class="p">,</span> <span class="nx">setAudioInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">audioOutput</span><span class="p">,</span> <span class="nx">setAudioOutput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">videoInput</span><span class="p">,</span> <span class="nx">setVideoInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">getDevice</span><span class="p">(</span><span class="nx">setAudioInput</span><span class="p">,</span> <span class="nx">setAudioOutput</span><span class="p">,</span> <span class="nx">setVideoInput</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SelectorContainer</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">camera</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">videoInput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">mic</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">audioInput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">speaker</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">audioOutput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/SelectorContainer</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 getDevice함수에서 현재 사용하고 있는 모든 장비들을 불러올 수 있는 <code class="language-plaintext highlighter-rouge">navigator.mediaDevices.enumerateDevices()</code>함수를 사용하였다.</p>

<p><code class="language-plaintext highlighter-rouge">console</code>을 찍어보면 나온 device의 리스트는 다음과 같다.
<img width="985" alt="image" src="https://user-images.githubusercontent.com/66371206/188820065-c76d2d54-9e2a-4031-867f-1c3853347934.png" /></p>

<p>여기서 <code class="language-plaintext highlighter-rouge">kind</code>로 분류하여 비디오 입력, 오디오 입력, 오디오 출력을 구별하여 따로 저장하였다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// getDevice.ts</span>
<span class="kd">const</span> <span class="nx">getDevice</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span>
  <span class="nx">setAudioInput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span><span class="p">,</span>
  <span class="nx">setAudioOutput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span><span class="p">,</span>
  <span class="nx">setVideoInput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">devices</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">enumerateDevices</span><span class="p">();</span>
    <span class="nx">setAudioInput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audioinput</span><span class="dl">"</span><span class="p">));</span>
    <span class="nx">setAudioOutput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audiooutput</span><span class="dl">"</span><span class="p">));</span>
    <span class="nx">setVideoInput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">videoinput</span><span class="dl">"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">devices</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="dl">"</span><span class="s2">error getting devices</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>이렇게 주르륵 나온 devices들을 가지고 저번 포스트에서 다뤘던 드랍다운을 통하여 유저가 선택한 디바이스 정보를 나의 상태에 저장될 수 있게 설정해주었다.</p>

<blockquote>
  <p><a href="https://velog.io/@071yoon/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%93%9C%EB%9E%8D%EB%8B%A4%EC%9A%B4-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90">저번 블로그 주소</a></p>
</blockquote>

<h3 id="출력-디바이스-제어">출력 디바이스 제어</h3>

<p>무사히 유저가 원하는 입출력 디바이스를 선택하였고, 그 정보가 <code class="language-plaintext highlighter-rouge">userAudioOutputDevice</code>라는 상태에 존재한다고 가정하고 진행하도록 하겠다.</p>

<p>사실 여기까지 왔다면 거의 다한것이나 마찬가지다. 적어도 출력은 정말 간단하다.</p>

<p>현재 우리의 플랫폼에서 지원하는 오디오 출력은 두가지 존재한다.</p>

<ol>
  <li>테마 bgm</li>
  <li>상대방의 마이크 음성</li>
</ol>

<p>우선 상대방의 마이크 음성을 제어하는 부분을 보면 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Screen.tsx</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">&amp;&amp;</span> <span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">newRef</span> <span class="o">=</span> <span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
  <span class="p">(</span><span class="nx">newRef</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">setSinkId</span><span class="p">(</span><span class="nx">userAudioOutputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">stream</span><span class="p">,</span> <span class="nx">videoRef</span><span class="p">,</span> <span class="nx">userAudioOutputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>테마로 나오는 음성을 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Theme.tsx</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">volume</span> <span class="o">=</span> <span class="nx">volume</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">newAudio</span> <span class="o">=</span> <span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
  <span class="p">(</span><span class="nx">newAudio</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">setSinkId</span><span class="p">(</span><span class="nx">userAudioOutputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">volume</span><span class="p">,</span> <span class="nx">userAudioOutputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>여기서 새로 추가된 부분은 setSinkId를 해주는 부분이다. 바로 deviceId를 넣어주면, 해당하는 device로 출력이 바뀌는 것이다. userAudioOutputDevice가 상태이므로, 해당 상태가 바뀔때 마다 sink를 맞춰서 video의 오디오를 변경 할 수 있게 useEffect로 감싸주고, dependency로 넣어주었다.</p>

<p>type을 any로 변경해준 이유는, 컴파일 할 때 setSinkId를 찾지못해 에러를 내기 때문이다. 추후에 Interface를 하나 만들어 setSinkId를 추가하여 방지할 예정이다.</p>

<p>여기서 문제는 호환성 문제이다.
<img width="823" alt="image" src="https://user-images.githubusercontent.com/66371206/188821917-ecf262ae-c9d0-449f-a9d6-e3675c879224.png" />
보시다시피, Chrome, IE, Opera만 공식적으로 지원하기에, 만약 Safari로 접속한다면 바로 백색화면이 뜨는것을 볼 수 있다. 이 경우에는 browser 감지를 우선하여, Safari에서는 해당 함수를 실행하지 않도록 방지해줘야된다.</p>

<h3 id="입력-디바이스-설정">입력 디바이스 설정</h3>

<p>입력디바이스는 생각보다 까다롭다.</p>

<p>우선, 전송하는 mediaTrack이 이미 getUserMedia에서 audio를 default로 가져왔을테니, 여기서 내가 마음대로 media 장비를 바꾼다고 해서 바로 바뀌지 않을 것이다. 그래서 생각해낸 방법은 다음과 같다.</p>

<ol>
  <li>새로운 오디오 트랙을 만들어낸다 (새로 바뀔 입력 device인 트랙)</li>
  <li>현재 송출하고 있는 오디오 트랙을 삭제한다</li>
  <li>내 stream에 새로운 트랙을 추가한다</li>
  <li>보내고 있는 stream에 audio를 찾아 새로운 track으로 교체한다</li>
</ol>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// useCreateMediaStream.tsx</span>
<span class="kd">const</span> <span class="nx">replaceAudioStream</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">audioStream</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
      <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">deviceId</span><span class="p">:</span> <span class="nx">userAudioInputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">});</span>
    <span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">removeTrack</span><span class="p">(</span><span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">addTrack</span><span class="p">(</span><span class="nx">audioStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">pcs</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">pc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">sender</span> <span class="o">=</span> <span class="nx">pcs</span><span class="p">[</span><span class="nx">pc</span><span class="p">].</span><span class="nx">getSenders</span><span class="p">().</span><span class="nx">find</span><span class="p">((</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">track</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audio</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">sender</span><span class="p">.</span><span class="nx">replaceTrack</span><span class="p">(</span><span class="nx">audioStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">failed to change audio stream</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MediaStream</span><span class="p">();</span>
    <span class="nx">setUserMediaStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>그리고 이런 과정을 useEffect로 감싸서, userAudioInput이 바뀔때 마다 선언해준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// settingModal</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">replaceAudioStream</span><span class="p">();</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">replaceAudioStream</span><span class="p">,</span> <span class="nx">userAudioInputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>무사히 마치고 나면 입력 버튼에서, 이어폰 -&gt; 맥북으로 바꾸어도 음성 입력트랙이 잘 바뀌는것을 확인 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188824872-87f9ddaf-9bcc-44fc-955d-f7abe2beb227.gif" alt="ezgif-2-3f5a74b33f" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="javascript" /><category term="web" /><summary type="html"><![CDATA[브라우저에서 입출력 제어]]></summary></entry><entry><title type="html">드랍다운 애니메이션 제작</title><link href="http://localhost:4000/modoco/2022/09/05/dropdown-animation.html" rel="alternate" type="text/html" title="드랍다운 애니메이션 제작" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-05T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/05/dropdown-animation</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/05/dropdown-animation.html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/66371206/188813661-d31a95d8-8a3d-4916-a82e-8a924d5010f2.gif" alt="ezgif-4-8e32a6168e" /></p>

<h2 id="why">Why?</h2>

<p>나만의 드랍다운을 만들어보자.</p>

<p>사실 커스텀 드랍다운은 옛날부터 만들고 싶었지만, 시간 투자 대비 사소한 디자인이여서 그냥 기본 custom selector를 주로 사용했었다.
그러다 이제는 더이상 미룰 수 없기에 커스텀 드랍다운 제작에 나섰다.
우선 이번 드랍다운의 기능은 다음과 같다.</p>

<ol>
  <li>드랍다운 메뉴를 클릭하면, 드랍다운 메뉴(현재 내가 선택 가능한 입출력 디바이스)가 나타난다.</li>
  <li>드랍다운 메뉴를 다시 클릭 혹은 select하면, 드랍다운 메뉴가 사라진다.</li>
  <li>select된 입출력 디바이스는 해당 브라우저 탭에서 오디오 입출력 디바이스가 된다.</li>
</ol>

<p>입출력 디바이스를 선택하는 부분은, 따로 라이브러리를 사용하지 않고, 브라우저의 MediaDevices API를 사용하여 구현하였다.
내용이 생각보다 길어 다음 포스트에 이어서 작성하겠다.</p>

<h3 id="드랍다운-프레임-만들기">드랍다운 프레임 만들기</h3>

<p>드랍다운을 만들기 전에, 먼저 디자인을 해보자.</p>

<p>우선 어떠한 버튼을 누르면 DropDown이 나오게 될지 만들어야 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dropDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">MouseEvent</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="nx">setDropDown</span><span class="p">(</span><span class="o">!</span><span class="nx">showDropDown</span><span class="p">);</span>
<span class="p">};</span>

<span class="o">&lt;</span><span class="nx">DropDownContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">dropDown</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">myDevice</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">myDevice</span><span class="p">?.</span><span class="nx">label</span> <span class="p">:</span> <span class="nx">defaultDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">BottomArrow</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/DropDownContainer&gt;</span><span class="err">;
</span></code></pre></div></div>

<p>여기서 DropDownContainer를 누르면, !setDropDown을 해주어, 껐다 킬 수 있는 toggle을 만들어 주었다. 그렇게 되면, 애니메이션이 없는 누르면 껐다 켜질 수 있는 토글 버튼이 만들어 지게 된다.</p>

<p>그 다음에, <code class="language-plaintext highlighter-rouge">DropDownItem</code>에 내가 원하는 디바이스의 아이템들을 이쁘게 담아둔다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">setDevice</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">device</span><span class="p">:</span> <span class="nx">MediaDeviceInfo</span><span class="p">,</span>
  <span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">MouseEvent</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="nx">setMyDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">);</span>
  <span class="nx">setDropDown</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="p">};</span>

<span class="o">&lt;</span><span class="nx">DropDownItem</span>
  <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceId</span><span class="p">}</span>
  <span class="nx">onClick</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
  <span class="p">}}</span>
<span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/DropDownItem&gt;</span><span class="err">;
</span>
<span class="kd">const</span> <span class="nx">DropDownItem</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  padding: 1rem;
  cursor: pointer;
  &amp;:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>DropDown을 클릭하게 되면, 현재 내가 선택한 디바이스state로 설정한 후 추후에 state변화를 감지하여, 입출력 디바이스로 변경할 것이다. 그리고, 자연스럽게 DropDown을 닫아준다.
디자인적으로 <code class="language-plaintext highlighter-rouge">Text</code>로 디바이스의 이름을 이쁘게 출력할 수 있게 설정해주었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188814527-971f756d-5b06-4b7f-b2ed-0004c1465103.gif" alt="ezgif-4-76b3c89864" /></p>

<p>이렇게 되면, 애니메이션 없는 드랍다운이 완성된다. 하지만 내가 원하는건 그저 토글이 되는 드랍다운이 아닌, 밑으로 죽 내려오는 드랍다운이다.</p>

<h3 id="드랍다운-애니메이션-만들기">드랍다운 애니메이션 만들기</h3>

<p>여기서 내적 고민을 잠깐 하였다… 간단하게 Bootstrap혹은 이미 있는걸 가져다 사용할 지 아니면 직접 CSS로 완성할지… 그러다 내가 원하는 디자인 및 감성으로 제작하기 위해 커스텀 DropDown을 만들게 되었다.</p>

<p>생각보다 자료도 많이 없고, 아이디어를 생각해내기 쉽지 않았다. 그러다 생각해낸 방법은, 드랍다운이 내려오는 창 바로 위에 선을 하나 두고 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>으로 감싼 뒤 toggle되면 드랍다운을 내리는 animation transition을 넣는 방식이였다.</p>

<p>animation은 간단하게 keyframes 로 구성하였다</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">keyframes</span> <span class="nx">dropdown</span> <span class="p">{</span>
    <span class="mi">0</span><span class="o">%</span> <span class="p">{</span>
      <span class="na">transform</span><span class="p">:</span> <span class="nx">translateY</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="o">%</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="mi">100</span><span class="o">%</span> <span class="p">{</span>
      <span class="na">transform</span><span class="p">:</span> <span class="nx">translateY</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="nx">dropdown</span> <span class="mf">0.4</span><span class="nx">s</span> <span class="nx">ease</span><span class="p">;</span>
</code></pre></div></div>

<p>영상으로 보는것이 이해가 쉬울 것 같아 가져왔다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188813331-8fd6e3ca-6739-429b-84d0-cb6250365424.gif" alt="ezgif-4-c2ecb01224" /></p>

<p>보이는것과 같이, 바를 기준으로 드랍다운이 내려오게 설정하였고, <code class="language-plaintext highlighter-rouge">overflow: hidden</code> 을 하지 않았을 때 상황이다.</p>

<p>이 상태에서, <code class="language-plaintext highlighter-rouge">overflow</code> 를 가려서 위에 부분을 안보이게만 하면 이쁜 드랍다운이 완성된다.</p>

<p>주요 코드는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">DropDownContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">dropDown</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">myDevice</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">myDevice</span><span class="p">?.</span><span class="nx">label</span> <span class="p">:</span> <span class="nx">defaultDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">BottomArrow</span> <span class="o">/&gt;</span>
  <span class="p">{</span><span class="nx">showDropDown</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">DropDownPosition</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">DropDown</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">DropDownItem</span>
            <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceId</span><span class="p">}</span>
            <span class="nx">onClick</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="nx">setDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
            <span class="p">}}</span>
          <span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/DropDownItem</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/DropDown</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/DropDownPosition</span><span class="err">&gt;
</span>  <span class="p">)}</span>
<span class="o">&lt;</span><span class="sr">/DropDownContainer&gt;</span><span class="err">;
</span>
<span class="kd">const</span> <span class="nx">DropDownPosition</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  position: absolute;
  top: 5rem;
  left: 0;
  width: 100%;
  overflow: hidden;
  z-index: 1;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DropDown</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  background-color: #31343e;
  @keyframes dropdown {
    0% {
      transform: translateY(-100%);
    }
    100% {
      transform: translateY(0);
    }
  }
  animation: dropdown 0.4s ease;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DropDownItem</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  padding: 1rem;
  cursor: pointer;
  &amp;:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>완성된 버전</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188813661-d31a95d8-8a3d-4916-a82e-8a924d5010f2.gif" alt="ezgif-4-8e32a6168e" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="css" /><category term="javascript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">S3 &amp;amp; CloudFront를 활용한 CDN 서버 만들기</title><link href="http://localhost:4000/til/2022/08/10/aws-cloudFront.html" rel="alternate" type="text/html" title="S3 &amp;amp; CloudFront를 활용한 CDN 서버 만들기" /><published>2022-08-10T00:00:00+09:00</published><updated>2022-08-10T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/08/10/aws-cloudFront</id><content type="html" xml:base="http://localhost:4000/til/2022/08/10/aws-cloudFront.html"><![CDATA[<p><img width="300" alt="image" src="https://user-images.githubusercontent.com/66371206/183911780-90c424e9-e115-44e2-8163-f0b4ab823458.png" /></p>

<p>CDN 서버를 만들기 앞서, 왜 CDN 서버를 만드는지에 대해 알아보자</p>

<h2 id="cdn">CDN</h2>

<h3 id="cdn-이란">CDN 이란?</h3>

<p>콘텐츠 전송 네트워크(CDN)는 데이터 사용량이 많은 애플리케이션의 웹 페이지 로드 속도를 높이는 상호 연결된 서버 네트워크로 콘텐츠 전송 혹은 배포 용도로 사용된다.</p>

<p>실제 사용자는 웹사이트에 접속 시, 해당 웹사이트의 데이터를 다운받기 위해 인터넷으로 접속한다. 하지만, 사용자가 서버에서 떨어질 수록, 웹사이트의 정적 이미지(이미지, 동영상, 음악 등)를 다운받는데 오래 걸리게 됩니다. 이러한 경우, CDN 서버를 전 세계에 있는 엣지 포인트를 두어 캐싱처리를 하여 사용자가 가장 가까운 지역의 엣지 포인트로 접속하게 하여 해당 문제를 해결 할 수 있다.</p>

<h2 id="cdn이-중요한-이유">CDN이 중요한 이유?</h2>

<p>콘텐츠 전송 네트워크(CDN)의 주 목적은 대기 시간을 줄이거나 네트워크 설계로 인해 발생하는 통신 지연을 줄이는 것이다. CDN은 클라이언트와 웹 사이트 서버 간에 중간 서버를 두어 효율성을 높일 수 있다. 이러한 CDN 서버는 클라이언트-서버 통신을 관리하며, 웹 서버에 대한 웹 트래픽을 줄이고, 대역폭 소비를 줄이며, 애플리케이션의 사용자 환경을 개선할 수 있다.</p>

<h2 id="cdn의-장점">CDN의 장점?</h2>

<p>CDN을 사용함으로써 다음과 같은 이득을 볼 수 있다.</p>

<h3 id="페이지-로드-시간-단축">페이지 로드 시간 단축</h3>

<p>페이지 로드 시간이 너무 느리면 웹 사이트 트래픽이 감소할 수 있으므로, 반송률을 줄이고 사용자가 사이트에서 보내는 시간을 늘릴 수 있다.</p>

<h3 id="대역폭-비용-절감">대역폭 비용 절감</h3>

<p>들어오는 모든 웹 사이트 요청은 네트워크 대역폭을 사용하기 때문에 대역폭 비용이 상당히 높다. 캐싱 및 기타 최적화를 통해 CDN은 오리진 서버가 제공해야 하는 데이터의 양을 줄여 웹 사이트 소유자의 호스팅 비용을 절감할 수 있음.</p>

<h3 id="콘텐츠-가용성-제고">콘텐츠 가용성 제고</h3>

<p>한 번에 너무 많은 방문자가 방문하거나 네트워크 하드웨어 오류가 발생하면 웹 사이트가 중단될 수 있습니다. CDN 서비스는 더 많은 웹 트래픽을 처리하고 웹 서버의 로드를 줄일 수 있습니다. 또한 하나 이상의 CDN 서버가 오프라인으로 전환되면 다른 운영 서버가 해당 서버를 대체하여 서비스가 중단되지 않도록 할 수 있습니다.</p>

<h3 id="웹-사이트-보안-강화">웹 사이트 보안 강화</h3>

<p>분산 서비스 거부(DDoS) 공격은 대량의 가짜 트래픽을 웹 사이트로 전송하여 애플리케이션이 작동 중지되도록 만들려고 시도합니다. CDN은 여러 중간 서버 간에 로드를 분산하여 오리진 서버에 미치는 영향을 줄임으로써 이러한 트래픽 급증을 처리할 수 있습니다.</p>

<h2 id="cdn-구현">CDN 구현</h2>

<h3 id="s3-버킷-생성">S3 버킷 생성</h3>

<p>먼저 S3 버킷을 일반적으로 생성한다.
<img width="844" alt="image" src="https://user-images.githubusercontent.com/66371206/183887243-2b1dd102-166b-4e1f-bbc8-846ff990d27f.png" /></p>

<blockquote>
  <p>CloudFront에서 public으로 열어줄 예정이라, 액세스 차단을 해도 된다</p>
</blockquote>

<p><img width="835" alt="image" src="https://user-images.githubusercontent.com/66371206/183887348-9e248bf8-a7c3-4b79-857f-68a672208981.png" /></p>

<p>다음으로, 프로젝트에서 사용할 static 파일들을 넣어준다.</p>

<p><img width="1202" alt="image" src="https://user-images.githubusercontent.com/66371206/183887581-979abfb6-6557-416a-813c-a7cf04a79817.png" /></p>

<p>마지막으로 버킷정책과 CORS 정책을 수립해주면 된다.
<img src="https://user-images.githubusercontent.com/66371206/183889538-902d219b-75f3-48aa-a7b9-541a9a788125.png" alt="image" /></p>

<blockquote>
  <p>버킷정책</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2008-10-17"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PolicyForCloudFrontPrivateContent"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"AWS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity [my id]"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::static.[myDomain].com/*"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"AWS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity [my id]"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::static.[myDomain].com/*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>CORS 정책</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"AllowedHeaders"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"*"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"AllowedMethods"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="w"> </span><span class="s2">"GET"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"AllowedOrigins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"*"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"ExposeHeaders"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"ETag"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-server-side-encryption"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-request-id"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-id-2"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"MaxAgeSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="cloudfront-연동">CloudFront 연동</h3>

<p>아까만든 S3 버킷으로 CloudFront를 생성해주면 된다
<img src="https://user-images.githubusercontent.com/66371206/183890057-0a6c3ebb-9a0f-4886-8113-f6cc92ab5010.png" alt="image" /></p>

<p>여기서 나온 ID를 앞서 버킷 정책에서의 [my id]에 넣어주면 된다.</p>

<p>상세 정책은 다음과 같다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895266-496ab645-577b-45a2-a003-b374bfcabe70.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895316-83d7189c-5310-4d2e-931f-84dd6c21a565.png" alt="image" /></p>

<p>CloudFront를 public으로 열어두고, CORS 정책을 S3에 위임하면 된다.</p>

<h2 id="domain-달기">Domain 달기</h2>

<p>Domain은 AWS 내 Route 53에서 미리 구매한 Domain을 확장해서 사용하였다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895726-b2486618-83c4-48a9-b269-9f4af7a8fb24.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895901-8c996509-d9b8-461d-8ec4-f611672fbb01.png" alt="image" /></p>

<p>그리고 다시 CloudFront로 와서, 생성한 대체 도메인을 선택 후, https 를 사용하기에 해당 SSL 인증서를 등록해주면 static.domain.com 으로 접근 가능한 cdn 서버가 완료가 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183910403-19ac163e-a202-4a59-8430-a81beae4385b.png" alt="image" /></p>

<p>참조
<a href="https://aws.amazon.com/ko/what-is/cdn/">https://aws.amazon.com/ko/what-is/cdn/</a></p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="AWS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">React에서 Volume Slider 구현하기</title><link href="http://localhost:4000/modoco/2022/07/31/react-volume-slider.html" rel="alternate" type="text/html" title="React에서 Volume Slider 구현하기" /><published>2022-07-31T00:00:00+09:00</published><updated>2022-07-31T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/31/react-volume-slider</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/31/react-volume-slider.html"><![CDATA[<h2 id="react-볼륨-슬라이더-만들기">React 볼륨 슬라이더 만들기</h2>

<p>프로젝트를 진행중에, 이러한 시안이 날라왔다. 대충 볼륨을 컨트롤 할 수 있는 Slider를 제작하는 것.</p>

<p><img width="758" alt="image" src="https://user-images.githubusercontent.com/66371206/182016262-70befb1d-aa0f-4e68-b26d-4c61d20f1199.png" /></p>

<p>우선 여러가지 선택사항이 있는데, material UI를 사용하여, 간단하고 이쁜 슬라이더를 가져다 쓰는것, 아니면 직접 구현이 있었다.</p>

<p>우선 라이브러리를 쓰는것 보다 구현을 하는것을 좋아하기에, 한번 알아보았고, <code class="language-plaintext highlighter-rouge">input type</code> 을 <code class="language-plaintext highlighter-rouge">range</code>로 선택하여 간단하게 구현할 수 있음을 알게되었다.</p>

<h3 id="vanilla-html로-구현">Vanilla HTML로 구현</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">input</span>
  <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">range</span><span class="dl">"</span>
  <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
  <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
  <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">gray</span><span class="dl">"</span>
  <span class="nx">step</span><span class="o">=</span><span class="p">{</span><span class="mf">0.02</span><span class="p">}</span>
  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span>
  <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setVolume</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">valueAsNumber</span><span class="p">);</span>
  <span class="p">}}</span>
<span class="sr">/</span><span class="err">&gt;
</span></code></pre></div></div>

<p>간단하게 구현을 해보면 위의 코드와 같다.</p>

<p>setVolume같은 경우에는, state로 관리하기 위해서 넣었고, step 기준으로 volume bar를 컨트롤 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182019180-9500a561-ee79-468d-b97b-220abb93d398.gif" alt="ezgif-3-5e9fa8f258" /></p>

<p>괜찮아 보이지만, 여러 문제가 있다.</p>

<ol>
  <li>컨트롤 하는 동그라미 (thumb) 도 파란색이 마음에 안든다</li>
  <li>볼륨이 0이 됐을 때 투명해졌으면 좋겠다</li>
  <li>볼륨이 올라갈때 색이 파란색이 마음에 안든다</li>
</ol>

<p>이러한 문제를 해결하기 위해 CSS에서 노력을 해주어야 한다.</p>

<h3 id="css-적용">CSS 적용</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">VolumeControl</span> <span class="nx">volume</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span> <span class="o">*</span> <span class="mi">100</span><span class="p">}</span> <span class="nx">speaker</span><span class="o">=</span><span class="p">{</span><span class="nx">userSpeaker</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">input</span>
    <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">range</span><span class="dl">"</span>
    <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
    <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
    <span class="nx">step</span><span class="o">=</span><span class="p">{</span><span class="mf">0.02</span><span class="p">}</span>
    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span>
    <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setVolume</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">valueAsNumber</span><span class="p">);</span>
    <span class="p">}}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/VolumeControl</span><span class="err">&gt;
</span></code></pre></div></div>

<p>우선 styled로 크게 VolumeControl이라는 component로 분할하였고, speaker로 스피커가 꺼져있음을 판단할 수 있고, volume으로 나의 speaker 크기를 판단할 수 있게 만들었다. 여기서 <code class="language-plaintext highlighter-rouge">volume === 0</code> 인 경우 speaker 가 꺼져있다고 판단할것이다.</p>

<h4 id="컨트롤-하는-동그라미-thumb-도-파란색이-마음에-안든다">컨트롤 하는 동그라미 (thumb) 도 파란색이 마음에 안든다</h4>

<p>우선 처음에는 1번 문제를 해결하기 위해 slider-thumb를 손봐주었다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="nd">::-webkit-slider-thumb</span> <span class="p">{</span>
      <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="nl">width</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
      <span class="nl">background</span><span class="p">:</span> <span class="err">${</span><span class="p">(</span><span class="n">props</span><span class="p">)</span> <span class="err">=&gt;</span> <span class="p">(</span><span class="n">props</span><span class="p">.</span><span class="n">volume</span> <span class="err">?</span> <span class="s1">"#d9d9d9"</span> <span class="p">:</span> <span class="s1">"#E5E7EB"</span><span class="p">)}</span><span class="o">;</span>
      <span class="nt">margin-top</span><span class="o">:</span> <span class="nt">-5px</span><span class="o">;</span>
      <span class="nt">cursor</span><span class="o">:</span> <span class="nt">pointer</span><span class="o">;</span>
    <span class="err">}</span>
</code></pre></div></div>

<p>해당코드는 별 문제 없이 가능하다. 그냥 volume 이 0이라면 볼륨이 꺼졌을 때의 색상이 나올 수 있게 지정하고 끝이다.</p>

<h4 id="볼륨이-0이-됐을-때-투명해졌으면-좋겠다">볼륨이 0이 됐을 때 투명해졌으면 좋겠다</h4>

<p>이부분도 그렇게 어렵지 않다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">&amp;</span><span class="nd">::-webkit-slider-runnable-track</span> <span class="p">{</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">0.6rem</span><span class="p">;</span>
      <span class="nl">opacity</span><span class="p">:</span> <span class="err">${</span><span class="p">(</span><span class="n">props</span><span class="p">)</span> <span class="err">=&gt;</span> <span class="p">(</span><span class="n">props</span><span class="p">.</span><span class="n">volume</span> <span class="err">&amp;&amp;</span> <span class="n">props</span><span class="p">.</span><span class="n">speaker</span> <span class="err">?</span> <span class="s1">"1"</span> <span class="p">:</span> <span class="s1">"0.5"</span><span class="p">)}</span><span class="o">;</span>
    <span class="err">}</span>
</code></pre></div></div>

<p>그냥 opacity를 volume과 speaker가 존재 시 1, 아니면 0.5를 줘서 간단히 해결하였다.</p>

<h4 id="볼륨이-올라갈때-색이-파란색이-마음에-안든다">볼륨이 올라갈때 색이 파란색이 마음에 안든다</h4>

<p>이부분이 상당히 애를 먹었다. 우선 여러번의 삽질과 해결법이 존재하였고, 나는 나름 정말 우아한 해결법을 찾았다고 생각한다.</p>

<p>우선 첫번째는 너무나 쉬운 material-UI 를 사용하는것이다. 하지만, 이미 돌아가기엔, 너무 많이 구현을 해버린 나… 끝까지 바닐라로 해결해보았다.</p>

<p>두번째는 내장 CSS 옵션을 사용하는 방법. CSS 는 브라우저에 의존적이기에, <code class="language-plaintext highlighter-rouge">fill-lower, fill-upper</code> 를 사용하여 색 지정이 되는 브라우저가 있다고 한다. 하지만 이건 IE만 지원을 하며, 크롬이나 파이어폭스는 지원하지 않아, 무시하였다.</p>

<p>혹시라도 사용하고 싶다면</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-ms-fill-lower</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-ms-fill-upper</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이러한 방식을 사용하면 된다.</p>

<p>세번째는 인터넷에 떠돌아 다니는 방법을 사용하는 것. 바로 thumb의 box-shadow를 두어 0부터 thumb까지 전부 색칠하는 방법이다. 그리고 남는 부분은 input 전체에 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>을 두어 새어 나오는것을 방지하는 방법이다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span> <span class="p">{</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#9a905d</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-webkit-slider-runnable-track</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#13bba4</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-webkit-slider-thumb</span> <span class="p">{</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#434343</span><span class="p">;</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">-80px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">80px</span> <span class="m">#43e5f7</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이건 괜찮아 보이지만 문제가 많다. 우선 완성된 결과물부터 보자.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182020050-bbbdd186-67b7-45b0-849f-fc0eec3c075b.gif" alt="ezgif-3-875a95cf4c" /></p>

<p>우선 box shadow를 활용하기에, 동그라미인 thumb 를 사용할 수 없으며 overflow-hidden이 필수적으로 필요해 원하는 이쁜 디자인을 절대 만들 수 없다. 그래서 더 고민을 하고 linear-gradient를 활용한 우아한 해결법을 찾았다.</p>

<p>linear-gradient 가 단순히 서서히 적용되지 않고, 완전 다른 색으로 hard line을 그릴 수 있는 방법을 이용하였다. 코드를 보면 다음과 같다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">background</span><span class="o">:</span> <span class="err">$</span><span class="p">{</span><span class="err">(props)</span> <span class="err">=&gt;</span>
        <span class="err">props.volume</span>
          <span class="err">?</span> <span class="err">`linear-gradient(to</span> <span class="err">right,</span> <span class="err">#D9D9D9</span> <span class="err">${props.volume</span><span class="p">}</span><span class="o">%,</span> <span class="nt">rgba</span><span class="o">(</span><span class="err">229</span><span class="o">,</span> <span class="err">231</span><span class="o">,</span> <span class="err">235</span><span class="o">,</span> <span class="err">0</span><span class="o">.</span><span class="err">5</span><span class="o">)</span>
 <span class="err">$</span><span class="p">{</span><span class="err">props.volume</span><span class="p">}</span><span class="o">%</span> <span class="err">100</span><span class="o">%)</span><span class="err">`</span>
          <span class="o">:</span> <span class="s1">"#E5E7EB"</span><span class="err">}</span><span class="o">;</span>
</code></pre></div></div>

<p>우선 볼륨을 0 ~ 100 의 수를 주므로, 해당하는 볼륨 % 까지, <code class="language-plaintext highlighter-rouge">#d9d9d9</code>의 색으로, 그 다음부터는 rgba(229, 231, 235, 0.5) 에 해당하는 색으로 지정하였다. 그렇게 완성된 볼륨 슬라이더는 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182032799-34a4b224-7e92-4388-8d45-58db2714bad0.gif" alt="ezgif-3-10012500c9" /></p>

<blockquote>
  <p>최종적으로 적용된 CSS 는 다음과 같다.</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">VolumeControl</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">volume</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">speaker</span><span class="p">:</span> <span class="nx">boolean</span> <span class="p">}</span><span class="o">&gt;</span><span class="s2">`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-left: 1rem;
  width: 6rem;

  input[type='range'] {
    -webkit-appearance: none;
    height: 100%;
    background: transparent;

    &amp;:focus {
      outline: none;
    }

    //WEBKIT
    &amp;::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 16px;
      width: 16px;
      border-radius: 50%;
      background: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">#d9d9d9</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">#E5E7EB</span><span class="dl">"</span><span class="p">)}</span><span class="s2">;
      margin-top: -5px;
      cursor: pointer;
    }

    &amp;::-webkit-slider-runnable-track {
      height: 0.6rem;
      background: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">props</span><span class="p">.</span><span class="nx">volume</span>
          <span class="p">?</span> <span class="s2">`linear-gradient(to right, #D9D9D9 </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span><span class="p">}</span><span class="s2">%, rgba(229, 231, 235, 0.5)
 </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span><span class="p">}</span><span class="s2">% 100%)`</span>
          <span class="p">:</span> <span class="dl">"</span><span class="s2">#E5E7EB</span><span class="dl">"</span><span class="p">}</span><span class="s2">;
      opacity: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="o">&amp;&amp;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">speaker</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">0.5</span><span class="dl">"</span><span class="p">)}</span><span class="s2">;
      border-radius: 3rem;
      transition: all 0.5s;
      cursor: pointer;
    }
`</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="React" /><summary type="html"><![CDATA[React 볼륨 슬라이더 만들기]]></summary></entry><entry><title type="html">React + Typescript 에서 Horizontal Scroll 구현</title><link href="http://localhost:4000/modoco/2022/07/11/react-horizontal-scroll.html" rel="alternate" type="text/html" title="React + Typescript 에서 Horizontal Scroll 구현" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/11/react-horizontal-scroll</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/11/react-horizontal-scroll.html"><![CDATA[<h2 id="react-에서-가로-스크롤-구현을-해보자">React 에서 가로 스크롤 구현을 해보자</h2>

<p>좌우 스크롤은 직접 구현해도 되지만, 누군가 이쁜 library를 만들어 두었길래, 바로 사용하였다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add react-horizontal-scrolling-menu
</code></pre></div></div>

<p>공식 페이지나 깃허브에 상세하게 설명이 있으니, 참고해도 좋아보임</p>

<p><a href="https://www.npmjs.com/package/react-horizontal-scrolling-menu">공식 페이지</a>
<a href="https://github.com/asmyshlyaev177/react-horizontal-scrolling-menu#readme">깃허브</a></p>

<h2 id="사용">사용</h2>

<h3 id="scrollmenu">ScrollMenu</h3>

<p>ScrollMenu라는 컴포넌트에 Block을 설정해두면, 바로 가로스크롤을 사용할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ScrollMenu</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-horizontal-scrolling-menu</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">LeftArrow</span><span class="p">,</span> <span class="nx">RightArrow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Arrow</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Block</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Block</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Scrolls</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ScrollMenu</span> <span class="nx">LeftArrow</span><span class="o">=</span><span class="p">{</span><span class="nx">LeftArrow</span><span class="p">}</span> <span class="nx">RightArrow</span><span class="o">=</span><span class="p">{</span><span class="nx">RightArrow</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="p">{</span><span class="nx">Data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
                <span class="p">({</span> <span class="nx">nickname</span><span class="p">,</span> <span class="nx">avatar</span><span class="p">,</span> <span class="nx">itemId</span> <span class="p">}:</span> <span class="nx">Interface</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span>
                        <span class="o">&lt;</span><span class="nx">Block</span>
                            <span class="nx">itemId</span><span class="o">=</span><span class="p">{</span><span class="nx">itemId</span><span class="p">}</span>
                            <span class="nx">nickname</span><span class="o">=</span><span class="p">{</span><span class="nx">nickname</span><span class="p">}</span>
                            <span class="nx">avatar</span><span class="o">=</span><span class="p">{</span><span class="nx">avatar</span><span class="p">}</span>
                        <span class="sr">/</span><span class="err">&gt;
</span>                    <span class="p">);</span>
                <span class="p">},</span>
            <span class="p">)}</span>
        <span class="o">&lt;</span><span class="sr">/ScrollMenu</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">Container</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  overflow: hidden;
  .react-horizontal-scrolling-menu--scroll-container::-webkit-scrollbar {
    display: none;
  }
  .react-horizontal-scrolling-menu--scroll-container {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>일반적으로 이렇게 구현을 하면, horizontal-scrolling-scroll-bar가 생기게 된다. 하지만, 일반적으로 가로 스크롤바를 사용하는 경우에 안그래도 비좁은데 스크롤바 까지 생겨버리면 너무 못생겨지기 때문에 삭제 코드를 넣어둔다. 그게 위 Container에서 선언한 style 이다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.react-horizontal-scrolling-menu--scroll-container</span><span class="nd">::-webkit-scrollbar</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.react-horizontal-scrolling-menu--scroll-container</span> <span class="p">{</span>
  <span class="nl">-ms-overflow-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="c">/* IE and Edge */</span>
  <span class="py">scrollbar-width</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="c">/* Firefox */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게만 구현을 해도, 일반적으로는 문제가 없다. 하지만, 마우스를 쓰는 유저에게 문제가 생기는데, 마우스는 버티컬 움직임을 제어 할 수 없어 우측방향 스크롤이 불가능하게 된다. 심지어, 위에서 못생겼다고 스크롤바까지 없애버린 상황! 그걸 해결하기위해 우측 좌측으로 하나씩 화살표를 넣어 버튼형식으로 이동할 수 있게 설정해 두었다.</p>

<h3 id="arrow">Arrow</h3>

<p>Block은 그냥 일반적으로 디자인을 해도 상관이 없으니 넘어가고, Arrow 부분을 살펴보겠다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">VisibilityContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-horizontal-scrolling-menu</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Left</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
  <span class="nx">onClick</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
  <span class="nl">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">show</span><span class="p">,</span> <span class="nx">setShow</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">show</span> <span class="p">?</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Button</span>
      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onClick</span><span class="p">}</span>
      <span class="nx">onMouseLeave</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setShow</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="p">}}</span>
    <span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>  <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Transparent</span>
      <span class="nx">onMouseEnter</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setShow</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="p">}}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Transparent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 10rem;
  position: absolute;
  z-index: 999;
  height: 50rem;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  cursor: pointer;
  color: white;
  cursor: pointer;
`</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">LeftArrow</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">scrollPrev</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">VisibilityContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Left</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">scrollPrev</span><span class="p">()}</span><span class="o">&gt;</span><span class="err">←</span><span class="o">&lt;</span><span class="sr">/Left&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<p>모든 코드를 다 넣자니, 코드가 너무 길어져 나름 핵심 부분만 가져왔다.</p>

<p>이 library에서 제공하는 기능 중 제일 마음에 드는것이 바로 VisibilityContext 이다. 즉 해당하는 block이 화면상에서 보이는지 안보이는지 체크를 해주는 기능인데, 이게 Arrow를 사용하는 핵심이 된다.</p>

<p>그리고 장황하게 써두었지만, 사실 핵심 코드는 아래만 보면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">LeftArrow</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">scrollPrev</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">VisibilityContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Left</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">scrollPrev</span><span class="p">()}</span><span class="o">&gt;</span><span class="err">←</span><span class="o">&lt;</span><span class="sr">/Left&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<p>즉 onClick 이벤트로 클릭을 하면 VisibilityContext 즉 현재 보이지 않는 곳으로 scroll을 움직이게 할 수 있는 설정이다. 이 기능을 좌 우측으로 두어서 깔끔하게 좌우 스크롤바를 구현할 수 있다.</p>

<h2 id="완성본">완성본</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/178254938-aadfeab6-89fb-4af4-8813-cf2278b31e27.gif" alt="ezgif-3-ca65f790f8" /></p>

<p>부드럽게 잘 작동한다..!</p>

<p>만족 ㅎㅎ</p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[React 에서 가로 스크롤 구현을 해보자]]></summary></entry><entry><title type="html">Typescript React Styled-Component 에서 Font 적용하기</title><link href="http://localhost:4000/modoco/2022/07/09/typescript-font.html" rel="alternate" type="text/html" title="Typescript React Styled-Component 에서 Font 적용하기" /><published>2022-07-09T00:00:00+09:00</published><updated>2022-07-09T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/09/typescript-font</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/09/typescript-font.html"><![CDATA[<h2 id="typescript-react-styled-component-환경에서-font-적용하기">Typescript, React, Styled-Component 환경에서 Font 적용하기</h2>

<p>프로젝트를 진행하다보니, Font를 설정해야 되는데, 일반적으로 App.css를 사용하는 방식이 아니라, Styled-Component를 사용했기에 조금 더 복잡했다.</p>

<h2 id="적용순서">적용순서</h2>

<h3 id="font-다운받기">Font 다운받기</h3>

<p>font는 OpenSource 나 원하는곳에서 잘 다운 받으면 된다. 나는 <a href="https://noonnu.cc">눈누</a>라는 폰트 저장소를 애용한다. 저작권에 주의하며 다운받자.</p>

<p>다운을 받을 때, ttf, otf, woff 중 어떤것을 받을지 선택 할 수 있는데, 우선 ttf로 적용하였다.</p>

<p><code class="language-plaintext highlighter-rouge">ttf</code>는 true type font <code class="language-plaintext highlighter-rouge">otf</code>는 open type font 으로 pc에 설치하는 폰트이며 <code class="language-plaintext highlighter-rouge">woff</code>는 web open font format 으로 웹에서 사용하는 포맷이다.</p>

<blockquote>
  <p>로딩속도는 woff2 &gt; woff &gt; ttf 순서</p>
</blockquote>

<p>그럼 잘 다운받은 폰트를 src폴더 안에 fonts라는 디렉토리를 만들어 잘 저장해둔다.</p>

<p>프로젝트 내부의 폴더구조는 다음과 같다
<img width="273" alt="image" src="https://user-images.githubusercontent.com/66371206/178093254-5ca4bbff-b528-41a3-a7c0-d17afe8a2d9d.png" /></p>

<h3 id="globalstyle에-font-추가">GlobalStyle에 Font 추가</h3>

<p>원래는 App.css에 font를 적용시켜 <code class="language-plaintext highlighter-rouge">&lt;App&gt;</code>에 감싸주기만 하면 됐다. 하지만, 지금은 Styled-Component를 사용하므로 GlobalStyle로 잘 적용시켜보자.</p>

<p>우선 styles 디렉토리에 있는 GlobalStyle을 담당하고있는 global.ts에 사용하고싶은 font들을 추가해주었다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// global.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createGlobalStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFBold</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFBold.ttf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFMedium</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFMedium.ttf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFLight</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFLight.ttf</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">GlobalStyle</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`
  @font-face {
        font-family: 'GmarketSansTTFBold';
        src: local('GmarketSansTTFBold'), local('GmarketSansTTFBold');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFBold</span><span class="p">}</span><span class="s2">) format('truetype');
  }
  @font-face {
        font-family: 'GmarketSansTTFMedium';
        src: local('GmarketSansTTFMedium'), local('GmarketSansTTFMedium');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFMedium</span><span class="p">}</span><span class="s2">) format('truetype');
  }
  @font-face {
        font-family: 'GmarketSansTTFLight';
        src: local('GmarketSansTTFLight'), local('GmarketSansTTFLight');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFLight</span><span class="p">}</span><span class="s2">) format('truetype');
  }
</span></code></pre></div></div>

<p>여기서 문제가 하나 생기는데, <code class="language-plaintext highlighter-rouge">.ttf</code> 파일을 제대로 import 해줄 수 없다. 해당 문제는 src의 디렉토리위에 <code class="language-plaintext highlighter-rouge">fonts.d.ts</code>를 만들어 해당 타입의 모듈을 import 해줄 수 있게 수정해주면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fonts.d.ts</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">*.ttf</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="globalstyle-적용">GlobalStyle 적용</h3>

<p>이제 index.tsx에 폰트들이 추가된 GlobalStyle을 잘 둘러주기만 하면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GlobalStyle</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./styles/global</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">rootElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">rootElement</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to find the root element</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">createRoot</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">);</span>
<span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">GlobalStyle</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="sr">/StrictMode</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="사용하고-싶은-font를-component에-적용">사용하고 싶은 Font를 Component에 적용</h3>

<p>이제 해당 App 안에 있는 컴포넌트에서 자유롭게 폰트를 꺼내서 사용할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.tsx</span>
<span class="p">...</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">p</span><span class="s2">`
  margin-top: 5rem;
  height: 10rem;
  font-size: 10rem;
  font-family: GmarketSansTTFLight, sans-serif, Arial;
`</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="651" alt="image" src="https://user-images.githubusercontent.com/66371206/178093400-3c5fa099-f561-4f21-954e-650dfa98b0b5.png" /></p>

<p>잘 적용된 모습을 볼 수 있다.</p>

<h2 id="후기">후기</h2>

<p>이번에는 우선 ttf로 통일을 했지만, 역시나 개선을 위해 woff로 하는것이 좋아보인다. 튜닝을 하게된다면, 웹폰트로 지정을 해서 로딩속도를 개선해보자.</p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[Typescript, React, Styled-Component 환경에서 Font 적용하기]]></summary></entry><entry><title type="html">Typescript 에서 Zustand 배우기</title><link href="http://localhost:4000/modoco/2022/07/03/zustand.html" rel="alternate" type="text/html" title="Typescript 에서 Zustand 배우기" /><published>2022-07-03T00:00:00+09:00</published><updated>2022-07-03T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/03/zustand</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/03/zustand.html"><![CDATA[<h2 id="왜-zustand">왜 Zustand?</h2>

<p>Zustand에 대하여 공부하기 앞서, 왜 Zustand인지 알아보도록 하겠다. 우선, Zustand vs Recoil vs Jotai vs Redux vs Context API 등 전역상태관리에 대해 여러가지 방법들이 존재한다. 그중에 Zustand를 택한건 크게 두가지가 있다.</p>

<ol>
  <li>쉬움</li>
  <li>트렌드임</li>
</ol>

<p>우선 너무 쉽다. Recoil도 배웠을 때는 어렵지 않았다. 솔직히 Redux를 써보고 Recoil을 사용해서 인지는 몰라도, 한번 RecoilProvider로 감싸기만 하면, const state를 관리할 수 있다. 하지만 Redux는 여기서 Provider로 감싸지도 않고 사용할 수 있다. 그냥 상태관리를 해주는 파일을 하나 만들어, 여기서만 정해진 함수로 상태를 바꿀 수 있게 관리를 해주면, 전역 상태관리로 사용할 수 있다.</p>

<p>다음은 트렌드이다. 처음에는 아무리 그래도 React에서 100% 호환되게 서포트 해주는 Recoil이 다운로드수나 인기상으로 더 높다고 생각했다. 그렇게 전역 상태관리로 Recoil을 선택하고, 마지막으로 npm trend를 확인했는데, Zustand가 압도적으로 높았다. 여기서, Zustand를 써보기로 결심하고 공부를 시작해보았다.</p>

<p><img width="1387" alt="image" src="https://user-images.githubusercontent.com/66371206/177025269-8f208795-796f-4f38-88a9-84452da95117.png" /></p>

<blockquote>
  <p>놀라운 Zustand의 성장세..!</p>
</blockquote>

<h2 id="적용">적용</h2>

<p>간단하게 전역 상태 관리를 해보자</p>

<p>우선 간단하게 ID를 메인 페이지에서 입력하면, 추후에 모든 페이지에 적용이 되게 관리하고 싶어, 전역 상태를 채용했다고 가정해보겠다. 그럼 구현해야 되는 순서는 다음과 같다.</p>

<ol>
  <li>아이디를 저장하는 zustand 객체 생성</li>
  <li>ID 입력하는 페이지 구성</li>
  <li>다음 페이지에 방금 입력한 ID가 잘 적용 되었는지 확인</li>
</ol>

<h3 id="아이디를-저장하는-zustand-객체-rngus">아이디를 저장하는 zustand 객체 rngus</h3>

<blockquote>
  <p>typescript에 맞춰 interface를 만드는것에 주의</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ID</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">setId</span><span class="p">:</span> <span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">IdStore</span> <span class="o">=</span> <span class="nx">create</span><span class="o">&lt;</span><span class="nx">ID</span><span class="o">&gt;</span><span class="p">((</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">init</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">setId</span><span class="p">:</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">id</span> <span class="p">}));</span>
  <span class="p">},</span>
  <span class="cm">/*
    setId: (by) =&gt; {
    set((state) =&gt; ({ id: by }));
  }, // 이게 더 보기 편할 수 있음
  */</span>
<span class="p">}));</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">IdStore</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>입력하지 않으면 페이지가 넘어가지 않음</p>
</blockquote>

<h3 id="id-입력하는-페이지-구성">ID 입력하는 페이지 구성</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">InputID</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nx">useNavigate</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">setId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">IdStore</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FormEvent</span><span class="o">&lt;</span><span class="nx">HTMLFormElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="nx">navigate</span><span class="p">(</span><span class="s2">`/lobby`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setId</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Input</span>
        <span class="nx">autoComplete</span><span class="o">=</span><span class="dl">"</span><span class="s2">off</span><span class="dl">"</span>
        <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">onChange</span><span class="p">}</span>
        <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Enter ID</span><span class="dl">"</span>
        <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">nickname</span><span class="dl">"</span>
      <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="o">!</span><span class="nx">id</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Enter</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Form</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="다음-페이지에-방금-입력한-id가-잘-적용-되었는지-확인">다음 페이지에 방금 입력한 ID가 잘 적용 되었는지 확인</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Lobby</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">IdStore</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Header</span><span class="o">&gt;</span><span class="nx">Lobby</span><span class="o">&lt;</span><span class="sr">/Header</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">Me</span><span class="o">&gt;</span><span class="nx">name</span><span class="p">:</span> <span class="p">{</span><span class="nx">id</span><span class="p">}</span> <span class="o">&lt;</span><span class="sr">/Me</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 구성해서 확인해보았다.</p>

<h3 id="결과물">결과물</h3>

<p><img src="https://user-images.githubusercontent.com/66371206/177069313-1c86d716-465e-4c0b-87a0-779f79e1d73e.gif" alt="ezgif-4-300bae9264" /></p>

<p>그리고, 실시간으로 전역상태가 관리되고 있는지 확인하기 위해 한 페이지에서 다른 컴포넌트에서 한 전역상태를 가지고 테스트도 해 보았다.</p>

<h3 id="bearcounter-state">BearCounter State</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">BearState</span> <span class="p">{</span>
  <span class="nl">bears</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">increase</span><span class="p">:</span> <span class="p">(</span><span class="nx">by</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">useStore</span> <span class="o">=</span> <span class="nx">create</span><span class="o">&lt;</span><span class="nx">BearState</span><span class="o">&gt;</span><span class="p">()((</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">increase</span><span class="p">:</span> <span class="p">(</span><span class="nx">by</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">bears</span> <span class="o">+</span> <span class="nx">by</span> <span class="p">})),</span>
<span class="p">}));</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useStore</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="bearcounter-component">BearCounter Component</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TestOne</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nx">useNavigate</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">bears</span><span class="p">,</span> <span class="nx">increase</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useStore</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">id</span><span class="p">,</span> <span class="nx">setId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="c1">// const increasePopulation = useStore((state) =&gt; state.increase);</span>

  <span class="kd">const</span> <span class="nx">formHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FormEvent</span><span class="o">&lt;</span><span class="nx">HTMLFormElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">increase</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="nx">formHandler</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">button</span> <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">incrase</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">TestTwo</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TestOne</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="testtwo">TestTwo</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TestTwo</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">bears</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useStore</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">bears</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TestTwo</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/66371206/177069574-5e7cd794-b86a-4282-9b5a-1c998b4862b6.gif" alt="ezgif-4-4fc22081fc" /></p>

<p>잘 되는 모습을 볼 수 있다</p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[왜 Zustand?]]></summary></entry><entry><title type="html">Recoil 배우기</title><link href="http://localhost:4000/til/2022/07/01/recoil.html" rel="alternate" type="text/html" title="Recoil 배우기" /><published>2022-07-01T00:00:00+09:00</published><updated>2022-07-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/07/01/recoil</id><content type="html" xml:base="http://localhost:4000/til/2022/07/01/recoil.html"><![CDATA[<h2 id="why-recoil">Why Recoil?</h2>

<p>왜 Recoil을 사용할까?</p>

<p>우선 전역 상태관리는 개발을 하다보면 무조건 필요로 하게 된다. 특히나 전에 만들었던 프로젝트 경우에는 게임이였기 때문에, 더욱 필요했고, 이번에도 적지만 id 같은 경우에 모든 페이지마다 변경되는 state이다 보니 전역상태관리가 필요로 하게 된다.</p>

<p>recoil공식 설명에서는 사용하는 이유 즉 탄생배경을 다음과 같이 설명한다.</p>

<ol>
  <li>컴포넌트의 상태는 공통된 상위요소까지만 끌어 올릴 수 있어, 이 과정에서 거대한 트리가 다시 렌더링 되는 효과가 나온다.</li>
  <li>Context는 단일 값만 가질 수 있어, Consumer가 가지는 여러 값들의 집합을 담을 수 없다.</li>
  <li>두 가지 특성이 트리의 상단부터 말단까지 이어져야 돼서 분할이 어려워진다.</li>
</ol>

<p>즉 Recoil은 해당 문제를 해결하기 위해 orthogonal 하지만 본직적인 방향 그래프를 정의해서 React 트리에 붙이게 된다. 즉 그래프의 뿌리 (atoms) 으로부터 시작해 Selectors(순수함수)를 거쳐 컴포넌트로 흐르게 된다.</p>

<p>즉 Recoil의 사용함으로써 가져가는 장점은 다음과 같다.</p>

<ol>
  <li>동시성와 React의 호환성</li>
  <li>상태정의 분산이 가능 -&gt; 코드 분할이 쉽다</li>
  <li>컴포넌트를 수정하지 않고, 파생된 데이터로 대체 가능</li>
  <li>공유된 상태도 React local state로 간단하게 사용 가능</li>
</ol>

<h2 id="atom">Atom</h2>

<p>Recoil의 상태를 나타내는 상태 단위라 볼 수 있다.</p>

<h3 id="atom-생성">Atom 생성</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">atom</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">({</span>
  <span class="na">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="na">default</span><span class="p">:</span> <span class="nx">T</span> <span class="o">|</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">RecoilValue</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span>

  <span class="nx">effects_UNSTABLE</span><span class="p">?:</span> <span class="nx">$ReadOnlyArray</span><span class="o">&lt;</span><span class="nx">AtomEffect</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;&gt;</span><span class="p">,</span>

  <span class="nx">dangerouslyAllowMutability</span><span class="p">?:</span> <span class="nx">boolean</span><span class="p">,</span>
<span class="p">}):</span> <span class="nx">RecoilState</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>위와 유사하게, atom을 선언 해 주어야 atom 함수를 사용 할 수 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">key</code>는 atom의 unique한 값</li>
  <li><code class="language-plaintext highlighter-rouge">default</code>는 초기값 혹은 selector, promise의 객체</li>
  <li><code class="language-plaintext highlighter-rouge">effect_UNSTABLE</code>는 Atom Effects 배열</li>
  <li><code class="language-plaintext highlighter-rouge">dangerouslyAllowMutability</code>는 atom이 변경될 경우, 등록된 컴포넌트에게 알리지 않고 리렌더링을 방지하는 옵션</li>
</ul>

<h3 id="atom의-hook">Atom의 Hook</h3>

<p>먼저 atom을 생성해야된다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myState</span> <span class="o">=</span> <span class="nx">atom</span><span class="p">({</span>
  <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">uniqueKey</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="userecoilstate">useRecoilState</h4>

<p>atom을 읽고 쓰기 위해 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">val</span><span class="p">,</span> <span class="nx">setVal</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useRecoilState</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="userecoilvalue">useRecoilValue</h4>

<p>atom을 읽을 때 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">useRecoilValue</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="usesetrecoilstate">useSetRecoilState</h4>

<p>atom에 쓰기 위해 사용
업데이트 할 수 있는 setter를 리턴한다
컴포넌트를 atom에 등록하지 않아, 변경이 되어도 리렌더링 되지는 않는다. -&gt; 즉 atom을 사용하지 않는 경우 이 훅을 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">setVal</span> <span class="o">=</span> <span class="nx">useSetRecoilState</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="useresetrecoilstate">useResetRecoilState</h4>

<p>atom을 default를 초기화한다
비동기 setter를 리턴하며, 컴포넌트 리렌더링이 되지는 않는다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">reset</span> <span class="o">=</span> <span class="nx">useResetRecoilState</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="userecoilcallback">useRecoilCallback</h4>

<p>Recoil 상태에서 callback시킬 수 있는 훅</p>

<h2 id="recoilroot">RecoilRoot</h2>

<p>Atom 컨텍스트를 제공해주며, hook의 조상으로 사용된다.</p>

<p>override가 <code class="language-plaintext highlighter-rouge">true</code>라면 새로운 Scope 생성</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">RecoilRoot</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">recoil</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">RecoilRoot</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Components</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/RecoilRoot</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="recoilselector">RecoilSelector</h2>

<p>atom의 상태에서 파생된 데이터로, 상태에 의존하는 동적인 데이터이다.</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[Why Recoil?]]></summary></entry></feed>