<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-01-18T09:23:42+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi&apos;s tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">자바스크립트 함수의 심화학습</title><link href="http://localhost:4000/javascript/2022/01/18/javascript-functions.html" rel="alternate" type="text/html" title="자바스크립트 함수의 심화학습" /><published>2022-01-18T00:00:00+09:00</published><updated>2022-01-18T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2022/01/18/javascript-functions</id><content type="html" xml:base="http://localhost:4000/javascript/2022/01/18/javascript-functions.html"><![CDATA[<h2 id="나머지-매개변수와-스프레드-문법">나머지 매개변수와 스프레드 문법</h2>]]></content><author><name>071yoon</name></author><category term="javascript" /><category term="javascript" /><category term="typescript" /><category term="TIL" /><category term="functions" /><summary type="html"><![CDATA[나머지 매개변수와 스프레드 문법]]></summary></entry><entry><title type="html">자바스크립트 자료구조와 자료형</title><link href="http://localhost:4000/javascript/2022/01/17/javascript-data-structure.html" rel="alternate" type="text/html" title="자바스크립트 자료구조와 자료형" /><published>2022-01-17T00:00:00+09:00</published><updated>2022-01-17T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2022/01/17/javascript-data-structure</id><content type="html" xml:base="http://localhost:4000/javascript/2022/01/17/javascript-data-structure.html"><![CDATA[<h2 id="자료구조와-자료형">자료구조와 자료형</h2>

<p>기본적으로, 프로그래밍 언어들에 대한 기본지식이 있는 상태로 공부를 진행하여, 기본적인 유형인 부분들은 스킵하도록 하였다</p>

<h3 id="원시값과-객체의-차이">원시값과 객체의 차이</h3>

<p>원시값이란</p>
<ul>
  <li>원시형의 값</li>
  <li>종류로는 <code class="language-plaintext highlighter-rouge">string, number, bigint, boolean, symbol, null, undefined </code>으로 총 7가지가 올 수 있다</li>
</ul>

<p>객체</p>
<ul>
  <li>Property에 다양한 종류의 값을 저장 할 수 있다</li>
  <li><code class="language-plaintext highlighter-rouge">{name: "Yoon", age: 25}</code>와 같이 {}를 사용해 만들 수 있다</li>
  <li>자바스크립트에는 여러 종류의 객체가 있으며, 함수도 객체의 일종이다</li>
</ul>

<h3 id="문자열">문자열</h3>
<blockquote>
  <p>자바스크립트는 글자 하나만 저장 할 수 있는 <code class="language-plaintext highlighter-rouge">char</code> 형의 자료형이 없다!</p>
</blockquote>

<p>따옴표의 종류가 <code class="language-plaintext highlighter-rouge">'</code> 와 <code class="language-plaintext highlighter-rouge">"</code> 으로 두개 있고, 둘 다 사용 할 수 있으며, 백틱으로도 감쌀 수가 있다. 그리고 백틱에는 특별한 기능이 있는데, 표현식을 ${…} 으로 감싸고 이를 백틱에 감싼 문자열에 넣어주면, 표현식을 쉽게 삽입을 할 수 있게 해준다</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">template literal</code> 이라 부른다
예시를 보면</p>
  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
	<span class="k">return</span> <span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">alert</span><span class="p">(</span><span class="s2">`1 + 2 = </span><span class="p">${</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">.`</span><span class="p">);</span>
</code></pre></div>  </div>
  <p>또한 백틱을 이용하여 문자열을 여러줄로 작성 할 수 도 있다</p>
  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">guests</span> <span class="o">=</span> <span class="s2">`Guests:
	* Kim
	* Yoon
	* Lee
`</span><span class="p">;</span>
</code></pre></div>  </div>
</blockquote>

<h3 id="배열">배열</h3>

<p>배열 선언에는 두가지 방법이 있다</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span><span class="c1">//no.1</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span><span class="c1">//no.2</span>
</code></pre></div></div>
<ul>
  <li>그리고 두번째 방법으로 대괄호 안에, 초기화를 시켜주는 것 또한 가능하다.</li>
  <li>배열 요소의 자료형에는 제약이 없다
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">apple</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">yoon</span><span class="dl">'</span><span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);}];</span>
  <span class="nx">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]();</span> <span class="c1">//hello</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="반복문">반복문</h4>
<p><code class="language-plaintext highlighter-rouge">for</code>문은 배열을 순회 할 때 사용하는 가장 쉬운 방법이다
배열에 적용하는 순회 방법중 가장 쉬운 for…of를 사용해 보자</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">apple</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">orange</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pear</span><span class="dl">'</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">fruit</span> <span class="k">of</span> <span class="nx">fruits</span><span class="p">){</span>
	<span class="nx">alert</span> <span class="p">(</span><span class="nx">fruit</span><span class="p">);</span><span class="c1">//apple -&gt; orange -&gt; pear</span>
<span class="c1">//	or alert(arr[key]);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">for..of</code>를 사용하면 현재 요소의 인덱스는 얻을 수 없고 값만 얻을 수 있다. 하지만 구현하기가 쉽고 문법도 짧아 배열의 요소를 대상으로 반복 작업을 할 때는 매우 편리하다</p>

<h3 id="iterable-객체"><code class="language-plaintext highlighter-rouge">iterable</code> 객체</h3>

<ul>
  <li>반복 가능한 객체는 배열을 일반화 한 객체이다</li>
  <li><code class="language-plaintext highlighter-rouge">iterable</code>을 사용하여 어떤 객체에서든 <code class="language-plaintext highlighter-rouge">for..of</code> 반복문을 적용 시킬 수 있다</li>
</ul>

<h4 id="symboliterator"><code class="language-plaintext highlighter-rouge">Symbol.iterator</code></h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">range</code> 를 iterable로 만들기 위해 객체에 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code> 를 추가한다</li>
  <li><code class="language-plaintext highlighter-rouge">for..of</code> 가 시작되면 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code>를 호출 해 조건성을 만족시킨다</li>
  <li><code class="language-plaintext highlighter-rouge">for..of</code>는 반환된 객체만을 대상으로 동작한다</li>
  <li><code class="language-plaintext highlighter-rouge">for..of</code>에 다음값이 필요하면 iterator의 <code class="language-plaintext highlighter-rouge">next()</code>를 호출한다</li>
  <li><code class="language-plaintext highlighter-rouge">next()</code>의 반환값은 <code class="language-plaintext highlighter-rouge">{done: Boolean, value: any}</code> 와 같은 형태이고 <code class="language-plaintext highlighter-rouge">done === true</code>면 반복이 종료되었다는 뜻이다</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">range</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">from</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">to</span><span class="p">:</span> <span class="mi">5</span>
<span class="p">};</span>

<span class="c1">// 1. for..of 최초 호출 시, Symbol.iterator가 호출됩니다.</span>
<span class="nx">range</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="c1">// Symbol.iterator는 이터레이터 객체를 반환합니다.</span>
  <span class="c1">// 2. 이후 for..of는 반환된 이터레이터 객체만을 대상으로 동작하는데, 이때 다음 값도 정해집니다.</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">current</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="k">from</span><span class="p">,</span>
    <span class="na">last</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">to</span><span class="p">,</span>

    <span class="c1">// 3. for..of 반복문에 의해 반복마다 next()가 호출됩니다.</span>
    <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 4. next()는 값을 객체 {done:.., value :...}형태로 반환해야 합니다.</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">last</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">++</span> <span class="p">};</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span> <span class="na">done</span><span class="p">:</span> <span class="kc">true</span> <span class="p">};</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="c1">// 이제 의도한 대로 동작합니다!</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">num</span> <span class="k">of</span> <span class="nx">range</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span> <span class="c1">// 1, then 2, 3, 4, 5</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="date-객체와-날짜">Date 객체와 날짜</h3>
<p>날짜를 저장 할 수 있고, 관련된 함수를 제공하는 <code class="language-plaintext highlighter-rouge">Date</code>에 대해 알아보자</p>
<ul>
  <li>객체의 생성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">new Date()</code> 를 호출해 새로운 객체를 만들어 사용 할 수 있다</li>
    </ul>
  </li>
  <li>날짜 찾기
    <ul>
      <li>getFullYear() -&gt; 네자릿수 연도</li>
      <li>getMonth() -&gt; 0부터 11까지의 월</li>
      <li>getDate() -&gt; 1부터 31까지 날</li>
      <li>getHours()</li>
      <li>getMinutes()</li>
      <li>getSeconds()</li>
      <li>getMillioseconds()</li>
      <li>getDay() -&gt; 0부터 6까지, 일요일부터 토요일</li>
      <li>getTime() -&gt; 주어진 시간과 1970년 1월 1일 00초 사이의 간격</li>
      <li>getTimezoneOffset() -&gt; 현지 시간과 표준 시간의 차이를 반환</li>
    </ul>
  </li>
</ul>

<h3 id="json과-method">JSON과 Method</h3>

<p>복잡한 객체를 사용하고 있어, 네트워크를 통해 객체를 보내거나 로깅 목적으로 객체를 출력해야 할 때 사용하는 방법으로 <code class="language-plaintext highlighter-rouge">JSON</code>을 사용 할 수 있다</p>

<h4 id="jsonstringify">JSON.stringify</h4>
<ul>
  <li>JSON,stringify -&gt; 객체를 JSON으로 바꿔준다</li>
  <li>JSON.parse -&gt; JSON을 객체로 바꿔준다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Yoon</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
	<span class="na">isAdmin</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
	<span class="na">courses</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">js</span><span class="dl">'</span><span class="p">],</span>
	<span class="na">wifi</span><span class="p">:</span><span class="kc">null</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">student</span><span class="p">);</span>

<span class="nx">alert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">json</span><span class="p">);</span> <span class="c1">//string</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span><span class="c1">//student의 내용을 string으로 출력</span>
</code></pre></div></div>]]></content><author><name>071yoon</name></author><category term="javascript" /><category term="javascript" /><category term="typescript" /><category term="TIL" /><category term="data structure" /><summary type="html"><![CDATA[자료구조와 자료형]]></summary></entry><entry><title type="html">자바스크립트 객체</title><link href="http://localhost:4000/javascript/2022/01/14/javascript-object.html" rel="alternate" type="text/html" title="자바스크립트 객체" /><published>2022-01-14T00:00:00+09:00</published><updated>2022-01-14T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2022/01/14/javascript-object</id><content type="html" xml:base="http://localhost:4000/javascript/2022/01/14/javascript-object.html"><![CDATA[<p>최근에 마음이 맞는 사람들과 프로젝트를 진행해 보기로 했다. <code class="language-plaintext highlighter-rouge">Decrypto</code> 라는 보드게임을 웹 환경으로 만들어 보면 어떠겠는가 해서 시작된 프로젝트였다. 생각보다 관심이 있는 사람들이 많아 인원을 다 모으고 회의를 진행을 해 보았는데… 아뿔싸… 제대로 웹 개발을 해본 사람이 없는것! 그래서 프로젝트 바로 시작하는것은 잠시 미뤄두고 스터디를 진행을 해 보기로 하였다. 인원도 많았기에, 팀별로 <code class="language-plaintext highlighter-rouge">React</code>, <code class="language-plaintext highlighter-rouge">Type Script</code>, <code class="language-plaintext highlighter-rouge">Node.js</code> 이런식으로 인원을 쪼개 2주간 진행을 한 후 통합하여 실제로 웹 프로젝트를 진행해 보기로 했다.</p>

<p>그렇게 우리팀인 <code class="language-plaintext highlighter-rouge">TypeScript</code> 스터디팀은 무작정 코드리뷰도 해보려고하고, 코드아카데미에서 따라도 해보았고 그렇게 결정 난 사안이 [아직 자바스크립트도 제대로 못한다] 였다. 그래서 이론적인 부분에서 자바스크립트를 조금 더 공부하고자 포스팅을 시작한다.</p>

<h2 id="javscript---객체란-무엇인가">Javscript - 객체란 무엇인가</h2>

<ul>
  <li>
    <p>객체란 다양한 데이터를 담을 수 있는 형태</p>
  </li>
  <li>
    <p>키로 구분된 데이터의 집합이나 개체를 저장 할 수 있다</p>
  </li>
</ul>

<h3 id="property">Property</h3>

<ul>
  <li>중괄호 <code class="language-plaintext highlighter-rouge">{...}</code> 를 통해 만들 수 있으며, 안에 <code class="language-plaintext highlighter-rouge">key[string]: value[all types]</code>에 해당한 프로퍼티가 들어가야 한다
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Object</span><span class="p">();</span>
  <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">,</span>
      <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">test case</span><span class="dl">"</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">};</span>
</code></pre></div>    </div>
    <blockquote>
      <p>const로 선언된 상수 객체가 수정 될 수 있음에 주의</p>
    </blockquote>
  </li>
</ul>

<h3 id="대괄호-표기법">대괄호 표기법</h3>

<ul>
  <li>만약 내가 <code class="language-plaintext highlighter-rouge">user</code>에 <code class="language-plaintext highlighter-rouge">test case</code> 를 불러오고 싶어도 <code class="language-plaintext highlighter-rouge">user.test case</code> 라 선언 시 오류가 나기 때문에, user[“test case”] 이런식으로 대괄호로 읽어야 한다</li>
  <li>혹은
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">test case</span><span class="dl">"</span>
  <span class="nx">user</span><span class="p">[</span><span class="nx">tmp</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span>
</code></pre></div>    </div>
    <p>처럼 선언하여 사용 할 수 있다</p>
  </li>
</ul>

<h3 id="in-연산자로-프로퍼티-존재-확인"><code class="language-plaintext highlighter-rouge">in</code> 연산자로 프로퍼티 존재 확인</h3>

<ul>
  <li>존재하지 않는 프로퍼티에 접근해도 에러가 발생하지 않고 <code class="language-plaintext highlighter-rouge">undefined</code>로 반환됨에 주의
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">,</span> <span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">};</span>
<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">age</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">user</span><span class="p">);</span> <span class="c1">//TRUE</span>
<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">work</span><span class="dl">"</span> <span class="k">in</span> <span class="nx">user</span><span class="p">);</span><span class="c1">//FALSE</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">user</span><span class="p">){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span><span class="c1">//name, age</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">user</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span><span class="c1">//Yoon, 25</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>정렬방식은 정수 프로퍼티가 자동으로 정렬되고, 그 외는 추가 순서로 정렬됨에 주의
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">codes</span> <span class="o">=</span> <span class="p">{</span>
    <span class="dl">"</span><span class="s2">49</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Germany</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">41</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Swiss</span><span class="dl">"</span><span class="p">,</span>
    <span class="dl">"</span><span class="s2">44</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">England</span><span class="dl">"</span><span class="p">,</span>
    <span class="c1">//..</span>
    <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Korea</span><span class="dl">"</span>
<span class="p">};</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">code</span> <span class="k">in</span> <span class="nx">codes</span><span class="p">){</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">code</span><span class="p">);</span><span class="c1">//1, 41, 44, 49</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="참조">참조</h2>

<h3 id="참조에-의한-객체복사">참조에 의한 객체복사</h3>

<p>객체와 원시타입의 차이는 <code class="language-plaintext highlighter-rouge">참조에 의해</code> 저장되고 복사된다는 점이다</p>

<ul>
  <li>예시
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">message</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">Hello!</span><span class="dl">"</span><span class="p">;</span>
  <span class="kd">let</span> <span class="nx">phrase</span> <span class="o">=</span> <span class="nx">message</span><span class="p">;</span>
</code></pre></div>    </div>
    <p>이렇게 하면 message 와 phrase 둘 다 “Hello!”라는 문자열이 저장된다</p>
  </li>
  <li>이제 객체에 대한 참조를 해보면
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">YeongGi</span><span class="dl">"</span><span class="p">};</span>
  <span class="kd">let</span> <span class="nx">admin</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
</code></pre></div>    </div>
    <p>이런식으로 참조하여 복사를 하게되면, 이후 user의 값을 임의로 변경을 하여도 admin또한 변경이 된다</p>
  </li>
</ul>

<h3 id="참조에-의한-비교">참조에 의한 비교</h3>
<p>객체 비교 시 동등연산자 <code class="language-plaintext highlighter-rouge">==</code> 와 <code class="language-plaintext highlighter-rouge">===</code>의 차이를 알아보자</p>
<ul>
  <li>원래는 비교 시 피연산자인 두 객체가 동일한 경우 참을 반환한다
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span><span class="p">;</span><span class="c1">//참조에 의한 복사</span>
  <span class="nx">alert</span> <span class="p">(</span><span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span><span class="p">);</span>
  <span class="nx">alert</span> <span class="p">(</span><span class="nx">a</span> <span class="o">===</span> <span class="nx">b</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>둘 다 참을 반환한다</p>
  </li>
  <li>독립된 객체의 비교
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">alert</span> <span class="p">(</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span><span class="p">);</span><span class="c1">//false</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="객체의-복사">객체의 복사</h3>
<p>기존의 객체와 같으면서 독립적인 객체를 만들고 싶다면 두가지정도 방법이 존재한다</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">for loop</code> 을 돌며 복사</li>
  <li><code class="language-plaintext highlighter-rouge">Object assign</code>을 활용</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">age</span><span class="p">:</span> <span class="mi">25</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">clone</span> <span class="o">=</span> <span class="p">{};</span><span class="c1">//새로운 빈 객체</span>

<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">user</span><span class="p">){</span><span class="c1">//1번의 방법</span>
	<span class="nx">clone</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="o">=</span> <span class="nx">user</span><span class="p">[</span><span class="nx">key</span><span class="p">];</span>
<span class="p">}</span>

<span class="nb">Object</span><span class="p">.</span><span class="nx">assign</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">clone</span><span class="p">);</span><span class="c1">//2번의 방법</span>
</code></pre></div></div>

<h2 id="가비지-컬렉션">가비지 컬렉션</h2>

<p>눈에 보이지 않는 메모리 관리를 한번에 해결해주는 방법으로, Java에서 사용했던것과 유사하다.</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Reachable</code>한 값은 메모리에서 삭제하지 않음에 주의</p>
</blockquote>

<h3 id="point">Point</h3>
<ul>
  <li>가비지 컬렉션은 엔진이 자동으로 수행하므로 억지로 실행 할 수는 없다</li>
  <li>객체는 도달 가능한 상태일 때 메모리에 남는다</li>
  <li>참조된다고 도달이 되는것은 아니다
    <ul>
      <li>서로 연결된 객체들도 도달 불가능 할 수 있다</li>
    </ul>
  </li>
</ul>

<h2 id="method-와-this">Method 와 this</h2>
<p>객체는 개체를 표현하고자 할 때 생성되며, 객체의 프로퍼티로 함수를 할당해 객체에 할당 시킬 수 있다</p>

<h2 id="method-생성">Method 생성</h2>

<p><code class="language-plaintext highlighter-rouge">Method</code> 생성에는 다양한 방법들이 있고 하나씩 나열해보자</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">age</span><span class="p">:</span> <span class="mi">25</span>
<span class="p">};</span>

<span class="nx">user</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="c1">//방법1</span>
	<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>

<span class="kd">function</span> <span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span><span class="c1">//방법2</span>
	<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">};</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">SayHi</span> <span class="o">=</span> <span class="nx">sayHi</span><span class="p">;</span>

<span class="nx">user</span> <span class="o">=</span> <span class="p">{</span><span class="c1">//방법3</span>
	<span class="nx">SayHi</span><span class="p">(){</span>
		<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">Hello!</span><span class="dl">"</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<h3 id="this의-사용법"><code class="language-plaintext highlighter-rouge">this</code>의 사용법</h3>
<p>아까 사용했던 <code class="language-plaintext highlighter-rouge">user.sayHi()</code> 같은 경우에, 내부 코드에서 객체를 사용하려면 어떻게 사용해야 될까??</p>

<p><code class="language-plaintext highlighter-rouge">this</code> 키워드를 사용하여 객체에 접근 할 수 있다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">,</span>
	<span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>

	<span class="nx">sayHi</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span>
<span class="c1">//or	alert(user.name);</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>처럼 사용 할 수 있으며, 다른 프로그래밍 언어와 다르게 모든 함수에 <code class="language-plaintext highlighter-rouge">this</code>를 사용 할 수 있다</p>

<blockquote>
  <p>this가 없는 화살표 함수</p>
  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">firstName</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">,</span>
	<span class="nx">sayHi</span><span class="p">(){</span>
		<span class="kd">let</span> <span class="nx">arrow</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">alert</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">firstName</span><span class="p">);</span>
		<span class="nx">arrow</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">};</span>
<span class="nx">user</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">//Yoon</span>
</code></pre></div>  </div>
  <p>별개의 this가 만들어 지는것을 원하지 않고, 외부 컨텍스트에서 this를 사요하고 싶을 때 화살표 함수를 사용한다.</p>
</blockquote>

<h2 id="new-연산자와-생성자함수">New 연산자와 생성자함수</h2>
<p>객체 리터럴을 사용하여 객체를 쉽게 만들 수 있지만, 여러개 객체를 관리 할 때 <code class="language-plaintext highlighter-rouge">new</code> 연산자와 생성자를 통해 유사한 객체를 복수로 만들 수 있다</p>

<h3 id="생성자-함수">생성자 함수</h3>
<p>특징</p>
<ol>
  <li>함수 이름의 첫글자는 대문자로 시작</li>
  <li>반드시 <code class="language-plaintext highlighter-rouge">new</code> 연산자를 붙여 실행한다
예시
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">User</span><span class="p">(</span><span class="nx">name</span><span class="p">){</span>
 <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
 <span class="k">this</span><span class="p">.</span><span class="nx">isAdmin</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span> <span class="c1">//Yoon</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">isAdmin</span><span class="p">);</span><span class="c1">//False</span>
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="생성자-내-method">생성자 내 Method</h3>

<p>생성자 함수를 사용하면 매개변수를 이용해 객체 내부를 구성 할 수 있다.</p>
<blockquote>
  <p>유연하게 사용 할 수 있게 도와준다</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">User</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>

	<span class="k">this</span><span class="p">.</span><span class="nx">sayHi</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">My name is </span><span class="dl">"</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">.</span><span class="dl">"</span><span class="p">);</span>
	<span class="p">};</span>
<span class="p">}</span>
<span class="kd">let</span> <span class="nx">yoon</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">(</span><span class="dl">"</span><span class="s2">Yoon</span><span class="dl">"</span><span class="p">);</span>

<span class="nx">yoon</span><span class="p">.</span><span class="nx">sayHi</span><span class="p">();</span> <span class="c1">//My name is Yoon.</span>
</code></pre></div></div>]]></content><author><name>071yoon</name></author><category term="javascript" /><category term="javascript" /><category term="typescript" /><category term="method" /><category term="TIL" /><summary type="html"><![CDATA[최근에 마음이 맞는 사람들과 프로젝트를 진행해 보기로 했다. Decrypto 라는 보드게임을 웹 환경으로 만들어 보면 어떠겠는가 해서 시작된 프로젝트였다. 생각보다 관심이 있는 사람들이 많아 인원을 다 모으고 회의를 진행을 해 보았는데… 아뿔싸… 제대로 웹 개발을 해본 사람이 없는것! 그래서 프로젝트 바로 시작하는것은 잠시 미뤄두고 스터디를 진행을 해 보기로 하였다. 인원도 많았기에, 팀별로 React, Type Script, Node.js 이런식으로 인원을 쪼개 2주간 진행을 한 후 통합하여 실제로 웹 프로젝트를 진행해 보기로 했다.]]></summary></entry><entry><title type="html">깃허브 블로그 설치하기</title><link href="http://localhost:4000/blog/2022/01/12/how-to-install-github-io.html" rel="alternate" type="text/html" title="깃허브 블로그 설치하기" /><published>2022-01-12T00:00:00+09:00</published><updated>2022-01-12T00:00:00+09:00</updated><id>http://localhost:4000/blog/2022/01/12/how-to-install-github-io</id><content type="html" xml:base="http://localhost:4000/blog/2022/01/12/how-to-install-github-io.html"><![CDATA[<p>안녕하세요, <code class="language-plaintext highlighter-rouge">071yoon</code>입니다.</p>

<p>원래는 노션에서 제가 하는 작업들을 정리해 왔지만, 포스팅용의 사이트가 하나 필요하다 판단되어 Github IO를 채택하기로 했습니다.</p>

<p>혹시라도 제 노션이 궁금하다면 -&gt; <a href="https://yeonggi.notion.site/YeongGi-s-Scratch-9085f2628b87451a9e19e655c9c5bd5e" title="영기의 노션 링크">노션링크</a></p>

<h2 id="만드는-과정-step-by-step">만드는 과정 <strong>Step by Step</strong></h2>
<blockquote>
  <p>MAC 환경에서 작업햇습니다!!!</p>
</blockquote>

<h2 id="1-새로운-repository-생성">1. 새로운 Repository 생성</h2>
<blockquote>
  <p>주의 할 점 -&gt; 이름은 username.github.io 의 형태를 유지해야한다</p>
</blockquote>

<ul>
  <li>README는 딱히 필요 없다. (근데 어차피 추가 해야됨…)</li>
</ul>

<h2 id="2-clone">2. clone</h2>
<ul>
  <li>
    <p>git clone` 으로 만들어 둔 Repiostiry 를 local로 clone</p>
  </li>
  <li>
    <p>앞으로 해당 디렉토리에서 작업을 한다</p>
  </li>
</ul>

<h2 id="3-jekyll">3. Jekyll</h2>
<blockquote>
  <p>만약 Windows 환경이라면 Ruby 설치가 필요하다</p>
</blockquote>

<ul>
  <li>
    <p>terminal 에서 <code class="language-plaintext highlighter-rouge">gem install jekyll bundler</code> 로 설치</p>
  </li>
  <li>
    <p>만약 사용하고 싶은 템플릿 가 없다면 <code class="language-plaintext highlighter-rouge">Jekyll</code>의 기본 템플릿을 사용해보자</p>
  </li>
  <li>
    <p>clone 한 디렉토리에서</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  jekyll new ./
  bundle <span class="nb">install 
  </span>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div>    </div>

    <ul>
      <li>
        <p>까지 하게되면 서버를 열 수 있다</p>

        <p><img width="695" alt="image" src="https://user-images.githubusercontent.com/66371206/149091259-85fb91e9-e480-4e0d-a521-559517d5c2a3.png" /></p>
      </li>
      <li>
        <p>해당 이미지에서 서버의 Host 주소를 파악 (여기서 http://127.0.0.1:4000/ 인 부분)</p>
      </li>
      <li>
        <p>수정이 끝났다면</p>

        <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"커밋 내용"</span>
git push origin master
</code></pre></div>        </div>
      </li>
      <li>
        <p>를 사용해 배포 후 ` http://username.github.io ` 에서 본인의 첫 블로그를 확인 할 수 있다</p>
      </li>
    </ul>
  </li>
</ul>

<p><br /></p>
<ul>
  <li>
    <p>만약 사용하고 싶은 템플릿이 있다면</p>

    <ul>
      <li>
        <p>해당 파일의 zip 파일을 가져와 압축을 해제 한 후 전부 나의 리포지토리에 붙여넣고 서버에 push를 진행하면 기본 템플릿이 제공된 테마가 제공된다</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">jekyll</code> 테마들은 여러 웹사이트들에서 찾을 수 있으며 나는 ` http://jekyllthemes.org ` 에서 <code class="language-plaintext highlighter-rouge">yat</code> 이라는 이쁜 테마를 찾아 사용했다</p>
      </li>
    </ul>
  </li>
</ul>

<p>이후 완성된 나의 첫 블로그 홈페이지</p>

<p><img width="1173" alt="image" src="https://user-images.githubusercontent.com/66371206/149092791-01744bdf-8432-4e97-9f1c-522fcac07fe2.png" /></p>

<p>그림은 나만의 작은 블로그를 위해 직접 그려 배너로 대체했다 ㅎㅎ</p>

<p><a href="https://hits.seeyoufarm.com"><img src="https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2F071yoon.github.io%2Fblog%2F2022%2F01%2F12%2Fhow-to-install-github-io.html&amp;count_bg=%2379C83D&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=hits&amp;edge_flat=false" alt="Hits" /></a></p>]]></content><author><name>071yoon</name></author><category term="blog" /><category term="github blog" /><category term="markdown" /><summary type="html"><![CDATA[안녕하세요, 071yoon입니다.]]></summary></entry><entry><title type="html">깃허브 블로그 코멘트 설치하기</title><link href="http://localhost:4000/blog/2022/01/12/install-blog-comment.html" rel="alternate" type="text/html" title="깃허브 블로그 코멘트 설치하기" /><published>2022-01-12T00:00:00+09:00</published><updated>2022-01-12T00:00:00+09:00</updated><id>http://localhost:4000/blog/2022/01/12/install-blog-comment</id><content type="html" xml:base="http://localhost:4000/blog/2022/01/12/install-blog-comment.html"><![CDATA[<p>사실 노션에서 깃허브 IO 로 넘어온 이유 중 가장 큰 이유가 소통의 부재이다.
물론 노션도 코멘트 기능을 가지고 있지만, 블로그에서처럼 활용도가 높지 않다. 그래서 야심차게 깃허브 블로그를 시작했지만… 코멘트 기능은 자동으로 있지 않았고 따로 설치가 필요해 따로 설치를 진행해 보았다.</p>

<h2 id="깃허브-블로그-코멘트-설치하기"><strong>깃허브 블로그 코멘트 설치하기!</strong></h2>
<hr />
<p>우선 깃허브 코멘트 설치를 위해서 두가지 기능 중 하나를 선택해야 한다.</p>

<ol>
  <li><a href="#disqus"><code class="language-plaintext highlighter-rouge">disqus</code></a></li>
  <li><a href="#utterance"><code class="language-plaintext highlighter-rouge">utterance</code></a></li>
</ol>

<h3 id="disqus">disqus</h3>
<p>이런저런 조사를 해 보니 <code class="language-plaintext highlighter-rouge">disqus</code> 같은 경우에는 되게 무겁다는 평이 많았다. 사람들이 정말 많이 사용하는 플랫폼이며, 이미지나 기본적인 텍스트 셋업을 도와줘서 간편하지만, 문제는 딸려오는 광고가 너무 많이 붙고 없애기 위해서는 월 9$씩 지불을 해야된다는 것이다!!!</p>
<h3 id="utterance">utterance</h3>
<p>그래서 utterance를 설치하기로 결심했다. utterance의 장점은 당연히 광고가 없다는 점이며, Github 계정으로 댓글을 달고 댓글이 Issue로 올라오는 시스템이라 관리하기가 편하다는 점!!
그리고 기본적인 텍스트 세팅이 없는 대신 마크다운을 지원한다!!</p>

<h2 id="블로그에-utterance-적용하기">블로그에 utterance 적용하기</h2>
<hr />
<h3 id="1-설치-위치-정하기">1. 설치 위치 정하기</h3>
<ul>
  <li>
    <p>나의 github 리포지토리에 코멘트를 적용시킬지 코멘트 적용 리포지토리를 생성할 지 결정한다</p>
  </li>
  <li>
    <p>아마 블로그가 private 한 사람들이 comment용 public repository를 따로 생성 한 후 관리를 하는 것 같다</p>
    <blockquote>
      <p>근데 어차피 코멘트가 많이 달릴 것 같지도 않고… 이미 public 블로그이므로 내 블로그 리포지토리에 생성하기로 결정</p>
    </blockquote>
  </li>
</ul>

<h3 id="2-utterance를-설치한다">2. utterance를 설치한다</h3>

<ul>
  <li>
    <p><a href="https://github.com/apps/utterances">utterance 설치 링크</a> 에서 설치를 진행하면 된다</p>

    <blockquote>
      <p>설치 진행 중 All repositories가 기본으로 선택되어 있으니, 모든 레포에 utterance를 설치하는 불상사는 일어나지 않게 주의하자</p>
    </blockquote>
  </li>
  <li>
    <p>issue 방식은 기본이 아무래도 편해 보여 기본으로 설정</p>
  </li>
  <li>
    <p>comment type은 자신의 블로그의 잘 맞게 구성하자</p>
  </li>
  <li>
    <p>설정을 마무리 하는 과정에서 보면 script code를 자신의 블로그에 맞게 삽입하라고 나온다</p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://utteranc.es/client.js"</span>
      <span class="na">repo=</span><span class="s">"071yoon/071yoon.github.io"</span>
      <span class="na">issue-term=</span><span class="s">"pathname"</span>
      <span class="na">theme=</span><span class="s">"github-light"</span>
      <span class="na">crossorigin=</span><span class="s">"anonymous"</span>
      <span class="na">async</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/script&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>이러한 코드를 자신의 환경에 잘 맞춰 삽입한다</p>
    <blockquote>
      <p>내 블로그 같은 경우 _layouts -&gt; post.html에 post-comments의 블럭 밑에 넣어두었다</p>
    </blockquote>
  </li>
</ul>

<h3 id="3-테스트">3. 테스트</h3>

<p>모든 설정이 끝났으면 배포를 해보자!!</p>

<p><img width="736" alt="image" src="https://user-images.githubusercontent.com/66371206/149119619-93defcf0-9f46-459a-95f8-14082e102e7a.png" /></p>

<blockquote>
  <p>이쁘게 잘 보이는 걸 확인 할 수 있다!!</p>
</blockquote>

<p><img width="724" alt="image" src="https://user-images.githubusercontent.com/66371206/149118548-441acc97-8d8d-4ede-bf53-dbcc13af31c6.png" /></p>

<p><strong>이런식으로 issue가 생성되어 잘 동작하는지 까지 확인 완료!!</strong></p>

<blockquote>
  <p>삭제시에는 issue close 후 delete하면 잘 삭제가 된다</p>
</blockquote>

<p>오래 걸릴 줄 알았지만, 설정하기 쉽게 구성이되어 있어 빠르게 설치를 완료했다</p>

<p><a href="https://hits.seeyoufarm.com"><img src="https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2F071yoon.github.io%2Fblog%2F2022%2F01%2F12%2Finstall-blog-comment.html&amp;count_bg=%2379C83D&amp;title_bg=%23555555&amp;icon=&amp;icon_color=%23E7E7E7&amp;title=hits&amp;edge_flat=false" alt="Hits" /></a></p>]]></content><author><name>071yoon</name></author><category term="blog" /><category term="github blog" /><category term="markdown" /><summary type="html"><![CDATA[사실 노션에서 깃허브 IO 로 넘어온 이유 중 가장 큰 이유가 소통의 부재이다. 물론 노션도 코멘트 기능을 가지고 있지만, 블로그에서처럼 활용도가 높지 않다. 그래서 야심차게 깃허브 블로그를 시작했지만… 코멘트 기능은 자동으로 있지 않았고 따로 설치가 필요해 따로 설치를 진행해 보았다.]]></summary></entry></feed>