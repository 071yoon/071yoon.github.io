<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-09-18T12:26:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi&apos;s tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">크롬 익스텐션을 개발해보자</title><link href="http://localhost:4000/til/2023/09/18/make-chomre-web-extension.html" rel="alternate" type="text/html" title="크롬 익스텐션을 개발해보자" /><published>2023-09-18T00:00:00+09:00</published><updated>2023-09-18T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/09/18/make-chomre-web-extension</id><content type="html" xml:base="http://localhost:4000/til/2023/09/18/make-chomre-web-extension.html"><![CDATA[<h2 id="발단">발단</h2>

<p>요새 메이플이란 게임에 빠져있었다. 그리고 이 게임에는 <code class="language-plaintext highlighter-rouge">재획</code> 이라는 시스템이 존재한다. 일반적으로 사냥을 하는 컨텐츠이지만 이 사냥을 많이 하다보면 게임 화면을 보지 않고도 컨텐츠를 즐길 수 있는 경지에 오르게 된다. 보통 이러한 경지를 <code class="language-plaintext highlighter-rouge">뇌빼기</code>(대충 뇌 빼고도 사냥한다는…) 라고도 하는데, 여기서 메이플의 서브 컨텐츠인 딴거하기를 즐길 수 있다.
보통 이 딴거하기 단계에서는 넷플릭스나 유튜브등 동영상 컨텐츠를 많이 즐기게 된다. 그러던 중 메이플 커뮤니티에서 웹툰을 보는 방법이 올라왔다.
<img width="461" alt="image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/5b668973-8501-4570-98f0-f8adc7100a67" />
사진에 보이듯, f12를 눌러.. 개발자 도구에 들어가.. javascript를 입력해.. 조절을 이렇게… 아마 개발을 하는 나에게는 익숙하지만 일반인에게는 꽤나 복잡하고 이해가 안될거 같다는 생각이 들었다. 그럼 이걸 확장으로 만들면 더 쉽지 않을까? 라고 생각해 바로 개발에 들어갔다.</p>

<h2 id="개발">개발</h2>

<p>매우 간단한 화면이 되겠지만, 그럼에도 불구하고 React를 심어두면 개발이 편하고 추후에 수정하기도 편할 것 같아, 우선 React + Web Extension을 우선으로 개발하기로 결정했다.</p>

<h3 id="react-심기">React 심기</h3>

<p>React를 심는것은 기존에 있는 React boilerplate와 유사하다. 다른점은 extension에서 <code class="language-plaintext highlighter-rouge">popup</code>이란 화면이 메인 화면임이므로 <code class="language-plaintext highlighter-rouge">root</code> 대신 <code class="language-plaintext highlighter-rouge">popup</code>에 render해주면 되는것이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mountNode</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">popup</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">ReactDOM</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span><span class="p">,</span> <span class="nx">mountNode</span><span class="p">);</span>
</code></pre></div></div>

<p>그리고 package.json에 필요한 library등을 삽입하여 <App></App>에서 사용해주면 된다.</p>

<h3 id="mainfest">mainfest</h3>

<p>manifest는 어떻게 확장을 구성할지에 대한 정의라고 할 수 있다. 일반적으로 그냥 chrome확장에서 제시해주는 대로 작성하면 되지만, 중요한점은 <code class="language-plaintext highlighter-rouge">manifest_version</code>과 <code class="language-plaintext highlighter-rouge">permissions</code> 라고 생각한다.</p>

<p>manifest_version은 3이 최신버전이므로 사용하는게 맞지만, 참고 어플들은 2가 많으므로 주의해서 사용하자. 나는 처음에 2로 사용했다가 chrome extension 사이트를 보며 개발하다 outdated가 많아 3으로 올려 버전업을 했다.</p>

<p>permissions는 내 확장에 어떠한 기능들까지 허용해줄지에 대한 정의이다. 나같은 경우에 3가지를 허용해주었는데 하나하나 알아보자.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">activeTab</code>
    <ul>
      <li>확장이 열린 탭(내가 보고 있는 탭)에 대한 정보를 제공해주겠다는 뜻</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">scripting</code>
    <ul>
      <li>확장에서 script를 실행하게 해주겠다는 뜻</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">storage</code>
    <ul>
      <li>chrome web storage를 사용하게 해주겠다는 뜻</li>
    </ul>
  </li>
</ul>

<h3 id="javascript">javascript</h3>

<p>확장에서 javascript를 실행할때 주의할 점은 node환경이 별개로 두개가 된다는 점이다. 하나는 내가 지금 보고 있는 화면의 javascript와 하나는 확장이 돌아가고 있는 화면의 javascript이다. 각각 content.js와 background.js에서 돌아가게 된다.</p>

<p>하지만 개발을 하다보면 background.js -&gt; content.js로 넘어가게 되는 상황이 많이 생기게 된다. 그럴경우 event listener로 넘겨주며 주고받을 수 있지만, 나는 보다 쉽게 개발하기 위해 바로 확장에서 바로 content의 javascript를 실행할 수 있게 <code class="language-plaintext highlighter-rouge">chrome.scripting.executeScript()</code>함수를 활용하였다.</p>

<p>예시는 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">const</span> <span class="nx">onStart</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">queryOptions</span> <span class="o">=</span> <span class="p">{</span> <span class="na">active</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> <span class="na">lastFocusedWindow</span><span class="p">:</span> <span class="kc">true</span> <span class="p">};</span>
    <span class="nx">chrome</span><span class="p">.</span><span class="nx">tabs</span><span class="p">.</span><span class="nx">query</span><span class="p">(</span><span class="nx">queryOptions</span><span class="p">,</span> <span class="p">([</span><span class="nx">tab</span><span class="p">])</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">lastError</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">chrome</span><span class="p">.</span><span class="nx">runtime</span><span class="p">.</span><span class="nx">lastError</span><span class="p">);</span>

      <span class="c1">// @ts-ignore</span>
      <span class="nx">chrome</span><span class="p">.</span><span class="nx">scripting</span><span class="p">.</span><span class="nx">executeScript</span><span class="p">({</span>
        <span class="na">target</span><span class="p">:</span> <span class="p">{</span> <span class="na">tabId</span><span class="p">:</span> <span class="nx">tab</span><span class="p">.</span><span class="nx">id</span> <span class="p">},</span>
        <span class="na">func</span><span class="p">:</span> <span class="p">(</span><span class="na">sv</span><span class="p">:</span> <span class="nx">number</span><span class="p">,</span> <span class="na">st</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="c1">// do something with sv, st</span>
        <span class="p">},</span>
        <span class="na">args</span><span class="p">:</span> <span class="p">[</span><span class="nx">scrollValue</span><span class="p">,</span> <span class="nx">scrollTime</span><span class="p">],</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">})();</span>
<span class="p">};</span>
</code></pre></div></div>

<h3 id="실행">실행</h3>

<p>실행은 <code class="language-plaintext highlighter-rouge">build</code>를 통해 나온 dist.zip 파일을 <code class="language-plaintext highlighter-rouge">chrome://extensions</code>에 넣어주고 사용하면 된다. 여기서 조금 불편한점은 매번 update할 때 마다 build를 하고 refresh를 해줘야된다.</p>

<h2 id="배포">배포</h2>

<p>개발보다 배포가 더 오래 걸렸다. 우선 웹 대시보드 콘솔에 들어가 가입도 해야되고 (가입비 5$도 지불해야된다) 어떤 목적으로 개발했는지, 앞서 허용해주었던 permissions들은 왜 허용을 해주었는지, logo는 잘 등록이 됐는지 등 설명을 많이 해줘야된다. 그래도 나름 콘솔이 잘되어 있어 어떤걸 놓쳤고 미숙한지 잘 알려주기 때문에 나름 따라가기가 쉬웠다.</p>

<p>하지만 나는 설명을 충분히 적지 않아 한번 거부를 당했다..
<img width="505" alt="image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/267d5e46-2b4b-4f91-9143-a6697d9c9018" /></p>

<p>그리고 게시가 되면 다시 메일이 올 줄 알았는데, 게시가 잘 되면 메일이 오지 않고 자동으로 등록됨에 주의..!</p>

<h2 id="후기">후기</h2>

<p>개발을 완료한 후 당당하게 메이플 커뮤니티에 올렸다. 다행히 반응도 좋았고 사람들이 많이 좋아해줬다. (이것이 나의 개발의 원동력…)
<img width="210" alt="image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/06c355ec-e44f-426f-991c-efeaa3e656bb" />
그리고 다른 커뮤니티에서 까지 퍼가서 홍보해주시는 분도 보았다.. 뿌듯..
다른 커뮤니티에 올라온 나의 글..
<img width="439" alt="스크린샷 2023-09-18 오후 12 22 20" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/af8661fa-d558-427c-864f-0dc3378c3924" /></p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="web" /><summary type="html"><![CDATA[발단]]></summary></entry><entry><title type="html">걸어서 제주도 한바퀴</title><link href="http://localhost:4000/retrospect/2023/07/12/walk-through-jeju.html" rel="alternate" type="text/html" title="걸어서 제주도 한바퀴" /><published>2023-07-12T00:00:00+09:00</published><updated>2023-07-12T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2023/07/12/walk-through-jeju</id><content type="html" xml:base="http://localhost:4000/retrospect/2023/07/12/walk-through-jeju.html"><![CDATA[<h1 id="걸어서-제주도-한바퀴">걸어서 제주도 한바퀴</h1>

<h2 id="계획">계획</h2>

<p>처음에는 국토대장정이였다.
인천에서 출발하여 부산까지 걸어서 가는 20박 21일의 여정을 생각했었다. 하지만, 일정상 너무 길고 날씨또한 7월의 무더움을 견뎌내기 힘들것 같아 제주도로 방향을 틀고 계획을 잡았다.</p>

<p>계획은 3월에 비행기를 예매하여 시작되었다. 원래 다니던 회사의 계약기간만료가 6월30일이였기에, 퇴사 후 바로 비행기를 타고 제주도에서 8박9일동안 제주도 한바퀴를 걷기로 친구와 약속을 하고 그 뒤에 일정은 아무것도 고려하지 않았다. (숙소 예약은 그날 컨디션에 따라 조절해야될 것 같아 첫날을 공항근처에서 예약해두고 나머지는 예약도 안하고 출발)</p>

<p>여행을 시작하기전 여러 사람들의 후기를 보니 무조건 가방을 가볍게 가져가야 된다는 이야기가 정말 많았다. 그래서 나도 최대한 압축을 해서 가져갔고 항목들은 다음과 같다.</p>

<ul>
  <li>반팔, 반바지, 속옷 두세트 (그런데 당일날 빨래를 했었어서 사실 한세트만 있었어도 충분했을 것 같다)</li>
  <li>스피커 (필수..!)</li>
  <li>보조배터리 / 충전기</li>
  <li>세면도구 (로션, 칫솔 등)</li>
  <li>우비</li>
  <li>깃발 (낭만 원툴)</li>
</ul>

<p>정말 이정도만 챙겨서 갔었다. 혹시몰라서 긴바지도 준비했었었는데, 2일차에서 조금이라도 가방 무게를 줄여야겠다고 생각이 들어서 숙소에서 버리고 갔다… ㅜ</p>

<p>그렇게 정말 낭만밖에 없는 바보들의 걸어서 제주도 한바퀴가 시작됐다.</p>

<p>위풍당당한 첫날
<img width="523" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/b5f92839-1331-40da-b658-bc124afb999e" /></p>

<h2 id="일정">일정</h2>

<p>일정은 제주도 환상 자전거 종주길을 따라 가기로 했다.</p>

<p><img width="1151" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/aac2fb5c-271c-4b1f-b7e6-0bfa98a33f7f" /></p>

<p>공항근처인 용두암으로 시작해서 다시 용두암으로 돌아오는 7박 8일 코스로 시작했다.</p>

<p>일정을 하루하루 적기에는 양이 너무 많아 재미있었던 에피소드별로 작성해보려고 한다.</p>

<h3 id="올레길의-지옥">올레길의 지옥</h3>

<p>첫날에는 체력이 너무 많아서 잘못된 선택을 해버렸다. 바로 올레길을 따라가버린것. 우선 환상 자전거길을 아래와 같이 파란색 선으로 제주도 한바퀴에 걸쳐 그려져 있어 쭉 따라가기만 하면 된다.</p>

<p><img width="713" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/08144542-5314-4ad7-9084-0a3946db9d72" /></p>

<p>하지만 첫날에 힘이 너무 넘치는 바람에 아스팔트길이 아닌 올레길을 가기로 결정을 해버렸다.</p>

<p>아래 사진에서 빨간색 선이 자전거길이고 파란색 선이 올레길 18번이다. 지도로만 보았을 때는, 돌아가지도 않고 풍경도 훨씬 좋을것이라 예상이 되어 이구간을 올레길로 따라가보았다.
<img width="1059" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/3b6eba39-a3cf-4d39-ac88-b68fc90de3f5" /></p>

<p>풍경자체는 사진처럼 너무 좋았지만 비온다음날이였기에, 곳곳에 웅덩이(함정)가 숨어 있었고, 신발은 진흙탕이 되어 버리고 계단 혹은 언덕이 중간에 너무 많아 다음날 허벅지 및 온 하체가 너무 아팠다. 그 뒤로는 정말 올레길을 쳐다도 보지 않고 환상 자전거길만 따라가게 되었다..</p>

<p><img width="709" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/65afaef4-4f73-49bc-9975-387a6a9d7b18" /></p>

<p>그리고 그날 밤..
<img width="724" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/6395cb19-5ec9-49bd-993b-1e3c09b58f3c" /></p>

<h3 id="뜨거운날">뜨거운날</h3>

<p>우리는 날씨복을 정말 타고났었다. 출발할때만 해도 제주도는 일주일 내내 비가 올 예정에 중간중간에 뇌우까지 껴있어서 정말 비가 많이 온다면 계획을 취소하자는 이야기 까지 나왔었다. 하지만 막상 도착해보니 정말 부슬부슬 오는 비를 제외하고는 제대로 비가온날은 없었고, 오히려 맑은 날이 이틀정도 존재했었다. 처음에는 맑은날에 많이 걷자, 혹은 이때 버닝을 해서 40km를 걸어야 된다. 이런말을 했었는데, 막상 맑은 날은 지옥이였다.</p>

<p><img width="722" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/f1669e7e-83ca-4d90-ae72-5c4779077b5c" /></p>

<p>처음에 제주도 한바퀴를 한다고 했었을때 사람들이 제일 많이한 걱정이긴 했다. <code class="language-plaintext highlighter-rouge">7월에 더우면 어떡해?</code> 질문에 대한 나의 대답은 <code class="language-plaintext highlighter-rouge">바다 옆이니까 시원하겠지</code> 이거였다. 하지만 환상 자전거길은 항상 바다 옆에 있는것도 아니였고 정말 너무너무 더웠다. 해가 너무 강렬해서 목은 두시간에 한번씩 선크림을 발랐음에도 불구하고 빨갛게 익어버렸고 내 친구는 상남자답게 다리에는 선크림을 바르지 않았더니 정말 삼겹살마냥 구워져버렸다. 정말 살면서 이렇게 경계가 뚜렷한 피부는 처음봤다…
<img width="712" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/a005068f-5674-4db8-8024-c12ce26cc9dc" /></p>

<h3 id="바선생-두둥등장">바선생 두둥등장</h3>

<p>3일차에 우리는 지도를 보고 일정에 대한 조율을 생각해보았다. 우리가 걷는 시간으로는 딱 7일인데 이런 페이스로 걷기에는 시간이 너무 촉박한것. 그래서 무조건 35km를 맞추기로 결정을 하고 숙소 예약을 하였더니 어느날 외진곳에서 숙소를 잡아야되는 상황이 발생했다. 외진곳이다 보니 펜션밖에 없었고 가격도 비쌌지만, 일정을 맞추기 위해 어쩔 수 없이 예약하게 되었다. 그렇게 3일차를 끝내고 저녁 7시쯤에 숙소에 도착을 하게 되었다.</p>

<p>펜션 사장님 아주머니께서 안내를 해주시고 에어컨을 딱 키셨는데 거기서 바선생(바퀴벌레)가 툭 하고 떨어졌다..! (진짜 무서웠음) 근데 우리는 다리에 힘도 없고 너무너무 지쳐있는 상태라 말도 제대로 못하고 그저 충격과 공포에 쌓인채로 앉아있었다. 그리고 아주머니가 잡으려고 출동 하시는데…! 바퀴벌레가 어찌나 빠른지 호다다닥 하고 침대 밑 프레임으로 들어가버렸다.. 결국 바퀴벌레를 잡지도 못하고 소동이 끝나버린 후 우리는 나름의 작전으로 이불을 모조리 가져와서 침대의 모든 구석공간을 막은 후 바로 잠에 들었다.</p>

<p>정말 평소같았다면 방을 바꿔달라 혹은 조치를 취했을 텐데, 이미 밤이 늦었고 정말 너무너무 피곤해서 빨리 씻고 자고싶은 마음에 극단의 선택을 했었던 것 같다. (지금 생각하면 진짜 어이없음)</p>

<p><img width="1268" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/d3f07d21-f5a7-4616-a1da-a1cb76570f26" /></p>

<h3 id="응원">응원</h3>

<p>의외로 꽤나 응원을 많이 받았다. 음식점에서 서비스로 응원한다며 사이다를 받은적도 있고, 올레길을 가시던 할머니 혹은 카페에서 만난 할아버지도 응원을 해주셨다. 그리고 나이드신분들은 공통적으로 우리에게 부러움을 많이 표현하셨다. 한가지는 나이에 대한 부러움이였고, 하나는 친구의 존재에 대한 부러움이였다. 이 나이에서 밖에 하지 못할 행동이라고 표현을 해주셨고 요즘 애들은 이런 고생 안하려고 하는데 멋지다고도 많이 해주셨다. 그리고 어떠한 관심사가 있어서 모인게 아닌 (ex. 동아리) 고등학교 친구끼리 마음이 맞아 이렇게 여행을 떠날 수 있다는것에 대해 부러워 해주셨다. 나도 이런말을 듣고 생각을 해보니 정말 이친구가 아니였으면 못했을 것 같다는 생각이 들어 새삼 되게 고마워졌다.</p>

<p><img width="723" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/1ae27911-c9ed-4c19-9011-ac7a6ffef9ff" /></p>

<h2 id="후기">후기</h2>

<p>사실 고생 및 여행을 즐기고 싶었던것도 있지만, 이번 일주일동안 정말 깊은 생각을 해보고 싶었다. 퇴사를 하면서 이런저런 생각들이 많이 들었었는데, 그런 생각 정리를 조금 하고 싶었다. <code class="language-plaintext highlighter-rouge">과연 지금 내가 걷고있는 이 길이 맞는걸까?</code> 같은 방향성에 대한 고민들이 정말 많이 있었다. 그런데 막상 걸어보니 다리 및 종아리는 너무 아프고 발바닥은 첫날에 아프더니 갈수록 감각도 없어지고, 더운날에는 목이 뜨겁고 화상을 입은듯이 팔은 타들어가고 하니 생각할 겨를도 없이 일주일이 지나갔다. 물론 바다도 정말 많이 보고 컴퓨터를 열지 않아서 마음에 부담 혹은 스트레스가 정말 없었지만, 당시에 유일하게 들었던 생각은 <code class="language-plaintext highlighter-rouge">내가 왜 이러고 있지</code> 이것밖에 없었다.</p>

<p>그리고 일정이 너무 빡빡했던것도 큰 패착이였던것 같다. 하루에 35km? 솔직히 쉬울줄 알았다. 인간은 생각보다 나약했구나.. 만약 다음번에 또 제주도 한바퀴를 한다면, 혹은 누군가 내 블로그를 보며 비슷한 여정을 계획한다면 적어도 9박 10일로 일정을 잡길 바란다.</p>

<p><img width="722" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/c86d781e-0314-4201-b4a3-fd3a6537ef99" /></p>

<p>너무 부정적인것들만 나열한것 같지만 사실은 정말 재미있었다. 우선 앞서 말했듯이 컴퓨터를 일주일동안 보지 않았던게 너무 좋았다. 군대 전역 후 정말 일주일동안 컴퓨터 없이 생활을 처음 해봤던것 같다. 입사를 한 이후에는 휴가를 써도 계속 <code class="language-plaintext highlighter-rouge">slack</code>을 확인하게 되고, 계속 걱정하게되어 제대로 휴식을 해본적이 없었을 뿐더러, 집에 가만히 누워 휴식을 취하고 싶어도 계속 <code class="language-plaintext highlighter-rouge">이렇게 쉬어도 되나?</code> 라는 생각에 사로잡혀 공부 혹은 개발을 해야될것 같은 스트레스에 쌓여있었는데, 이번에는 정말 잡생각 하나 없이 <code class="language-plaintext highlighter-rouge">걷기</code>에만 집중할 수 있었고 이렇게 개발이 아닌 딴것에 온전히 100% 집중할 수 있는 환경이 너무 좋았다.</p>

<p>그리고 태원아.. 같이 가줘서 정말 고맙다~
<img width="1006" alt="image" src="https://github.com/071yoon/071yoon/assets/66371206/0b7001be-4979-4492-b9d2-e29469ea78cb" /></p>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[걸어서 제주도 한바퀴]]></summary></entry><entry><title type="html">마음의 법칙</title><link href="http://localhost:4000/book/2023/01/15/rule-of-mind.html" rel="alternate" type="text/html" title="마음의 법칙" /><published>2023-01-15T00:00:00+09:00</published><updated>2023-01-15T00:00:00+09:00</updated><id>http://localhost:4000/book/2023/01/15/rule-of-mind</id><content type="html" xml:base="http://localhost:4000/book/2023/01/15/rule-of-mind.html"><![CDATA[<h1 id="마음의-법칙">마음의 법칙</h1>

<blockquote>
  <p>사람의 마음은 어떻게 작동하는 것일까?</p>
</blockquote>

<p>책을 읽다보면 공통적으로 언급되는 주제가 있다.</p>

<blockquote>
  <p>자신의 <code class="language-plaintext highlighter-rouge">인생의 통제권</code>을 회복하여야 한다</p>
</blockquote>

<p>여기서 말하는 <code class="language-plaintext highlighter-rouge">인생의 통제권</code>이란 어떤걸 말하는걸까?</p>

<h2 id="overview">Overview</h2>

<p>책은 우리가 평소에 어떠한 문제를 가지고 살아가며 해당 문제를 심리학적으로 분석을 해준다.</p>

<p>그리고 문제에 대한 자세한 해결법을 제시해줄 때도 있고, 문제만 언급하고 다음 주제로 넘어갈 때가 있다.</p>

<p>관련해서 예전에 정형돈이 토크쇼에 나와서 이런 이야기를 한 이야기가 기억이 났다.</p>

<blockquote>
  <p>“대학생이 성공의 기준이 무엇인지에 대해 질문을 한적이 있다. 개그맨을 꿈꾼다면 조언을 해줄 수 있겠지만, 그사람이 가자고 하는 길에 대해 아는것이 하나 없는데 내 얘기에 귀를 귀울여 변한다는것이 무섭고, 다른 사람 인생에 주제넘게 영향을 끼칠까봐 조심스러웠다”</p>
</blockquote>

<p><img width="592" alt="image" src="https://user-images.githubusercontent.com/66371206/212532415-847ae4d9-f02d-4bd2-8a3e-3fc581def0db.png" /></p>

<p>가끔 방송에서 “이렇게 해야된다~” 혹은 “이렇게 하면 안된다~” 라고 직접적으로 조언을 해주는 말을 많이 찾아볼 수 있다. 하지만 이러한 조언들이 항상 모든 사람들에게 적용 되냐는 다른 이야기라 생각한다.</p>

<p>그런 측면에서 책에서 나름 체계적이고 통계적인 분석된 결과를 가지고 문제 상황을 제기하고 해결법을 알려주지 않아, 직접 나의 상황에 맞춰 해답을 찾게 해주는것 같아 흥미롭게 읽을 수 있었다.</p>

<h2 id="인생의-통제권">인생의 통제권</h2>

<p>책을 읽다보면 지속적으로 <code class="language-plaintext highlighter-rouge">인생의 통제권</code>을 회복해야 된다는 이야기가 나오게 된다. 이는 정말 다양한 심리학적 요소들에 개입된다.</p>

<p>그 중 인상깊었던 몇 가지만 이야기해보려 한다.</p>

<h3 id="감정">감정</h3>

<blockquote>
  <p>실제로 우리는 자신의 느낌이 아니라 상대방에게 품은 <code class="language-plaintext highlighter-rouge">생각</code> 곧 주변 사람들을 보는 자신의 <code class="language-plaintext highlighter-rouge">판단</code>을 표현한다.</p>
</blockquote>

<p>예를 들어, <code class="language-plaintext highlighter-rouge">내가 느끼기에 너는 나를 사랑하지 않아</code> 는 <code class="language-plaintext highlighter-rouge">너는 나를 사랑하지않아</code>라는 판단에서 나오게 되는 것이다. 하지만 이러한 <code class="language-plaintext highlighter-rouge">판단</code>에서 나오는 실제 감정은 <code class="language-plaintext highlighter-rouge">슬픔, 무기력함, 우울함</code> 등일 것이다. 그리고 판단이 아닌 감정을 솔직하게 받아들이는 것이 나의 감정에 충실하게 살아갈 수 있는 방법이라 말한다.</p>

<p>감정을 있는 그대로 인정하며 그대로 받아들이며 감정에 충실하게 살아갈 수 있다</p>

<h3 id="귀속-오류">귀속 오류</h3>

<p>사람은 실패나 잘못을 할 때 외부로 돌리고, 잘했을 때 자신의 덕으로 돌린다.</p>

<p>이러한 근본적인 귀속 오류를 범하지 말아야 된다.</p>

<p>특히 외부상황에 따라 어쩔 수 없이 벌어진 일임에도, 성급하게 상대에게 책임을 돌리는 행동을 조심해야 된다. <code class="language-plaintext highlighter-rouge">내부의 원인 찾기</code>로 쏠리는 배경이 무엇인지 제대로 알고 비판적으로 물어보며 자아의 상호 의존적 이해를 실현시켜야 된다.</p>

<h3 id="습관화">습관화</h3>

<p>습관화란 때론 긍정적인 면도 있고 부정적인 면도 있다.</p>

<p>책에서 소개하는 한 실험은 다음과 같다. 여러 맛이 들어있는 사탕을 주며 한 집단에게는 맛별로 구별하며 사탕의 개수를 세게 하고, 다른 집단에는 그냥 전체 사탕의 개수를 먹으면서 세게 만들었다. 그리고 사탕에 대한 만족도를 조사하였을 때 맛별로 구별하며 먹었던 집단에게서 만족도가 더 높게 나왔다.</p>

<p>사탕을 먹는 행위 자체가 습관화가 되어 버려 지루해져 만족도가 떨어지는 것이다. 하지만 맛별로 구별하며 먹게 되면 계속 생각을 하고 지루함을 느끼지 않게 되어 습관화를 예방할 수 있다.</p>

<blockquote>
  <p>즉 구체적인 계획이 지루한 습관화를 예방</p>
</blockquote>

<p>이는 단순히 단순 반복작업이 아닌 우리의 일상에서도 통용되는 말이라 생각된다.</p>

<p>이전에 읽었던 <code class="language-plaintext highlighter-rouge">함께 자라기</code> 라는 책에서 아래와 같은 도표를 언급했을때가 생각났다.</p>

<p><img width="581" alt="image" src="https://user-images.githubusercontent.com/66371206/212532285-60009e0f-d0f9-451e-956d-12a51c84fb62.png" /></p>

<p>우리가 성장을 하기 위해서는 <code class="language-plaintext highlighter-rouge">Flow Channel</code>이란 공간에 속해야 된다는 내용이였다. 만약 너무 어려운 일이라는 짜증나게 되어, 난이도를 낮춰야되고, 너무 쉬워 지루함을 느낀다면 스스로 난이도를 높여야 한다. 그리고 마음의 법칙이란 책에서는 습관화가 된다는 것을 <code class="language-plaintext highlighter-rouge">Boredom</code>이란 공간으로 표시한듯 했다.</p>

<p>하지만 일에 빠르게 적응하거나 경험이 필요할 때는 습관화가 필요할 때가 있다. 이런 때도 마찬가지로 구체적인 상상을 할 수록 습관화를 학습시킬 수 도 있다고 전달한다. 이는 마치 <code class="language-plaintext highlighter-rouge">Anxiety</code>에 속해있던 상황을 <code class="language-plaintext highlighter-rouge">Flow Channel</code>로 옮기는 것과 같다.</p>

<h3 id="소통">소통</h3>

<p>우리는 가끔 상대방의 말을 듣지 않고 말을 하려고 한다. 이는 경청이 곧 찬성이라고 생각하기 때문이다. 하지만 상대방의 말을 듣는것은 완전 무해하며 경청과 찬성이 다른것임을 이해하는것이 중요하다.</p>

<h3 id="인생의-통제권-1">인생의 통제권</h3>

<p>다중의 무지, 방과자 효과, 제노비스 신드롬 등 전부 <code class="language-plaintext highlighter-rouge">conformity</code> 즉 동조에 관련된 단어이다. 남이 하는대로 따라가고 싶어하는 욕구가 있다. 이는 우리가 인생의 통제권을 잃어버린것이다. 그래서 앞서 언급했던 통제권을 연장선으로, 우리는 우리의 감정에 대해 솔직하고 표현할 수 있어야 된다는 말을 계속 언급한다.</p>

<h2 id="후기">후기</h2>

<p>나는 자기계발서를 좋아하는 편은 아니다. 정말 당연한 말을 하며 마치 엄청난 이론인것 마냥 떠드는 책들 접해서 그렇게 됐으리라 생각한다. 이번 책도 어떤 면에서는 당연한 이론을 말하기도 하였지만, 심리학 박사가 근거와 통계를 토대로 말하고 있다는 점에서 신뢰가 갔고, 귀속 오류 등 삶에서 우리가 자주 하는 실수를 언급할 때 마다 <code class="language-plaintext highlighter-rouge">내가 실제로 이랬던가?</code> 라고 반성하는 시간도 가지게 되어 재미있었다.</p>

<p>그리고 주제와 다른 이야기지만, 책에서 마쉬멜로우 실험이 나와서 초등학교 이후로 다시 읽어 보았는데, 공감이 안가는 부분이 있었다. 만약, 참을성이 없어 참지 못하고 먹은 것이 아니라, 아이의 환경에 따라 먹지 못하는것이 아니였을까? 아이의 환경이 그런 선택을 하게끔 만들어주는것이 아닐까? 라는 생각이 들었다. 그래서 이 부분에 대해 요즘 나의 Best Friend 인 Chat GPT에게 물어보았다.</p>

<p><img width="863" alt="image" src="https://user-images.githubusercontent.com/66371206/212532999-2633999b-e991-4e96-8174-1e394b8c89b8.png" /></p>

<p>실제로 결과에 대해서 논란이 존재했고, 이러한 결과는 조심해서 봐야된다고 알려줬다. 역시 나 말고도 비판적으로 보고 있었던 사람이 존재했나보다</p>]]></content><author><name>071yoon</name></author><category term="book" /><category term="book" /><summary type="html"><![CDATA[마음의 법칙]]></summary></entry><entry><title type="html">2022년 회고</title><link href="http://localhost:4000/retrospect/2022/12/31/end-of-2022.html" rel="alternate" type="text/html" title="2022년 회고" /><published>2022-12-31T00:00:00+09:00</published><updated>2022-12-31T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2022/12/31/end-of-2022</id><content type="html" xml:base="http://localhost:4000/retrospect/2022/12/31/end-of-2022.html"><![CDATA[<h2 id="1분기">1분기</h2>

<p>2022년 1분기에는 딱히 많은 일들이 없었다. 소프트웨어 마에스트로에 합격하고싶어 계속 코딩테스트준비와 면접 준비를 했었다. 하지만, 이미 벌려놓은 일들이 꽤나 있어 여러가지를 병행하며 준비를 했었다.</p>

<p>우선, 42서울에서 블랙홀에 빠지지 않기위해 꾸준히 과제를 하며, 42서울 사람들과 웹 게임을 만드는 프로젝트를 하기로해서 그것도 병행해야 했다. 결국, 주로 낮에 프로젝트를 하고, 오후 11시에 매일 알고리즘 스터디를 하며 준비를 하고, 코딩테스트를 2차까지 붙고 난 후 면접 스터디를 하며 준비했다.</p>

<blockquote>
  <p>심지어 3월에는 학교까지 다녔어야 돼서 정말 바빴던것 같다.</p>
</blockquote>

<p>부트캠프치고 정말 준비 기간이 길었는데, 서류합격을 2월 24일에 받고, 최종합격 문자가 4월 8일에 나왔으니 전전긍긍하며 기다렸던 것 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/210166063-57da40db-da8e-44c5-bd73-53560f57f218.png" alt="image" /></p>

<h2 id="2분기">2분기</h2>

<p>2분기에는 학교를 다녔어야돼서, 많은 일을 하지 못했던것 같다. 나름 학교 강의에 대한 욕심이 있어, 수업도 열심히 듣고 과제도 열심히 하느라 바빴었다. 졸업프로젝트 HCI 과목에서 어플 만드는 강의도 있었기에, 과제가 밀렸고, 소프트웨어 마에스트로 과정에서 미니프로젝트를 하며 어플을 또 만들라고 해서 정말 바쁘게 시간이 지나갔다.</p>

<blockquote>
  <p>심지어 팀원들이 제대로 따라주지 않아 정신적으로 조금 힘들었다</p>
</blockquote>

<p>그렇게 바쁘게 5월까지 흘러가고 소프트웨어 마에스트로에서 FIRE 팀원들을 만나게 되었는데, 이 때부터 조금 편했던 것 같다. 나와 맞는 팀원들과 나와 맞는 프로젝트를 진행하며 정말 즐겁게 프로젝트를 진행했다.</p>

<blockquote>
  <p>열심히 기획하던 5월의 어느날
<img width="624" alt="image" src="https://user-images.githubusercontent.com/66371206/210167385-0754a2f6-ff7d-4898-9769-c3e4e0683d06.png" /></p>
</blockquote>

<blockquote>
  <p>그리고 42서울은 자진퇴소를…ㅠㅠ</p>
</blockquote>

<p>그리고 병행한 학교역시 나름 열심히 다닌 덕인지 꽤나 괜찮은 성적으로 7학기를 마무리 지을 수 있었다.</p>

<h2 id="3분기">3분기</h2>

<p>이 때는 나름 고민이 많았다. 우선 4-2를 다니며 바로 졸업을 할지 아니면 휴학을 하고 졸업을 늦출지에 고민을 많이 했다. 하지만, FIRE 팀원을 모집할 때 휴학을 하고 프로젝트에 집중하기로 했기에, 휴학을 하고 완전히 프로젝트에 몰두하게 되었다.</p>

<p>우리팀은 정말 7, 8, 9월동안 미친듯이 개발하며 시간을 보냈다. 어쩌다 보니 올빼미 타입이 3명인 팀이였기에, 오후 1시에 다같이 센터에서 모여서 밤 11시에 각자 집에 가는 것이 일상이 되었다.</p>

<blockquote>
  <p>그런데 새벽 5시까지 팀원들이 칼답을 했다..!</p>
</blockquote>

<p><a href="https://071yoon.github.io/til/2022/11/01/how-we-work.html">FIRE는 이렇게 협업했다 보러가기</a></p>

<p>한가지 아쉬웠던 점은, 소프트웨어 마에스트로를 지원할 때만 해도 그냥 개발만 미친듯이 하면 되는지 알았는데, 과정자체가 창업이 주된 목표이기에, 창업을 위한 기획, 마케팅, 발표, 서류작성 등등을 배우게 되었다. 그리고 멘토링은 최소 주 1번을 했어야 됐고 (우리팀은 주 3번씩 진행했다..) 지원금을 사용할 때 매번 서류를 작성하거나 소모임을 진행할 때 보고서를 제출 등 개발 외적으로 해야될 일들이 너무 많았다. 물론 멘토링 등은 좋은점이 참 많았지만, 개발에만 집중하고 싶었던 나에게 조금 아쉬웠던 점이였다.</p>

<p>그럼에도 불구하고, 우리팀은 일을 정말 많이 하여 누구보다 빠르게 MVP가 나와서, 이벤트도 진행하고 프로젝트의 완성도를 높여갈 수 있었다.</p>

<blockquote>
  <p>7월의 회의록 리스트
<img width="264" alt="image" src="https://user-images.githubusercontent.com/66371206/210166486-9f4ca936-8d3d-45a3-84f6-c8c734e65739.png" /></p>
</blockquote>

<h2 id="4분기">4분기</h2>

<p>멘토링을 진행하며 멘토님께서 디자인 패턴 스터디를 제안하셔서 스터디를 진행하게 되었는데, 정말 내 개발 안목을 높여주는 계기가 되었던 것 같다. 주에 1번 2~3시간씩 진행을 하며 3개월간 하여 11월에 끝나게 되었는데, 멘토님께서 말해주시는 이야기의 절반도 제대로 이해하지 못했지만, 내가 어떠한 점이 부족하고 공부해야되는지, 그리고 더 나아가 좋은 프로그래밍이란 어떠한 것인지에 대한 생각을 할 수 있는 좋은 기회였다. 아쉬웠던 부분은, 아무래도 초반에는 이해도 잘 못하고 재미도 없었기에 제대로 준비를 하지 않았다는 점이다. 정말 내가 발표할 부분만 정리하고 공부를 대충 했었는데, 지금 돌아간다면 이 기회를 제댈 잡아 디자인 패턴을 제대로 학습했을 것 같다.</p>

<p>그리고 이 때는 프로젝트도 진행을 하였지만, 슬슬 취업준비도 같이 했었다. 사실 실제로 취업을 하려고 했던것은 아니고, 멘토님께서 면접을 보는것 까지도 경험이라고 하셔서 경험을 쌓기 위해 지원을 시작했다.</p>

<p><img width="677" alt="image" src="https://user-images.githubusercontent.com/66371206/210167280-19df9a7c-de2f-460f-bfc5-f76196d1da67.png" /></p>

<p>처음에는 이력서도 대충 쓰고, 정말 아무 생각없이 들어본 회사라면 신입/경력 할 것 없이 전부 지원을 해서 불합격을 정말 많이 받았다.</p>

<blockquote>
  <p>소프트웨어 마에스트로 과정 중이여서 가지는 못했지만, 정말 좋게 봐서 나름 중견기업에 합격도 했었다!</p>
</blockquote>

<p><img width="631" alt="image" src="https://user-images.githubusercontent.com/66371206/210167292-abb1d261-9bd5-40c3-bc1f-7900133f230e.png" /></p>

<p>그리고 12월에는 나름 취업 전략을 짜서 이력서도 수정을 하고, 인턴과 신입을 적극적으로 지원했더니 합격 소식을 많이 받을 수 있었다. 그 중에 내 워너비 회사중에 하나에 합격을 하게 되어 내년 1월부터 입사하게 되었다.</p>

<blockquote>
  <p>정규직은 아니지만.. 그래도 어차피 복학을 해야되기에 6개월동안 다녀보기로 했다!!</p>
</blockquote>

<p>많이 한것 없이 빠르게 지나갔다고 생각을 했지만, 글로 적어보니 생각보다 많은 일들이 있었고 나름대로 성장도 많이 한 것 같아 뿌듯하다. 소프트웨어 마에스트로 과정도 무사히 마칠 수 있었고, 좋은 회사에서 일해볼 기회도 생겼다.</p>

<p>내년에는 졸업도 하고, 더 좋은곳으로 취업까지 할 수 있으면 좋겠다~!</p>

<blockquote>
  <p>모도코비드 화이팅!!
<img width="464" alt="image" src="https://user-images.githubusercontent.com/66371206/210167407-a3310bf3-27e0-4236-afc0-48e10f88cce5.png" /></p>
</blockquote>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[1분기]]></summary></entry><entry><title type="html">네트워크 공부를 마치며</title><link href="http://localhost:4000/retrospect/2022/12/28/after-studying-network.html" rel="alternate" type="text/html" title="네트워크 공부를 마치며" /><published>2022-12-28T00:00:00+09:00</published><updated>2022-12-28T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2022/12/28/after-studying-network</id><content type="html" xml:base="http://localhost:4000/retrospect/2022/12/28/after-studying-network.html"><![CDATA[<h2 id="네트워크-공부를-시작하게-된-계기">네트워크 공부를 시작하게 된 계기</h2>

<p>네트워크 공부를 시작한 계기는 생각보다 단순했다. 소프트웨어 마에스트로 과정에서, 우리는 화면공유 기반의 화상채팅 웹 어플리케이션을 제작하였는데, 아무래도 RTC 기반의 작업을 하다보니 네트워크가 필수적이였다. 문제는 내가 네트워크에 대한 지식이 너무 부족하여 항상 아쉬움을 느끼게 되었고, 네트워크 공부를 시작하게 되었다.</p>

<p>사실 9월달부터 시작하려고 크로우즈 교수님이 집필하신 네트워크 하향식 접근 책을 구매했지만, 너무 바빠 볼 시간이 없었고 11월 중순부터 제대로 시작하게 되었다.</p>

<p><img width="546" alt="image" src="https://user-images.githubusercontent.com/66371206/209802965-258902ac-f3d2-457d-a91c-a9c0944531ac.png" /></p>

<blockquote>
  <p>11월에 Network 공부의 시작을 알리는 Commit</p>
</blockquote>

<h2 id="네트워크-스터디">네트워크 스터디</h2>

<p>원래 혼자 천천히 책을 읽으며 정리를 해나가는 방식으로 네트워크 공부를 하려 했지만, 프로젝트를 진행하다 보니 책에 나오는 정보들이 전부가 아님을 깨달았다.</p>

<p>프로젝트를 진행하고 면접을 보다보니 , TLS, Session, HTTP, DNS, JWT 등이 언급 되었지만, 아무래도 책은 OSI 7 Layer 관점에서 매우 세세하게 접근을 하기에 책만 읽고 네트워크 공부를 마쳤다고 하기에는 아쉬움이 들었다. 그래서 네트워크 스터디를 진행하며 네트워크 관련 지식을 전체적으로 쌓는것으로 방향성을 다시 잡게 되었다.</p>

<p>구체적으로는, 매일 오후 23시에 디스코드에서 모여 각자 맡은 네트워크 파트에 대한 공부를 진행하고, 마치게 되면 테크톡처럼 발표를 하는 방식으로 진행을 하였다. 첫 일주일은 꽤나 진행이 잘 되었지만, 아무래도 진행했던 시점인 11월 중순에 소프트웨어 마에스트로 최종 발표및 나의 면접과 채용프로세스 등 일정이 겹쳐 제대로 하지 못했다. 스터디 주최자로서 제대로 방향성을 잡지 못해 아쉬움이 남는다.</p>

<p>그렇게 다들 스터디에대한 의욕도가 떨어지고, 자연스럽게 스터디는 포기하게 되었다. 그래서 나라도 공부를 해야겠다 싶어 혼자서 진행을 하게 되었다.</p>

<h2 id="네트워크-공부">네트워크 공부</h2>

<p>나의 스터디 목표는 네트워크 관련 어떠한 인터뷰 질문을 받아도 정말 잘 대답할 수 있을정도로 말을 할 수 있을만큼 지식을 쌓는 것이였다. 그렇게 하기 위해서는 단순히 인터뷰 질문을 달달 외우기보다는, 정말 관련 이론에 대하여 공식 문서를 읽어보며 학습을 하는 방향으로 공부를 하였다.</p>

<p>예를들어, DNS를 학습하자고 마음 먹었다면, 단순히 DNS query의 순서를 학습하기 보다는, 실제로 우리가 AWS에서 애먹었던 A Record, CName 등도 같이 정리를 하고, 현재 우리가 사용하는 DNS에서는 GSLB 등으로 load balancing을 한다는 것 까지 정리를 해보았다.</p>

<p>그리고 나의 학습에는 특이한 점이 하나 존재한다. 다이어그램을 왠만하면 내가 그린다는 것이다. 다이어그램을 그리면서 학습을 하다보면, 내가 학습한 내용을 정리할 수 있고, 또한 내가 학습한 내용을 다른 사람에게 손쉽게 설명할 수 있기 때문이다.</p>

<p><img width="1242" alt="image" src="https://user-images.githubusercontent.com/66371206/209804324-7432e5ec-9f81-4f90-9154-864a24984e37.png" /></p>

<p><img width="1094" alt="image" src="https://user-images.githubusercontent.com/66371206/209804358-78ad65d1-1d46-41ed-b623-ff318fb7e803.png" /></p>

<h2 id="네트워크-공부를-하며-느낀점">네트워크 공부를 하며 느낀점</h2>

<p>사실 면접을 보면서 네트워크 관련 질문을 받았을 때 힘들었던 일이 생각보다 꽤 있었다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`google.com`을 치면 어떤 일이 일어날까요?
</code></pre></div></div>

<p>이런 질문을 처음 받았을 때 정말 너무 힘들었었다. 어디서부터 시작을 해야될지도 몰랐었지만, 이제는 정말 자신있게 대답을 할 수 있게 되었다.</p>

<p>아마 <code class="language-plaintext highlighter-rouge">네트워크가 연결되기 위한 구성요소 -&gt; 7 layer -&gt; DHCP -&gt; NAT -&gt; ARP -&gt; DNS -&gt; Routing -&gt; TLS -&gt; GET</code> 이런 방향으로 흘러가지 않을까…</p>

<p>그리고 마침 네트워크 공부를 막 마치고 다음날 면접을 보았을때 이런 질문이 나왔었다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">DHCP에 대한 설명을 해주세요</code> 라는 질문이었다. 학습했던 대로, 4가지의 과정을 설명하고, 어떤 이유에서 broadcast를 해야되는지 등 잘 대답을 했었다.</p>
</blockquote>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">REST api 에 대한 설명을 해주세요</code> 라는 다음 질문에도 <code class="language-plaintext highlighter-rouge">로이 필딩</code>이 주장한 REST부터 시작하여 <code class="language-plaintext highlighter-rouge">microsoft</code>가 주장하는 REST까지 내려오며 잘 대답을 해나갔다.</p>
</blockquote>

<p>이렇게 대답을 잘 했을 때 정말 내가 공부한게 헛된게 아니였고 뿌듯함을 더 느꼈던 것 같다.</p>

<p>단순히 인터뷰에 더 잘 대답을 할 수 있는 것 뿐만 아니라, 이제 네트워크 자체에 대해서 더 친숙해진 느낌이고, 다음에 RTC관련 문제가 생긴다면 당당하게 packet을 분석하며 어디가 문제인지 파악하고 해결할 수 있을것 만 같은 자신감이 생겼다.</p>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[네트워크 공부를 시작하게 된 계기]]></summary></entry><entry><title type="html">1일 1커밋에 대한 고찰</title><link href="http://localhost:4000/retrospect/2022/12/26/about-1-day-1-commit.html" rel="alternate" type="text/html" title="1일 1커밋에 대한 고찰" /><published>2022-12-26T00:00:00+09:00</published><updated>2022-12-26T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2022/12/26/about-1-day-1-commit</id><content type="html" xml:base="http://localhost:4000/retrospect/2022/12/26/about-1-day-1-commit.html"><![CDATA[<h1 id="1일-1커밋에-대한-개인적인-생각">1일 1커밋에 대한 개인적인 생각</h1>

<blockquote>
  <p>주관적인 생각 듬뿍 담겼음에 주의</p>
</blockquote>

<h2 id="1일-1커밋이란">1일 1커밋이란?</h2>

<p>말 그대로 하루에 하루에 커밋 한개를 한다는 뜻으로, 매일 코딩하는 습관을 들이자는 것이다.</p>

<p>한국어로 <code class="language-plaintext highlighter-rouge">1일 1커밋</code> 이라는 단어는, 2015년에 <a href="https://blog.outsider.ne.kr/1141">아웃사이더님의 블로그</a>로 시작된것으로 보인다.</p>

<p><a href="https://github.com/071yoon"><img src="https://streak-stats.demolab.com?user=071yoon" alt="GitHub Streak" /></a></p>

<p>블로그 작성 기준 92 streak으로, 나도 열심히 진행중이다!</p>

<h2 id="왜-1일-1커밋인가">왜 1일 1커밋인가</h2>

<p>아웃사이더님의 1일 1커밋에 대한 블로그를 읽고 있으면, <a href="https://johnresig.com/blog/write-code-every-day/">John Resig의 Writce Code Everyday</a> 라는 글로 가게 된다.</p>

<p>이 글에 1일 1커밋을 주장하는 바는 다음과 같다.</p>

<p><code class="language-plaintext highlighter-rouge">a week between working on some code is a long time, it’s very easy to forget what you were working on or what you left off on</code> 즉 한 코드 작업을 하다, 다른 작업을 하다 오면 공백이 생기고 길을 잃게 된다는 뜻이다.</p>

<blockquote>
  <p>컴퓨터 공학도 답게 <code class="language-plaintext highlighter-rouge">context switching</code> 비용이 든다고 적혀있다 ㅋㅋ</p>
</blockquote>

<p>그리고 포스트를 읽다보면 John Resig의 Write Code Everyday 전략은<a href="https://jenniferdewalt.com/">Jennifer Dewlt</a> 의 180일 Blog Challenge(하루에 한 웹사이트씩 180일동안 180개를 만드는 사이드 프로젝트)를 모티브로 따왔다고 한다.</p>

<h2 id="1일-1커밋-규칙">1일 1커밋 규칙</h2>

<p>그리고 완성된 Write Code Everyday는 다음과 같은 임의의 규칙이 존재한다고 알려줬다.</p>

<ol>
  <li>매일 코드를 작성해야 되며, 문서, 블로그 게시물 또는 기타 항목을 작성할 수 있지만 이는 내가 작성하는 코드에 추가되어야 합니다.</li>
  <li>유용한 코드여야 합니다. 들여쓰기 조정, 코드 재포맷, 가능하다면 리팩토링도 없습니다.</li>
  <li>모든 코드는 자정 전에 작성해야 합니다.</li>
  <li>코드는 오픈 소스여야 하고 Github에 있어야 합니다.</li>
</ol>

<p>여기에 꼭 commit을 해야된다는 규칙은 의외로 없지만, 한국에 넘어오며 잔디밭 심는것으로 넘어오며 1일 1커밋으로 말이 고정된 것 같다.</p>

<p>그리고 아웃사이더님의 블로그의 1일 1커밋 규칙은 다음과 같다.</p>

<ol>
  <li>의미 없는 커밋은 하지 않는다. 평소에도 할만한 커밋만을 작성한다. 나는 평소에도 커밋을 좀 잘게 쪼개서 하는 편이라서 이 규칙에 모호함이 있긴 하지만 스스로 양심에 맡기는 수밖에 없다.</li>
  <li>치팅은 하지만 어뷰징은 하지 않는다. 이 규칙도 약간 애매한 구석이 있기는 하다. 예를 들어 package.json에 새로운 라이브러리를 추가하고 이를 커밋하는 경우가 많은데 작업하다 보니 나는 평소에도 이렇게 했나 아니면 일일 커밋을 하기 위해서 하나 하는 고민을 종종 하게 됐다. 컴퓨터 시간을 어제로 바꿔서 커밋한다거나 하는 등의 어뷰징은 하지 않겠다는 의미이다.</li>
  <li>사이드 프로젝트 외에도 오픈 소스에 대한 공헌을 늘려간다. 이는 일일 커밋을 하는 목표이기도 하므로 개인 프로젝트에만 몰두하지 않고 틈나는 대로 다른 오픈 소스 프로젝트의 공헌하는 기회도 늘려간다. 장기적으로 특정 오픈 소스 프로젝트에 지속해서 참여하는 것이 목표이기도 하다.</li>
  <li>아무리 바빠도 일일 커밋을 최대한 한다. 바쁠 때는 안 하고 안 바쁠 때만 일일 커밋을 하게 되면 이전과 다를 바가 없으므로 바쁘고 안 바쁘고의 상관없이 진행한다.</li>
  <li>공개 저장소에 커밋하는 내용을 기준으로 한다. 현재 회사에서도 Github을 사용하기는 하지만 공개저장소에 올리는 커밋만을 기준으로 한다. 즉, Github의 공개 컨트리뷰션 그래프에 그려지는 것을 기준으로 한다.</li>
</ol>

<p>John Resig와 유사하지만, 조금 더 구체적으로 작성해주신것 같다.</p>

<h2 id="1일-1커밋-효과">1일 1커밋 효과</h2>

<p>John Resig가 느낀 매일 코드를 작성하면 느낀바는 다음과 같다.</p>

<ul>
  <li>실행 가능한 최소 코드 작성</li>
  <li>코딩하는 습관 형성</li>
  <li>Context Switching</li>
</ul>

<p>등이 있었지만, 의외로 장점만 있었던 것은 아니다.</p>

<p>흔히 말하는 워라밸이 붕괴가 된다거나, 항상 생각해야되기 때문에 불안해진다는 점도 말을 해주었다.</p>

<h2 id="내-생각">내 생각</h2>

<p>사실 나는 1일 1커밋이라는것이 꼭 프로그래밍 관점에서만 발생한다고 생각하지 않는다. 헬스를 매일매일 하는것이나, 더 단순하게 게임에서 일일 퀘스트를 깨는것도 비슷하다고 생각한다.</p>

<h3 id="숙제">숙제</h3>

<p>예전에 <code class="language-plaintext highlighter-rouge">메이플스토리</code>라는 게임을 한참 할 때 일일 퀘스트라는것이 존재했다. 매일매일 과제처럼 해야 캐릭터가 성장하고 보상을 받는 시스템으로 되어 있었다. 하루에 적어도 30분은 투자해야됐고, 누적되다 보면 정말 심리적으로 압박감이 오게된다. 실제로 게임 커뮤니티에서는 이걸 <code class="language-plaintext highlighter-rouge">숙제</code> 라고 부르기도 했었다. 그리고 나도 처음에는 캐릭터가 성장한다는 성취감에 매일매일 퀘스트를 달성했지만, 3달정도 진행을 하다 끊게 되었다.</p>

<p>캐릭터가 성장하는것은 즐겁지만, 데이트를 하던, 친구들과 술을 마시던, 계속 <code class="language-plaintext highlighter-rouge">오늘 우르스를 했었나?</code> 혹은 <code class="language-plaintext highlighter-rouge">일퀘 깼나?</code> 라는 생각이 들었었다. 이게 계속 쌓이다 보니 심리적으로 압박이 되고, 집착이 됐었던것 같다. 그리고 스트레스를 해소하기 위해 시작했던 게임인데, 오히려 불안함과 스트레스를 주게되어 접게 되었던 것 같다.</p>

<p>1일 1커밋도 마찬가지라고 생각한다. 꼭 하루에 한번쯤으 프로그래밍적으로 생각하게 만들고, 코드를 치게 함으로써 성장시켜준다는 관점, 더 나아가 오픈소스 컨트리뷰트를 하며 프로그래밍 생태계에 기여한다는 것 자체가 너무 좋은 취지라고 생각하지만, 이게 나를 불안하게 만들고 스트레스를 준다면 오히려 집착하지 않는것이 더 좋다고 생각한다.</p>

<h3 id="나만의-규칙">나만의 규칙</h3>

<p>나는 1일 1커밋을 몇년 째 해오는 사람도 아니고, 집착을 가진 사람도 아니다. 그리고 최대한 내가 스트레스를 받지 않고, 꾸준히 성장하기 위해 나만의 규칙을 정해보았다.</p>

<ol>
  <li>의미없는 커밋은 하지 않기 (docs 스페이스 만들었다 지우는 정도)</li>
  <li>시간 조작하지 않기 (amend 금지!)</li>
</ol>

<p>나에게는 딱 이정도가 좋다고 생각한다.</p>

<p>물론 아웃사이더님이나 John Resig가 언급한 정도로 매일 꾸준히 코딩을 할 수 있다면 너무 좋겠지만 나는 나를 알고 있기에 저런 빡빡한 규칙속에서는 금방 지쳐 쓰러질 것이다.</p>

<p>얇고 길게 코딩하자</p>

<p>화이팅👻</p>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[1일 1커밋에 대한 개인적인 생각]]></summary></entry><entry><title type="html">오픈소스 컨트리뷰터 찍먹해보기</title><link href="http://localhost:4000/til/2022/12/04/try-opensource-contributor.html" rel="alternate" type="text/html" title="오픈소스 컨트리뷰터 찍먹해보기" /><published>2022-12-04T00:00:00+09:00</published><updated>2022-12-04T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/04/try-opensource-contributor</id><content type="html" xml:base="http://localhost:4000/til/2022/12/04/try-opensource-contributor.html"><![CDATA[<h2 id="오픈소스-컨트리뷰터가-되어보자">오픈소스 컨트리뷰터가 되어보자</h2>

<blockquote>
  <p>항상 오픈소스 컨트리뷰터가 되어보는것이 꿈이였던 나…</p>
</blockquote>

<h2 id="괜찮은-repository-찾기">괜찮은 Repository 찾기</h2>

<p>깃허브의 망령처럼 돌아다니다 깃허브를 꾸며주는 레포지토리중 하나를 찾게되었다. 기능도 단순하고 이쁜 뱃지를 제공하는 레포였는데 나의 눈에 띈 것은 바로 번역률!</p>

<p><img width="813" alt="image" src="https://user-images.githubusercontent.com/66371206/205490276-b473ef4d-9c13-425c-80aa-4f99ad31a11b.png" /></p>

<p>한국어가 67% 밖에 번역이 되어 있지 않았다. 실제로 그렇게 많은 번역이 필요로 하는 기능은 아니였지만, 최근 업데이트되며 번역해야될 항목이 늘어나 대부분의 언어가 67%에 머물러 있어보였던 것 같다.
그래서 어떤 부분이 필요한지 확인을 해 보았는데… 두줄만 번역을 해주면 됐다..!</p>

<p>해보자!!</p>

<h2 id="issue--chore-찾아보기">Issue / Chore 찾아보기</h2>

<p>바로 PR을 날리기전에 먼저 Issue 확인을 해봐야 된다. 이번것 같은 경우에는 너무 간단한 번역일이라, 누가 선점했을 리는 없지만 누군가 작업중이라면 민폐일 수 있으니 조심하자.</p>

<p><img width="912" alt="image" src="https://user-images.githubusercontent.com/66371206/205492485-7a45de4a-5416-42d6-886e-61b940075b80.png" /></p>

<blockquote>
  <p>확인을 해 보니 다행스럽게도 아무도 작업중이지 않았다!</p>
</blockquote>

<p>README에 친절하게 어떻게 PR을 날리는지, template은 어떤 방식인지 친절하게 적혀 있으므로 천천히 따라가보도록 하자.</p>

<p><img width="947" alt="image" src="https://user-images.githubusercontent.com/66371206/205492546-590fe143-813e-4c4f-8464-41256dba4b44.png" /></p>

<h2 id="pull-request">Pull Request</h2>

<p>우선 해당하는 repository fork를 해서 복제를 하자.</p>

<p>복제한 repository에서 branch를 하나 파서 내가 원하는 부분 수정을 하고 commit -&gt; push 를 한다.</p>

<blockquote>
  <p>여기서 commit/branch name에 정해진 convention이 있을 확률이 높으니 잘 확인해보자</p>
</blockquote>

<p>그리고 github에서 fork 된 repository의 내 branch에서 실제 repository main에 create pull request를 하면 된다.</p>

<h2 id="approve">Approve</h2>

<p>개발자분이 활발하게 개발을 하셔서 그런지 자고 일어났더니 메일이 와있었다.</p>

<p><img width="676" alt="image" src="https://user-images.githubusercontent.com/66371206/205492672-49ef114e-df8b-46f1-aa9c-fa0de148cc99.png" /></p>

<blockquote>
  <p>approve 떴냐??</p>
</blockquote>

<p><img width="1294" alt="image" src="https://user-images.githubusercontent.com/66371206/205492700-6a2cdd0f-0bb8-4400-989a-dc159920ad91.png" /></p>

<p>정말 별것도 아닌 두줄 번역이지만, 나름 star 수가 2,000개가 넘는 레포지토리에 내 코드가 들어갔다니 감격이다…</p>

<p><img width="833" alt="image" src="https://user-images.githubusercontent.com/66371206/205492743-38523d04-97d1-4f38-9a60-9ff50db96cf7.png" /></p>

<p>그리고 62명의 contributor 중에서 내 이름도 들어가 있다!!</p>

<blockquote>
  <p><img width="952" alt="image" src="https://user-images.githubusercontent.com/66371206/205492794-bca47d2a-d28b-44fd-8b70-015b59594632.png" /></p>

  <p>뿌듯한 마음에 pin 까지 달아뒀다 ㅎㅎ</p>
</blockquote>

<p>나도 언젠가는 오픈소스 컨트리뷰터가 되어야지, 오픈소스 프로젝트를 해야지 마음만 먹었는데 이번에 우연한 계기로 정말 간단한 활동을 해보았는데 너무 재미있었다.</p>

<p>비록 별것도 아닌 간단한 번역이였지만, 이번을 계기로 더욱더 활발하게 오픈소스 chore 헌터가 되어야겠다.</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[오픈소스 컨트리뷰터가 되어보자]]></summary></entry><entry><title type="html">명령 패턴</title><link href="http://localhost:4000/gof/2022/11/17/command-pattern.html" rel="alternate" type="text/html" title="명령 패턴" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/11/17/command-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/11/17/command-pattern.html"><![CDATA[<h2 id="command-pattern">Command Pattern</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/202383203-558eb9f4-7433-4b6c-a5b5-8c27f52c1dd7.jpeg" alt="Command Pattern 001" /></p>

<p>커맨드 패턴에 대하여 알아봅시다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383211-00446e40-9907-4b8c-84e3-f093f8120dac.jpeg" alt="Command Pattern 002" /></p>

<p>간단한 게임을 하나 제작할 예정입니다.
이번 게임에서는 두가지 버튼만 활용할 예정이고, 버튼들은 <code class="language-plaintext highlighter-rouge">alt</code> 와 <code class="language-plaintext highlighter-rouge">ctrl</code> 만 사용할 예정이기에, <code class="language-plaintext highlighter-rouge">alt</code>에는 <code class="language-plaintext highlighter-rouge">jump</code> <code class="language-plaintext highlighter-rouge">ctrl</code> 에는 <code class="language-plaintext highlighter-rouge">attack</code> 이라는 함수를 매핑을 했습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383233-2b84ab5a-7db6-482f-947d-59eb3a38d294.jpeg" alt="Command Pattern 003" /></p>

<p>사실 이정도의 게임이라면 문제가 없습니다. 하지만 키보드 세팅이 복잡한 게임이라면 어떻게 될까요?
그럼 키 마다 세팅을 할 것입니다. 그리고 모든 키 매핑이 character에 관한 것도 아니고, <code class="language-plaintext highlighter-rouge">esc</code>는 게임 세팅창을 여는 등 다양한 <code class="language-plaintext highlighter-rouge">action</code>이 이루어 질 것입니다.</p>

<p>여기서 더 복잡한 상황을 생각해 보겠습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202387140-a83c1032-65f7-444d-b5e8-6767e8866b83.gif" alt="img" /></p>

<p>위의 영상을 보면, 같은 공격키를 누르지만, 공격에는 곰 -&gt; 새 -&gt; 호랑이 -&gt; 창 순서로 공격하게 되어 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383238-80b7e3af-ea54-4569-bdc3-a08a86e32bd2.jpeg" alt="Command Pattern 004" /></p>

<p>그걸 간단하게 코드로 보면 다음과 같이, <code class="language-plaintext highlighter-rouge">ctrl</code>을 눌렀을 때, 상황에 따라 다른 공격이 이루어지도록 수정을 해둬야 됩니다.</p>

<p>단순히 <code class="language-plaintext highlighter-rouge">키를 누른다</code> -&gt; <code class="language-plaintext highlighter-rouge">해당 키에 해당하는 Action을 취한다</code> 면 됐다고 생각했던 코드가 점점 복잡해져 가는게 보이시나요?</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383248-5e72fd6d-45c7-448e-8199-ceb56ce0b2ec.jpeg" alt="Command Pattern 005" /></p>

<p>하지만 여기서 끝이 나지 않습니다. 보통 게임에는 유저가 원하는 키에 유저가 원하는 Action을 취하도록 커스텀 가능한 환경을 제공합니다. 그럼 alt에 해당했던 <code class="language-plaintext highlighter-rouge">jump</code> 가 <code class="language-plaintext highlighter-rouge">npc/채집</code>으로 바뀌어야 됩니다.
이런 수정사항이 게임에 runtime에 수정되기란 상당히 힘들어 보입니다.</p>

<p>아니면 게임을 진행 할 수록 아까 보았던 attack 순서가 바뀌거나 추가가 되었다면 어떻게 될까요? 공격으로 지정된 키를 찾아 공격에 대한 로직을 수정해야 될 것입니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383258-1020a0e2-2f2e-4389-8d0a-660ba409f980.jpeg" alt="Command Pattern 006" /></p>

<p>Command Pattern을 활용하면 다음과 같이 간결하고 유지보수가 쉬운 형태로 유지 할 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383263-0b6a0c2e-f958-4ebd-9554-bd3d1858f8a0.jpeg" alt="Command Pattern 007" /></p>

<p>Command Pattern에는 5개의 등장인물이 존재합니다.</p>

<ol>
  <li>Command : 명령의 Interface를 정의</li>
  <li>Concrete Command : Command Interface를 구현</li>
  <li>Invoker : 명령의 행동을 개시하는 역할로 Command를 호출</li>
  <li>Receiver : Command가 실행될 때 대상이 되는 역할</li>
  <li>Client : Concrete Command를 생성 및 Receiver 역할을 할당</li>
</ol>

<p>Command는 단순히 실행을 하라는 execute 메소드만 생성을 하고, Concrete Command에서 해당하는 execute 메소드를 구현을 합니다.</p>

<p>예를 들어, AttackCommand에서의 execute라는 명령은 캐릭터를 공격을 유발합니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383268-9e6626e0-f74f-441e-8f3d-787d7bbdf0c2.jpeg" alt="Command Pattern 008" /></p>

<p>이와 유사하게 JumpCommand도 만들 수 있습니다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383273-f1c4eec2-1842-4e28-9219-621bad62eb1d.jpeg" alt="Command Pattern 009" /></p>

<p>마찬가지로, SettingCommand는 game에 해당하는 setting창을 여는 Concrete Command또한 만들 수 있다.</p>

<blockquote>
  <p>해당 command는 멤버변수는 character가 아닌 game임에 주의!</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/202383276-e859b904-42ef-4d3d-8da2-b235c8c740ce.jpeg" alt="Command Pattern 010" /></p>

<p>이제 Receiver는 Concrete Command의 실행에서 사용되는 클래스이다. 여기서 게임에서 동작하는 실제 로직을 작성하면 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383278-0a4eebac-5603-4b20-93fe-afd07b044966.jpeg" alt="Command Pattern 011" /></p>

<p>Client는 버튼으로, 해당 버튼이 어떠한 커맨드를 할 지 지정할 수 있는 setCommand 메소드가 존재하며, Invoke된 경우 커맨드를 실행시킬 수 있는 onPressed란 메소드를 구현해 주었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383279-7ea3c8ed-f171-41ee-9400-17e7ad2f54e6.jpeg" alt="Command Pattern 012" /></p>

<p>이제 실제로 Main에서 동작시켜보자.</p>

<p>우선, 필요한 버튼, 커맨드, Receiver 등을 할당시켜준다.
그 다음, 필요한 버튼에 원하는 커맨드를 setCommand로 할당시켜 준다.
마지막으로, 어떠한 입력이 나왔을 때, 원하는 버튼에 해당하는 command만 실행시켜주면 끝이다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383286-03ab9de2-cb11-4dc8-ba69-298d752f7669.jpeg" alt="Command Pattern 013" /></p>

<p>괜히 더 복잡해 보일 수 있지만, 유지보수의 관점에서 보면 정말 좋다.
아까와 같은 상황처럼, 버튼에 해당하는 Action이 수정되어야 한다면, <code class="language-plaintext highlighter-rouge">Button.setCommand(원하는 커맨드)</code> 한줄로 수정할 수 있게 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383293-d9a3720e-2cba-41d2-82ea-09248e220ac5.jpeg" alt="Command Pattern 014" /></p>

<p>혹은 공격에 대한 로직에 수정이 필요하다면, character 안에서 attack의 로직만 수정해 주면 되기에, 유지보수가 정말 쉬워진다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/202383298-b5d3877f-3572-4c2b-8b52-8404b8499019.jpeg" alt="Command Pattern 015" /></p>

<p>이걸 sequence diagram에서 보면 다음과 같다.</p>

<ol>
  <li>미리 버튼에 Command를 설정해준다</li>
  <li>버튼을 누른다면</li>
  <li>해당하는 Command의 execute를 호출</li>
  <li>execute에 해당하는 행동을 Receiver가 동작</li>
</ol>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><category term="TIL" /><summary type="html"><![CDATA[Command Pattern]]></summary></entry><entry><title type="html">REACT Hook 구현하기</title><link href="http://localhost:4000/til/2022/11/10/react-hook.html" rel="alternate" type="text/html" title="REACT Hook 구현하기" /><published>2022-11-10T00:00:00+09:00</published><updated>2022-11-10T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/10/react-hook</id><content type="html" xml:base="http://localhost:4000/til/2022/11/10/react-hook.html"><![CDATA[<h1 id="react-hook-구현해보기">React Hook 구현해보기</h1>

<h2 id="클로저">클로저</h2>

<h3 id="클로저의-개념">클로저의 개념</h3>

<p>Hook 을 구현하기 앞서 Closure에 대한 개념을 알고 가야된다. 클로저는 자바스크립트 처음 등장한 것은 아니며 함수를 일급 객체로 취급하는 함수형 프로그래밍 언어에서 사용되는 중요한 특성이다.</p>

<p>MDN 공식문서를 읽어 보면 다음과 같다.</p>

<blockquote>
  <p>A closure is the combination of a function bundled together (enclosed) with references to its surrounding state (the lexical environment). In other words, a closure gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created, at function creation time.</p>
</blockquote>

<p>즉 함수와 선언 됐을때의 렉시컬 환경과의 조합이며, function 내부에서 function 바깥에서의 범위까지 접근할 수 있게 해준다는 뜻으로 해석된다.</p>

<h3 id="클로저-예제">클로저 예제</h3>

<p>개념이 잘 와닿지 않을 수 있으므로 예제를 보고 이해해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="nx">innerFunc</span><span class="p">();</span>
<span class="p">}</span>

<span class="nx">outerFunc</span><span class="p">();</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>코드에서 보이듯 outerFunc에서 innerFunc가 선언되고, 호출도 되었다. 하지만 여기서 핵심은 <code class="language-plaintext highlighter-rouge">var x</code>이다. innerFunc에서 <code class="language-plaintext highlighter-rouge">x</code>가 호출되었지만, 이는 외부함수인 <code class="language-plaintext highlighter-rouge">outerFunc</code>에서 선언되어있다. 여기서 innerFunc가 함수 outerFunc의 내부에 선언된 내부함수이므로 innerFunc는 자신이 속한 렉시컬스코프를 참조 할 수 있으므로 x에 접근할 수 있다.</p>

<blockquote>
  <p>scope는 함수를 호출할 때가 아닌 어디에 선언했는지에 따라 달라지며, 이를 렉시컬 스코핑이라 한다</p>
</blockquote>

<p>실행 컨텍스트 관점에서 보면 다음과 같다.</p>

<ol>
  <li>내부 innerFunc가 호출되며 자신의 실행 컨텍스트가 스택에 쌓이고 변수 객체, 스코프 체인, this에 바인딩할 객체가 결정</li>
  <li>스코프 체인은 전역 스코프를 가리키는 전역 객체, outerFunc의 활성객체, 함수 자신의 스코프를 가리키는 활성 객체를 바인딩 -&gt; 렉시컬 스코프</li>
</ol>

<p>앞선 예제를 해석하면 다음과 같다</p>

<ol>
  <li>innerFunc 내부에서 x를 검색 -&gt; 실패</li>
  <li>innerFunc의 외부함수 outerFunc의 스코프에서 x를 검색 -&gt; 성공</li>
</ol>

<p>이제 innerFunc를 호출이 아닌 return으로 변환하여 보자</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">outerFunc</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  <span class="kd">var</span> <span class="nx">innerFunc</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">x</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="nx">innerFunc</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">inner</span> <span class="o">=</span> <span class="nx">outerFunc</span><span class="p">();</span>
<span class="nx">inner</span><span class="p">();</span> <span class="c1">// 10</span>
</code></pre></div></div>

<p>이제 outerFunc는 innerFunc를 반환하고 끝이 났다. 즉 1회 실행 후 실행 컨텍스트에서 제거되었으므로 outerFunc의 <code class="language-plaintext highlighter-rouge">var x</code>가 유효하지 않아, 접근할 수 있는 방법이 없어 보인다. 하지만 실제로 실행해보면 10이 잘 나온다. 이렇게 자신을 포함한 외부함수보다 내부함수가 더 오래 유지되는 경우, 내부함수가 호출되더라도 외부함수의 변수에 접근할 수 있는 환경을 클로저라 부른다.</p>

<blockquote>
  <p>반환된 내부함수가 자신이 선언됐을 때의 환경인 스코프를 기억하여 환경 밖에서 호출되어도 환경에 접근 할 수 있는 함수</p>
</blockquote>

<blockquote>
  <p>클로저에 의해 참조되는 변수는 자유변수라고 부른다</p>
</blockquote>

<h2 id="hook-구현해보기">Hook 구현해보기</h2>

<h3 id="usestate-hook">useState Hook</h3>

<p>먼저 useState의 사용 예시를 보면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">counter</span><span class="p">,</span> <span class="nx">setCounter</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nx">setCounter</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">// 1 and reflow</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">counter</span><span class="p">);</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p>즉 간단하게 생각하면, useState를 destruct한 형태로 받아오고, 첫번째 인자로 state에 대한 정보를 호출, 두번째 인자로 state를 변경할 수 있는 React의 common hook 이라 할 수 있다.</p>

<p>그럼 위와 유사하게 useState hook을 직접 구현해보자.</p>

<blockquote>
  <p>state() 함수에서 나의 상태, setState(val)에서 상태 변경</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">init</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">init</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">state</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">function</span> <span class="nx">setState</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="p">[</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">setFoo</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// 0</span>
<span class="nx">setFoo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">());</span> <span class="c1">// 1</span>
</code></pre></div></div>

<p>앞서 봤던 클로저의 개념과 매우 유사하게 이해할 수 있다. val 같은 경우에는, useState(0)을 실행한 후, 직접적으로 호출하지 않아 더 이상 접근이 안될 것 같지만, state() 와 setState()에서 사용하는 변수기에 앞서 설명했던 것 처럼 외부함수의 자유변수 즉 val에 접근을 할 수 있다.</p>

<p>이를 React 와 같은 함수형 컴포넌트에서는 다음과 같이 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">click</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">render:</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">count</span><span class="p">()</span> <span class="p">}),</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">C</span> <span class="o">=</span> <span class="nx">Counter</span><span class="p">();</span>
<span class="nx">C</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="c1">// render: { count: 0 }</span>
<span class="nx">C</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
<span class="nx">C</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span> <span class="c1">// render: { count: 1 }</span>
</code></pre></div></div>

<p>그리고 Closure를 사용하여 구현할 때 주의해야 될 점은, 함수로 꼭 감싸주어야 된다는 것이다.
다음 함수를 확인해보자</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">initialValue</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">_val</span> <span class="o">=</span> <span class="nx">initialValue</span><span class="p">;</span>
  <span class="kd">function</span> <span class="nx">setState</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_val</span> <span class="o">=</span> <span class="nx">newVal</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">[</span><span class="nx">_val</span><span class="p">,</span> <span class="nx">setState</span><span class="p">];</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="p">[</span><span class="nx">foo</span><span class="p">,</span> <span class="nx">setFoo</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 0</span>
<span class="nx">setFoo</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">foo</span><span class="p">);</span> <span class="c1">// 0</span>
</code></pre></div></div>

<p>왜 setFoo(1)을 호출했는데 아직 0일까?</p>

<blockquote>
  <p>useState의 foo를 destruct 할 때 호출에서 val을 참조하고 변경되지 않기 때문!!</p>
</blockquote>

<h3 id="useeffect-hook">useEffect Hook</h3>

<p>useEffect의 사용 예시를 보면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">do something</span><span class="dl">"</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">someDependency</span><span class="p">]);</span>
</code></pre></div></div>

<p>해석해보면 someDependency에 변경이 생겼을 때 useEffect의 함수를 실행한다는 것이다.
그럼 마찬가지로 위와 유사하게 closure를 사용하여 구현해보자.</p>

<p>먼저 closure로 저장할 hook에 대한 정보를 만들어야된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="p">[],</span>
  <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<p>여기서 hooks 배열은 closure에 해당하는 부분으로 나의 state들의 정보들을 가지고 있다. <code class="language-plaintext highlighter-rouge">hooks[currentHook]</code>으로 해당하는 state 정보를 호출 할 수 있다.</p>

<p>이제 실제로 useEffect 함수를 구현을 하면 된다. 2가지 parameter를 받아, 첫번째로는 실행할 callback 함수, 두번째는 dependency 배열을 받는다.
실행 논리는 다음과 같다.</p>

<ol>
  <li>만약 빈 array라면 처음 callback 함수를 실행 후 다시 실행되면 안된다.</li>
  <li>내 dependency array가 이전 버전과 다르다면 callback 함수를 실행한다.</li>
</ol>

<p>이제 javascript로 구현하면 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">depArray</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">hasNoDeps</span> <span class="o">=</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">;</span> <span class="c1">// if dependency is [] run once first time</span>
  <span class="kd">const</span> <span class="nx">deps</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">];</span> <span class="c1">// closure hook</span>
  <span class="kd">const</span> <span class="nx">hasChangedDeps</span> <span class="o">=</span> <span class="nx">deps</span> <span class="c1">// check closure hook and depArray</span>
    <span class="p">?</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span> <span class="o">===</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
    <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">hasNoDeps</span> <span class="o">||</span> <span class="nx">hasChangedDeps</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// call callback when depArray changed or dependency is []</span>
    <span class="nx">callback</span><span class="p">();</span>
    <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">depArray</span><span class="p">;</span> <span class="c1">// set hook to current dependency</span>
  <span class="p">}</span>
  <span class="nx">currentHook</span><span class="o">++</span><span class="p">;</span> <span class="c1">// increase hook iterator</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 마치 React에서 사용할 수 있도록 render와 useState를 함께 붙여보면 다음과 같은 형태로 나오게 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MyReact</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">hooks</span> <span class="o">=</span> <span class="p">[],</span>
    <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// hook iterator</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">render</span><span class="p">(</span><span class="nx">Component</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">Comp</span> <span class="o">=</span> <span class="nx">Component</span><span class="p">();</span> <span class="c1">// run effect</span>
      <span class="nx">Comp</span><span class="p">.</span><span class="nx">render</span><span class="p">();</span>
      <span class="nx">currentHook</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// init for next render</span>
      <span class="k">return</span> <span class="nx">Comp</span><span class="p">;</span>
    <span class="p">},</span>
    <span class="nx">useEffect</span><span class="p">(</span><span class="nx">callback</span><span class="p">,</span> <span class="nx">depArray</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">hasNoDeps</span> <span class="o">=</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">;</span> <span class="c1">// if dependency is [] run once first time</span>
      <span class="kd">const</span> <span class="nx">deps</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">];</span> <span class="c1">// closure hook</span>
      <span class="kd">const</span> <span class="nx">hasChangedDeps</span> <span class="o">=</span> <span class="nx">deps</span> <span class="c1">// check closure hook and depArray</span>
        <span class="p">?</span> <span class="o">!</span><span class="nx">depArray</span><span class="p">.</span><span class="nx">every</span><span class="p">((</span><span class="nx">el</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">el</span> <span class="o">===</span> <span class="nx">deps</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span>
        <span class="p">:</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">hasNoDeps</span> <span class="o">||</span> <span class="nx">hasChangedDeps</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// call callback when depArray changed or dependency is []</span>
        <span class="nx">callback</span><span class="p">();</span>
        <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">depArray</span><span class="p">;</span> <span class="c1">// set hook to current dependency</span>
      <span class="p">}</span>
      <span class="nx">currentHook</span><span class="o">++</span><span class="p">;</span> <span class="c1">// increase hook iterator</span>
    <span class="p">},</span>
    <span class="nx">useState</span><span class="p">(</span><span class="nx">initialValue</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">=</span> <span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="p">]</span> <span class="o">||</span> <span class="nx">initialValue</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">setStateHookIndex</span> <span class="o">=</span> <span class="nx">currentHook</span><span class="p">;</span> <span class="c1">// for setState closure</span>
      <span class="kd">const</span> <span class="nx">setState</span> <span class="o">=</span> <span class="p">(</span><span class="nx">newState</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">hooks</span><span class="p">[</span><span class="nx">setStateHookIndex</span><span class="p">]</span> <span class="o">=</span> <span class="nx">newState</span><span class="p">);</span>
      <span class="k">return</span> <span class="p">[</span><span class="nx">hooks</span><span class="p">[</span><span class="nx">currentHook</span><span class="o">++</span><span class="p">],</span> <span class="nx">setState</span><span class="p">];</span>
    <span class="p">},</span>
  <span class="p">};</span>
<span class="p">})();</span>
</code></pre></div></div>

<p>이를 활용한 Counter hook을 만든다면 다음과 같이 사용할 수 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">Counter</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">setCount</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MyReact</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">text</span><span class="p">,</span> <span class="nx">setText</span><span class="p">]</span> <span class="o">=</span> <span class="nx">MyReact</span><span class="p">.</span><span class="nx">useState</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// second hook state</span>
  <span class="nx">MyReact</span><span class="p">.</span><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">effect</span><span class="dl">"</span><span class="p">,</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">count</span><span class="p">,</span> <span class="nx">text</span><span class="p">]);</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">click</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
    <span class="na">type</span><span class="p">:</span> <span class="p">(</span><span class="nx">txt</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">setText</span><span class="p">(</span><span class="nx">txt</span><span class="p">),</span>
    <span class="na">noop</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">setCount</span><span class="p">(</span><span class="nx">count</span><span class="p">),</span>
    <span class="na">render</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">render</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="nx">count</span><span class="p">,</span> <span class="nx">text</span> <span class="p">}),</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="결론">결론</h2>

<p>물론 실제 React에서 구현된 hook은 이것보다 훨씬 효율적이고 잘 작성되었을 것이다. 여기서는 render함수를 JSX로 받아 DOM에 마운트 하는과정도 건너 뛰었고, 여럿 비효율적인 부분도 많아 보인다. 하지만, 클로저에 대한 개념과 hook의 동작과정을 더 잘 이해할 수 있게 되었다면 그걸로 충분하지 않을까?</p>

<p>참고
https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/</p>

<p>https://poiemaweb.com/js-closure</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="JavaScript" /><summary type="html"><![CDATA[React Hook 구현해보기]]></summary></entry><entry><title type="html">상태 패턴</title><link href="http://localhost:4000/gof/2022/11/03/state-pattern.html" rel="alternate" type="text/html" title="상태 패턴" /><published>2022-11-03T00:00:00+09:00</published><updated>2022-11-03T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/11/03/state-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/11/03/state-pattern.html"><![CDATA[<h2 id="개요">개요</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/199532363-edfb9a5d-b93d-4833-8c2a-c82655b23369.png" alt="image" /></p>

<blockquote>
  <p>Finite-state_machine 참고</p>
</blockquote>

<p>모든 주어진 순간에 프로그램이 속해 있을 수 있는 상태들의 수는 유한하며, 어떤 고유한 상태 내에서든 프로그램은 다르게 행동하고 한 상태에서 다른 상태로 즉시 전환될 수 있다. 현재의 상태에 따라 프로그램은 특정 다른 상태로 전환되거나 전환되지 않을 수 있으며, 이러한 전환 규칙들을 전환들(transitions)​이라고도 하고, 이러한 규칙들 또한 유한하고 미리 결정되어 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/199532122-689635dd-d965-4eda-9650-ad9e25d698ef.png" alt="image" /></p>

<p>단순한 상태 머신의 단점은 코드를 보면 바로 이해할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Document</span> <span class="ow">is</span>
    <span class="n">field</span> <span class="n">state</span><span class="p">:</span> <span class="n">string</span>
    <span class="o">//</span> <span class="err">…</span>
    <span class="n">method</span> <span class="n">publish</span><span class="p">()</span> <span class="ow">is</span>
        <span class="n">switch</span> <span class="p">(</span><span class="n">state</span><span class="p">)</span>
            <span class="s">"draft"</span><span class="p">:</span>
                <span class="n">state</span> <span class="o">=</span> <span class="s">"moderation"</span>
                <span class="k">break</span>
            <span class="s">"moderation"</span><span class="p">:</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">currentUser</span><span class="p">.</span><span class="n">role</span> <span class="o">==</span> <span class="s">"admin"</span><span class="p">)</span>
                    <span class="n">state</span> <span class="o">=</span> <span class="s">"published"</span>
                <span class="k">break</span>
            <span class="s">"published"</span><span class="p">:</span>
                <span class="o">//</span> <span class="n">Do</span> <span class="n">nothing</span><span class="p">.</span>
                <span class="k">break</span>
    <span class="o">//</span> <span class="err">…</span>
</code></pre></div></div>

<p>일반적으로 객체의 상태에 따라 적절한 행동들을 선택하는 많은 조건문​(if 또는 switch)​으로 구현되며, <code class="language-plaintext highlighter-rouge">Document</code> 클래스에 상태들과 상태에 의존하는 행동들을 추가할수록 분명해지게 된다. 그리고 프로젝트의 부피가 커질수록, transition이 발생했을 때, 메소드의 상태 조건들이 변경되어 관리가 힘들어지게 된다.</p>

<h2 id="예제">예제</h2>

<h3 id="조건">조건</h3>

<ul>
  <li>프로그램상의 1초를 현실 세계의 1시간으로 가정</li>
  <li>금고는 1개가 있음</li>
  <li>금고는 경비센터와 접속되어 있음</li>
  <li>금고에는 비상벨과 일반통화용 전화가 접속되어 있음</li>
  <li>금고에는 시계가 설치되어 있어 현재의 시간을 감시하고 있음</li>
  <li>주간은 09:00~16:59, 야간은 17:00~23:59 및 0:00~8:59</li>
  <li>금고는 주간에만 사용할 수 있음</li>
  <li>주간에 금고를 사용하면 경비센터에 사용기록이 남음</li>
  <li>야간에 금고를 사용하면 경비센터에 비상사태로 통보</li>
  <li>비상벨은 언제나 사용할 수 있음</li>
  <li>비상벨을 사용하면 경비센터에 비상벨 통보</li>
  <li>일반통화용의 전화는 언제나 사용할 수 있음(야간은 녹음만 가능)</li>
  <li>주간에 전화를 사용하면 경비센터가 호출</li>
  <li>야간에 전화를 사용하면 경비센터의 자동응답기가 호출</li>
</ul>

<blockquote>
  <p>예제 실행화면
<img src="https://user-images.githubusercontent.com/66371206/199536253-e2de98e3-b074-460f-b67f-01a008980ad8.png" alt="image" /></p>
</blockquote>

<p><img width="585" alt="image" src="https://user-images.githubusercontent.com/66371206/199536792-04b4b454-4c44-4187-9d79-02a2726e8ca2.png" /></p>

<p><img width="760" alt="image" src="https://user-images.githubusercontent.com/66371206/199537669-aef4aab4-d7c6-4da4-928a-9d43fb85f9fd.png" /></p>

<h3 id="state">State</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// state.java</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">State</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doClock</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doUse</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doAlarm</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">doPhone</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="daystate">DayState</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DayState.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DayState</span> <span class="kd">implements</span> <span class="nc">State</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">DayState</span> <span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DayState</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">DayState</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">State</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">singletone</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DayState</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">singletone</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doClock</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">9</span> <span class="o">||</span> <span class="mi">17</span> <span class="o">&lt;=</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">context</span><span class="o">.</span><span class="na">changeState</span><span class="o">(</span><span class="nc">NightState</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doUse</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">recordLog</span><span class="o">(</span><span class="s">"금고사용(주간)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doAlarm</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"비상벨(주간)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPhone</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"일반통화(주간)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[주간]"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="nightstate">NightState</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NightState.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NightState</span> <span class="kd">implements</span> <span class="nc">State</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">NightState</span> <span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NightState</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">NightState</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">State</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">singletone</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span><span class="n">singletone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NightState</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">singletone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doClock</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kt">int</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="mi">9</span> <span class="o">&lt;=</span> <span class="n">hour</span> <span class="o">&amp;&amp;</span> <span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">17</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">context</span><span class="o">.</span><span class="na">changeState</span><span class="o">(</span><span class="nc">DayState</span><span class="o">.</span><span class="na">getInstance</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doUse</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">recordLog</span><span class="o">(</span><span class="s">"비상: 야간금고 사용!"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doAlarm</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"비상벨(야간)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPhone</span><span class="o">(</span><span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">context</span><span class="o">.</span><span class="na">callSecurityCenter</span><span class="o">(</span><span class="s">"야간통화 녹음"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[야간]"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="context">Context</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Context.java</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Context</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">setClock</span><span class="o">(</span><span class="kt">int</span> <span class="n">hour</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">changeState</span><span class="o">(</span><span class="nc">State</span> <span class="n">state</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">callSecurityCenter</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">recordLog</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="safeframe">SafeFrame</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SafeFrame.java</span>
<span class="kn">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionEvent</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.awt.event.ActionListener</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SafeFrame</span> <span class="kd">extends</span> <span class="nc">Frame</span> <span class="kd">implements</span> <span class="nc">ActionListener</span><span class="o">,</span> <span class="nc">Context</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextField</span> <span class="n">textClock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextField</span><span class="o">(</span><span class="mi">60</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TextArea</span> <span class="n">textScreen</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextArea</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">60</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonUse</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"금고사용"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonAlarm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"비상벨"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonPhone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"일반통화"</span><span class="o">);</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Button</span> <span class="n">buttonExit</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Button</span><span class="o">(</span><span class="s">"종료"</span><span class="o">);</span>

    <span class="kd">private</span> <span class="nc">State</span> <span class="n">state</span> <span class="o">=</span> <span class="nc">DayState</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>

    <span class="kd">public</span> <span class="nf">SafeFrame</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">HeadlessException</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">title</span><span class="o">);</span>
        <span class="n">setBackground</span><span class="o">(</span><span class="nc">Color</span><span class="o">.</span><span class="na">lightGray</span><span class="o">);</span>
        <span class="n">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="nc">BorderLayout</span><span class="o">());</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textClock</span><span class="o">,</span> <span class="nc">BorderLayout</span><span class="o">.</span><span class="na">NORTH</span><span class="o">);</span>
        <span class="n">textClock</span><span class="o">.</span><span class="na">setEditable</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textScreen</span><span class="o">,</span> <span class="nc">BorderLayout</span><span class="o">.</span><span class="na">CENTER</span><span class="o">);</span>
        <span class="n">textScreen</span><span class="o">.</span><span class="na">setEditable</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>

        <span class="nc">Panel</span> <span class="n">panel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Panel</span><span class="o">();</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonUse</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonAlarm</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonPhone</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">buttonExit</span><span class="o">);</span>
        <span class="n">add</span><span class="o">(</span><span class="n">panel</span><span class="o">,</span> <span class="nc">BorderLayout</span><span class="o">.</span><span class="na">SOUTH</span><span class="o">);</span>

        <span class="n">pack</span><span class="o">();</span>
        <span class="n">show</span><span class="o">();</span>

        <span class="n">buttonUse</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonAlarm</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonPhone</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">buttonExit</span><span class="o">.</span><span class="na">addActionListener</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">//Event Listener Handler</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">actionPerformed</span><span class="o">(</span><span class="nc">ActionEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonUse</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span><span class="o">.</span><span class="na">doUse</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonAlarm</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span><span class="o">.</span><span class="na">doAlarm</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonPhone</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">state</span><span class="o">.</span><span class="na">doPhone</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getSource</span><span class="o">()</span> <span class="o">==</span> <span class="n">buttonExit</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"?"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setClock</span><span class="o">(</span><span class="kt">int</span> <span class="n">hour</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">clockstring</span> <span class="o">=</span> <span class="s">"현재 시간은"</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">clockstring</span> <span class="o">+=</span> <span class="s">"0"</span> <span class="o">+</span> <span class="n">hour</span> <span class="o">+</span> <span class="s">":00"</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">clockstring</span> <span class="o">+=</span> <span class="n">hour</span> <span class="o">+</span> <span class="s">":00"</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">clockstring</span><span class="o">);</span>
        <span class="n">textClock</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">clockstring</span><span class="o">);</span>
        <span class="n">state</span><span class="o">.</span><span class="na">doClock</span><span class="o">(</span><span class="k">this</span><span class="o">,</span><span class="n">hour</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">//상태전환</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeState</span><span class="o">(</span><span class="nc">State</span> <span class="n">state</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">+</span> <span class="s">"에서"</span> <span class="o">+</span> <span class="n">state</span> <span class="o">+</span> <span class="s">"로 상태가 변화했습니다."</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">state</span> <span class="o">=</span> <span class="n">state</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//경비센터의 호출</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">callSecurityCenter</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">textScreen</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"call! "</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">//경비센터의 기록</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">recordLog</span><span class="o">(</span><span class="nc">String</span> <span class="n">msg</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">textScreen</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"record ... "</span> <span class="o">+</span> <span class="n">msg</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="main">Main</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Main.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SafeFrame</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SafeFrame</span><span class="o">(</span><span class="s">"State Sample"</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">hour</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">24</span><span class="o">;</span> <span class="n">hour</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">frame</span><span class="o">.</span><span class="na">setClock</span><span class="o">(</span><span class="n">hour</span><span class="o">);</span>
                <span class="k">try</span><span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
                <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">){</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="등장인물">등장인물</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/199541328-2a641f2e-745a-4abf-b8ff-65473c7035e4.png" alt="image" /></p>

<h2 id="point">Point</h2>

<h3 id="strategy-pattern과의-차이">Strategy Pattern과의 차이</h3>

<p>이 구조는 전략 패턴과 비슷해 보이지만 한 가지 중요한 차이점이 있다. 상태 패턴에서의 특정 상태들은 서로를 인식하고 한 상태에서 다른 상태로 전환을 시작할 수 있지만 전략들은 거의 대부분 서로에 대해 알지 못한다.</p>

<h3 id="분할정복">분할정복</h3>

<p>복잡하고 규모가 큰 문제 혹은 프로그램은 그대로 해결하려하기보단, 우선 작은 문제로 나누고 또 나눠서 하나하나의 모듈들이 쉽게 해결가능한 수준까지 나눠 해결해야 한다.
State Pattern에서는 각각의 <code class="language-plaintext highlighter-rouge">상태</code>를 각각의 클래스로 표현해 문제를 분할했다. 조건과 규모가 커질수록 조건은 많아지고 분기문은 많아진다. 하지만 이번처럼 State Pattern을 사용하면 각각의 ‘상태’를 클래스고 표현해 복잡한 프로그램을 분할하여 효율적으로 관리할 수 있다.</p>

<h3 id="상태의존">상태의존</h3>

<p>SafeFrame 클래스의 setClock메소드는 Main클래스로부터 시간이 변경될 때(반복문의 순회)마다 호출되고 있다. 그리고 이 메소드는 시간을 인자값으로받아 출력 후 state.doClock(this,hour)으로 책임을 위임하고 있다. 즉, 시간의 설정을 ‘현재의 상태에 의존한 처리’로 취급하고 있다는 말입니다. 즉 state는 항상 같은값이 아닌 시간이 변경되서 기준을 충족할 때마다 주간과 야간 상태클래스로 변경하기 때문.
이처럼 State Pattern에서는 ‘상태에 의존한 처리’를 프로그램에서 표현하는방법은 다음과 같다.</p>

<ul>
  <li>추상 메소드로 선언후 인터페이스 명세(API)</li>
  <li>구현 메소드로 구현 후 각각의 클래스로 한다.</li>
</ul>

<h3 id="상태전환의-관리">상태전환의 관리</h3>

<p>State Pattern에서 상태전환을 어디서 관리하는지에 대해서는 고려해봐야 할 부분이다.
예제에서는 Context역할의 SafeFrame 클래스에서 상태전환 메소드(changeState)를 구현했다. 그리고 이 메소드를 호출하는 부분은 ConcreteState역할인 DayState나 NightState클래스이다. 다시말하면 예제에서는 ‘상태전환’을 ‘상태에 의존한 동작’으로 간주하고 있다. 이 방법은 장점과 단점이 있다.
장점은 상태전환의 시기를 하나의 클래스 내에서 가지고 있다는 점.</p>

<blockquote>
  <p>DayState 클래스가 상태전환되는 시기는 DayState 클래스 코드를 보면 된다.</p>
</blockquote>

<p>단점은 하나의 ConcreteState역할이 다른 ConcreteState역할을 알아야 한다는 점입니다.</p>

<blockquote>
  <p>doClock메소드 context.changeState(NightState.getInstance());</p>
</blockquote>

<p>이것의 문제는 클래스 사이의 의존관계를 깊게한다는 점이다.<br />
그럼, 모든 상태전환을 Context 역할의 SafeFrame클래스에 맡길수도 있는데 이 경우 ConcreteState역할의 독립성이 높아지지만 Context가 모든 ConcreteState역할을 알아야하는 문제가 발생한다. 해결책으로는 Mediator Pattern을 쓰거나 혹은 State Pattern대신 상태의 테이블(표)를 사용해 설계하는 방식이 있다.</p>

<h3 id="상태추가-is-easy">상태추가 is easy</h3>

<p>State 인터페이스를 구현하는 ConcreteState 클래스를 만들어 구현하면되기에 상태추가는 어렵지 않다.
다만, 상태전환은 다른 ConcreteState 역할과 접점이 되기에 주의해야 할 필요는 있다.
그리고 완성된 State Pattern에 새로운 ‘상태의존의 처리’를 추가하는 것은 곤란하다. 이 말은 State 역할이 인터페이스에 메소드를 추가한다는 것을 의미하며 이를 구현하는 모든 ConcreteState역할에 구현이 필요하기 때문이다.</p>

<p>출처 : Java언어로 배우는 디자인 패턴 입문</p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><summary type="html"><![CDATA[개요]]></summary></entry></feed>