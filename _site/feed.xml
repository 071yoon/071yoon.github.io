<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-07-07T15:54:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi&apos;s tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">SQLD / 정보처리기사 취득기</title><link href="http://localhost:4000/til/2024/07/07/certificates.html" rel="alternate" type="text/html" title="SQLD / 정보처리기사 취득기" /><published>2024-07-07T00:00:00+09:00</published><updated>2024-07-07T00:00:00+09:00</updated><id>http://localhost:4000/til/2024/07/07/certificates</id><content type="html" xml:base="http://localhost:4000/til/2024/07/07/certificates.html"><![CDATA[<h2 id="취득-배경">취득 배경</h2>

<p>이번 상반기에 회사를 다니며 어떤걸 해볼까? 하다 자격증 취득에 관심이 생겨 SQLD 와 정보처리기사를 취득해보게 되었다. 두 자격증 다 운이 좋게도 한번에 취득을 했고, 사실 공부한 노력과 시간에 비례하여 쉽게 취득을 한 것 같다. 하지만 해당 자격증들은 조금 호불호가 있는 자격증들이다. 특히나 정보처리기사 같은 경우에는 <code class="language-plaintext highlighter-rouge">엥 컴공생이 정보처리기사를 왜 따?</code> 라는 말이 있을정도로 인기 및 필요가 없다는 인식이 꽤나 있는 자격증이다. 그럼 내가 왜 해당 자격증을 따게 되었을까?</p>

<p>우선 SQLD 같은 경우에는, 내가 Database 과목에 취약하다는 생각이 들어서 공부하게 되었다. 내가 프론트엔드 공부를 한다는 핑계로 DB 쪽 공부에 소홀했던것도 사실이고(학교 수업은 어찌저찌 A+를 받긴 했다), 해당 과목을 배울 당시에 제대로 Database 관련 실습을 할 수 도 없어 많이 흥미가 떨어지는 과목 중 하나였다. 하지만 막상 회사를 다니며 직접 DB Query 및 Tablespace/User 관점에서 수정하는 일이 빈번하게 발생해서 제대로 공부를 할 필요를 느껴 자격증 공부를 하게 되었다.</p>

<p>다음 정보처리기사 같은 경우에는 좀 여러가지 이유가 있었다. 우선 나는 대학 입학 당시에만 하더라도 컴퓨터공학 전공이 아니였다. 기계/전자 쪽에 가까웠기에 그 때 전자/전기 기사 자격증에 대한 막연한 동경이 있었고, 아무래도 <code class="language-plaintext highlighter-rouge">4년을 한 과목에 공부를 한다 === 기사 자격증이 있다</code> 라는 인식이 있었다. 그래서 전과를 한 이후에도 언젠가는 컴퓨터공학 관련 기사를 따야지 라고 생각을 했고, 그게 마침 정보처리기사였던 것이다. 또 하나는 SQLD를 취득하고 난 후 기초적인 이론 공부가 재미있었고, 나름 배우는게 많았다 보니 정보처리기사를 취득하며 부족했던 나의 기초적인 이론 지식을 조금 더 다듬을 생각이였다. 하지만 해당 부분은 추후에 후술하겠지만, SQLD 만큼 썩 만족스럽지는 않았다.</p>

<h2 id="공부">공부</h2>

<h3 id="sqld">SQLD</h3>

<p>SQLD는 제일 유명한 수험서인 노랭이 책으로 기본을 공부하고, 모의고사가 잘 되어 있어 모의고사를 많이 풀고가면 쉽게 합격할 수 있다. 나같은 경우, 노랭이 1회독을 하고 모의고사만 인터넷에 떠돌아 다니는걸로 달달 풀고 갔다.</p>

<p>특히 내가 시험보는 회차(52회)부터 주관식이 없어지고 전부 객관식으로 바뀌어 문제가 더욱 쉬워졌다. 쿼리문 같은 경우에, 긴장하지 않고 천천히 풀면 된다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/4a4bc089-908d-4cfd-8e87-d587e0d02d90" alt="SQLD" /></p>

<p>아마 데이터베이스 수업을 들은 전공자 기준, 기본서만 1회독 하고 간다면 충분히 쉽게 합격을 할 수 있다고 생각한다. 공부기간은 길게 잡아서 3주, 벼락치기 한다면 2-3일이 이라고 생각한다.</p>

<h3 id="정보처리기사">정보처리기사</h3>

<p>정보처리기사 같은 경우, 책이 정말 많고 책들이 전부 매우 두껍다. 회사 지원금이 나와서, 지원금으로 사도 되지만, 목차를 보았을 때 조금 필요없는 부분들도 많고 쓸데없이 자세한 내용들이 많아 책은 따로 구매하지 않았다.</p>

<p>필기같은 경우에는, 합격률도 정말 높고 문제은행식으로 나온다는 이야기가 많아서 그냥 모의고사만 3회정도 풀고 들어갔다. 만약 학교 공부를 꾸준히 들었다면, 따로 노력을 들이지 않아도 필기는 쉽게 합격을 할 수 있을거라 생각한다. 꽤나 예전에 본 시험이고, CBT로 진행하여 점수가 기억이 나지는 않지만, 생각보다 안정적이게 합격했던것 같다.</p>

<p>실기같은 경우에는, 앞서 말했지만 범위가 정말 많다. 만약 내가 정말 이론적인 공부를 하는것이 시험의 목표라고 한다면, 두꺼운 시험공부 서적을 한권 구매한 후 천천히 읽어볼 것 같다. 나도 처음에는 기본 컴퓨터공학 공부를 다시 공부하는것이 목표였지만,, 정말 두꺼운 이론책을 보고나서 마음이 바뀌게 되었다. 우선 모의고사들을 분석 후 시험 트렌드를 공부했다. 내가 느낀 트렌드는 개정 후 프로그래밍 문제가 60%, 이론문제가 40% 나온다는 것.. 그리고 프로그래밍은 주로 C/JAVA/PYTHON 으로 나오기에 해당 부분들을 조금 공부해서 100% 맞추고, 이론 문제는 아는것만 푸는것으로 방향을 바꿔보았다.</p>

<p>그래서 실기도 마찬가지로 3일의 전사로, 오랜만에 포인터나 기본적인 java의 overriding 이나 상속 결과들을 조금 공부하고, 이론은 디자인패턴이나 네트워크 등 평소에 잘 아는것을 100% 맞춘다는 생각으로 공부했다. 아무래도 실기가 100% 필기로 진행되다보니 결과가 나오기까지 꽤나 시간이 걸렸지만 내 생각보다 점수가 높게 나오게 되었다.</p>

<p><img width="743" alt="정보처리기사" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/5eddcd16-7c95-40c1-919c-b32b0e2e3843" /></p>

<p>이번 시험이 조금 쉽게 나온것 같긴 하지만, 그래도 전공자 벼락치기 기준 필기 1일, 실기 3일 정도, 넉넉하게 준비한다면 필기 1주, 실기 3주면 충분할 듯 하다.</p>

<h2 id="취득-후기">취득 후기</h2>

<p>SQLD 같은 경우에는 시험공부를 하며 배운것도 많았고, 데이터베이스를 완전 기본부터 정규화 등 다시 공부를 하는것도 마음에 들었고, Query 문도 단순히 SELECT 가 아닌 정말 처음보는 LEVEL 등의 개념도 볼 수 있어 많이 배울 수 있어 좋았다. 정말 자격증만 따고 싶다면, 그렇게 점수 컷이 높지 않아 어려운 부분을 다 건너 뛰어도 합격은 할 수 있다 생각하지만, 한번쯤 1회독을 하며 Database 공부를 천천히 복기하는걸 추천한다.</p>

<p>정보처리기사 같은 경우, 내가 시간이 없다는 핑계로 많이 공부하지 않아 사실 자격증 공부를 하며 많이 배웠다고 할 수는 없을것 같다. (그런데 진짜 책 너무 두꺼워서 공부할 엄두가 안남) 그래도 뭐 합격을 하니 기분은 좋더라,, 그리고 졸업하면서 기사 자격증 하나쯤은 가지고 싶었기에 만족한다.</p>

<p>다음 자격증은 아마 리눅스마스터1급이 되지 않을까 싶다. (점점 프론트엔드에서 멀어져 가는 이 느낌은 뭘까)</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[취득 배경]]></summary></entry><entry><title type="html">굵기가 있는 div 만들기</title><link href="http://localhost:4000/web/2024/05/27/make-3d-div.html" rel="alternate" type="text/html" title="굵기가 있는 div 만들기" /><published>2024-05-27T00:00:00+09:00</published><updated>2024-05-27T00:00:00+09:00</updated><id>http://localhost:4000/web/2024/05/27/make-3d-div</id><content type="html" xml:base="http://localhost:4000/web/2024/05/27/make-3d-div.html"><![CDATA[<h2 id="굵기가-있는-div-만들기">굵기가 있는 div 만들기</h2>

<p>요즘 kinetic animation 이 대세이다. 대충 이러한 <a href="https://www.youtube.com/watch?v=V8SjH8URkuc">[SAMSUNG AI]</a> 애니메이션들이라 볼 수 있다.</p>

<p>위와 같은 애니메이션은 사실 그렇게 어렵지 않게 캔버스 없이도 웹으로 구현이 가능하다. 아주 동일하지는 않지만, bezier curve를 대충 그린다면 <a href="https://071yoon.github.io/kinetic/samsung/ai">이렇게</a> 구현을 할 수 있다.</p>

<p>하지만 만약 3D animation 이라면 이야기가 조금 달라진다. LG 로고의 예시를 봐보자.</p>

<p><a href="https://www.youtube.com/shorts/0ak8UT3zt4w">눈도 반짝 입도 활짝, 저 뭐 달라진거 없나요?</a> 해당 영상을 보면 로고가 다채롭게 움직이는걸 볼 수 있다.</p>

<p>물론 해당 이미지는 canvas 를 활용하면 손쉽게 3D animation 으로 구현할 수 있지만, 문서안 혹은 텍스트 사이에 사용하기 쉽지 않아, div 로 구현을 해보려고 한다.</p>

<h2 id="div-만들기">DIV 만들기</h2>

<p>전체 애니메이션을 따라 만들기에는 시간이 부족하니 우선 3D 부분이 눈에 띄는 눈 부분을 제작해보기로 하자.</p>

<h3 id="아이디어-생각">아이디어 생각</h3>

<p>처음 드는 생각은 눈 자체를 동그란 형식으로 만든 뒤 rotateX 혹은 rotate3D를 통해 돌리는 방안이 제일 먼저 떠오른다.</p>

<p>하지만 그렇게 설계하고 구현할 경우, 굵기를 표현하기가 어려운데, 간단하게 이미지로 예시를 들어보면 다음과 같다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/8613452b-b7f5-4e3e-acf2-8f46c8cddb9f" alt="image" /></p>

<p>이를 만약 우리가 보는 화면 기준에서 바라본다면.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/7cb1ebca-84de-4851-990b-38bbed5f2c55" alt="image" /></p>

<p>이런 형식으로 보이게 될 것이다.</p>

<blockquote>
  <p>전혀 3D 처럼 보이지 않는다.</p>
</blockquote>

<p>이는 perspective 나 3D 로테이션을 준다 하여도 thickness 자체를 주기는 어려워보인다.</p>

<p>실제 현실에서 어떤식으로 구현이 되어야 하는지 한번 생각해보면 다음과 같다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/f3f4bab6-efb2-4ed9-8740-fd63c57c7f3a" alt="image" /></p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/6446390b-3c8a-4146-99cb-03790f8cbbc7" alt="image" /></p>

<p>이런식으로 표현 될 수 있다.</p>

<p>이를 dom 을 통해 구현해보자.</p>

<h3 id="구현해보기">구현해보기</h3>

<p>정작 그림에 필요한 부분을 따로 본다면 다음 이미지 처럼 볼 수 있다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/fecbc43e-3f31-42df-b54a-c3783db9870c" alt="image" /></p>

<p>즉 간단하게 도식화 해서 살펴보자면 해당 부분만 구현을 하면 3D 처럼 보일 수 있다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/76151c39-2111-47e4-b658-3eef73b81b3c" alt="image" /></p>

<p>그리고 이미 원 부분은 간단하게 그린 후 <code class="language-plaintext highlighter-rouge">rotateX(90)</code> 으로 해결이 되므로 위 막대만 위치에 맞춰 회전 시켜주면 된다.</p>

<p>그럼 대충 이런 형식으로 그릴 수 있다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/2894f60d-f2ef-4747-ba13-36e46fad7c4b" alt="image" /></p>]]></content><author><name>071yoon</name></author><category term="web" /><category term="web" /><summary type="html"><![CDATA[굵기가 있는 div 만들기]]></summary></entry><entry><title type="html">Lighthouse 점수 개선기</title><link href="http://localhost:4000/web/2024/04/07/lighthouse-improvement.html" rel="alternate" type="text/html" title="Lighthouse 점수 개선기" /><published>2024-04-07T00:00:00+09:00</published><updated>2024-04-07T00:00:00+09:00</updated><id>http://localhost:4000/web/2024/04/07/lighthouse-improvement</id><content type="html" xml:base="http://localhost:4000/web/2024/04/07/lighthouse-improvement.html"><![CDATA[<h2 id="배경">배경</h2>

<p>내 정보를 보여주는 웹사이트를 대충 만든지 8개월이 지났다. 가끔 자격증을 따거나 업데이트 소식이 있을 때 사용했었는데, 오랜만에 들어가서 보니 light house 점수가 말이 아니였다.</p>

<p>여유로운 주말에 점수나 올려보자 시작된 웹 개선기.</p>

<h2 id="수정-사항">수정 사항</h2>

<p>처음에 모바일도 고려해서 만들었기에, CLS 같은 류는 점수가 그렇게 낮지는 않았다. 그래서 우선 light house를 한번 돌려본 후 알려주는 수정사항만 추가해보았다.</p>

<h3 id="sufficient-contrast-ratio">Sufficient Contrast Ratio</h3>

<p>글을 배경에 비해서 contrast 가 존재해야 되는데, 흰 배경에 회식글을 작성해서 생긴 문제였다. 디자이너가 없는 사이트였기에, 나 혼자 디자인이랍시고 회색으로 a tag를 만들었었는데, 구글을 마음에 들지 않았나보다. 적당히 색을 검정에 가까운 회색으로 수정하여 해결</p>

<h3 id="links-must-have-discernible-text">Links must have discernible text</h3>

<p>링크에 label이 없어서 생긴 문제. 각 링크별로 label로 어떤 역할을 하는지 알려줘야 링크에 대한 속성을 알 수 있어 screen leader가 읽을 수 있는데, 적지 않아서 생긴 문제. 예전에 image에 대한 것들은 alt prop으로 추가해두었는데, 링크에 대한 부분은 그냥 a tag 내부에 있는걸 읽을것으로 예상해서 문제가 없을 줄 알았는데 틀렸나보다.</p>

<p>a tag에 aria label 속성을 추가하여 해결</p>

<h3 id="console에-나오는-에러-해결">Console에 나오는 에러 해결</h3>

<p>이거는 light house 보다 Next.js에서 warning 이나 error가 나오는 부분이 console에 찍히고, 개선하라고 나온 문제였다.</p>

<p>오류 자체는 Next.js 13 이상의 이미지에서는 style prop을 지원하기에, 원래 Image tag에 바로 적용했던 style 속성을 Image -&gt; style -&gt; prop 으로 수정해서 해결</p>

<h3 id="lcp">LCP</h3>

<p>LCP(Largest Content Paint)는 웹 화면의 첫 로딩 속도에 문제가 생길 경우 낮게 점수가 나온다. 보통 이미지의 사이즈가 큰 경우 로딩에 문제가 생기고, 마찬가지로 나도 사이트에 gif 이미지를 넣어, 로딩이 오래 걸렸었다. 해당 문제는 Next.js image의 priority 속성을 추가해 높은 우선순위를 주어 LCP 의 로딩속도를 개선하여 해결</p>

<h3 id="seo">SEO</h3>

<p>링크만 타고 올거라 예상한 사이트였기에, 따로 SEO 설정을 하지 않았는데, 점수가 낮게 나와 간단하게 robots.txt 와 sitemap.xml을 추가하여 해결</p>

<h2 id="결과">결과</h2>

<p>사실 light house는 본인의 컴퓨터 성능이나, 웹 캐시 등 다양한 이슈에 따라 점수가 다르기에 절대적인 지표는 절대 아니다.</p>

<p>내 사이트 또한 로컬 배포된 환경에서 실행하고 light house에서 알려주는 문제만 해결했기에, 완벽하게 최적화된 사이트라고 볼 수는 없다. 하지만 우선 높은 점수를 받은걸로 만족하고, 다음에는 조금 더 절대적인 사이트 최적화를 진행해보도록 하자.</p>

<p><img width="593" alt="스크린샷 2024-04-07 오후 12 25 19" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/840de045-79eb-43f8-be16-be548cd7d699" /></p>]]></content><author><name>071yoon</name></author><category term="web" /><category term="web" /><summary type="html"><![CDATA[배경]]></summary></entry><entry><title type="html">Github Action starter 오류 수정 이야기</title><link href="http://localhost:4000/til/2024/04/01/opensource-github-action.html" rel="alternate" type="text/html" title="Github Action starter 오류 수정 이야기" /><published>2024-04-01T00:00:00+09:00</published><updated>2024-04-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2024/04/01/opensource-github-action</id><content type="html" xml:base="http://localhost:4000/til/2024/04/01/opensource-github-action.html"><![CDATA[<h2 id="서론">서론</h2>

<p>github action 의 starter workflows는 github의 기본적으로 page를 deploy 할 시 등 가장 기본적으로 사용되는 workflow이다. 아마 많은 FE 개발자 혹은 github pages를 통하여 블로그를 만드시는 분들은 많이들 사용해 봤을 것이라 생각된다.</p>

<p>보통 이러한 workflow는 보통, github deploy 페이지에서 GUI로 선행되어 repository 까지 갈 일이 보통 없다. 그런데, 꽤나 예전에 평소처럼 github page에서 Next.js deploy를 하였는데 문제가 생겼던 경험이 있다. 해당 문제를 타고보니 starter-workflows 에서 최신 Next.js를 지원하지 않아서 문제가 발생했고, 현재 수정이 되었는데, 해결과정을 서술해보도록 하겠다.</p>

<h2 id="문제-파악">문제 파악</h2>

<p>우선 문제는 크게 두가지였다.</p>

<ol>
  <li>Next.js v.14에서는 node 버전을 공식적으로 node v.18 이상을 사용해야된다 &gt; <a href="https://nextjs.org/docs/pages/building-your-application/upgrading/version-14">참고</a></li>
  <li>next config 에서 default output을 export로 지정하고, static HTML export를 따로 실행하지 않는것으로 바뀌었다 &gt; <a href="https://nextjs.org/docs/app/building-your-application/deploying/static-exports">참고</a></li>
</ol>

<p>해당 두 가지 문제를 해결하기 위해서는 next.config.js 파일도 수정해야 하지만 github action workflow에도 수정이 필수적으로 필요했다.</p>

<p>5개월 전 삽질의 흔적을 보니 로컬에서는 변경 후 잘 작동 했던것으로 보인다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/4d74aac6-1196-4e46-98ed-708d89d34171" alt="image" /></p>

<p>여기서 나의 문제는 해결 되었지만, 아무래도 공식 workflow 에서 수정하지 않으면 나와 비슷한 사람들이 많을 것 같아 repository 까지 들어가보며 확인을 해 보았다.</p>

<h2 id="공식적으로-해결해보기">공식적으로 해결해보기</h2>

<p>우선 꽤나 많은 사람들이 사용하는 workflow template 인데, 나만 문제가 생겼을거라 생각하지 않아 pull request 를 살펴보니 비슷한 문제들이 많이 있었다.</p>

<blockquote>
  <p>문제를 기술 및 해결한 <a href="https://github.com/actions/starter-workflows/pull/2204">PR LINK</a></p>
</blockquote>

<p>여기서는 앞서 문제 파악에서의 2번 문제 즉 yaml 에서 static HTML export를 하는 부분을 삭제 해주기는 하였지만, node 버전 수정을 하지는 않았다. 이 부분은 편하게 댓글을 달아 수정 요청사항을 추가해서 반영토록 도와주웠다.</p>

<p><img width="933" alt="image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/e43305c9-5436-4e79-849d-ba99e51a33ad" /></p>

<p>그리고 무려 PR이 올라간지 5개월이 지난 현재 잘 수정되었다고 메일이 왔다.</p>

<p><img width="952" alt="image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/6af5eb93-4eec-4c66-a4c9-e5c73f0fb430" /></p>

<p>한가지 아쉬웠던 점은, 따로 PR로 빼서 날렸으면 나도 contributor badge를 받을 수 있었을텐데, 귀찮아서 댓글만 남기고 넘어갔던 것 정도,,</p>

<blockquote>
  <p>그리고 진짜 간단한 PR인데, 되게 여유롭게 일 하시는듯</p>
</blockquote>

<p>여튼 좋은 일 하나 하기 성공</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><summary type="html"><![CDATA[서론]]></summary></entry><entry><title type="html">Firebase JWT 에러</title><link href="http://localhost:4000/web/2024/03/28/firebase-jwt.html" rel="alternate" type="text/html" title="Firebase JWT 에러" /><published>2024-03-28T00:00:00+09:00</published><updated>2024-03-28T00:00:00+09:00</updated><id>http://localhost:4000/web/2024/03/28/firebase-jwt</id><content type="html" xml:base="http://localhost:4000/web/2024/03/28/firebase-jwt.html"><![CDATA[<h2 id="문제-확인">문제 확인</h2>

<p>최근 운영하고 있던 서버 중 하나에 정말 큰 문제가 생겼다. 갑자기 모든 화면이 보이지 않는다는것.</p>

<p>현재 DB를 Firebase를 쓰고 있었는데, 혹시나 firebase DB를 너무 많이 써서 초기화를 시켜버리거나 하지는 않았을까? 백업을 안한지 오래됐는데 혹시 파일이 날라가면 어떡하지 두근두근 거리며 확인을 했더니 데이터는 다행히 살아있었고, 즉 firebase 문제는 아니였다.</p>

<p>모든 데이터가 보이지 않고, 작성/수정/삭제 등 모든 기능이 정지되었다. 흠,, 그렇게 되면 사실 데이터를 가져오는 곳에서 문제가 생겼다는 것이고 높은 확률로 fetch 부분이였기에 그부분을 자세히 살펴보았다. 그러던 중 이러한 코드를 발견</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="p">(</span><span class="nx">token</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">jwtDecode</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="p">{</span> <span class="na">header</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="k">if</span> <span class="p">(</span>
    <span class="nx">decoded</span><span class="p">.</span><span class="nx">kid</span> <span class="o">===</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_CERT_ONE</span> <span class="o">||</span>
    <span class="nx">decoded</span><span class="p">.</span><span class="nx">kid</span> <span class="o">===</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NEXT_PUBLIC_FIREBASE_CERT_TWO</span>
  <span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>꽤나 최근에 작성된 코드였는데, jwt 인증 토큰을 가지고 kid 를 비교해서 올바른 token인지 확인하는 과정이였다.</p>

<p>해당 코드를 작성하게된 계기는 웹사이트 인증수단이 필요했고, 모든 get/update/delete 등 firebase api를 활용할 때 인가를 주기 위해서였다.</p>

<p>그리고 firebase website 내에서도 <code class="language-plaintext highlighter-rouge">마지막으로, 토큰의 kid 클레임에 해당하는 비공개 키로 ID 토큰이 서명되었는지 확인합니다.</code> 이렇게 작성이 되어 있어, 서명 확인을 조금 단순하게 kid key 값을 가져와 env로 설정하여 진행했었는데, 바로 이 부분에서 문제가 생겼다.</p>

<h2 id="해결">해결</h2>

<p>앞 코드의 <code class="language-plaintext highlighter-rouge">NEXT_PUBLIC_FIREBASE_CERT_ONE/TWO</code> 같은 경우는 <a href="https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com">google api 사이트</a>에서 직접 가져온 kid 코드였다.</p>

<p>작성 당시에는 문제가 없을거라 생각했는데, google api가 똑똑한것인지 kid 코드를 주기적으로 변경하여 생긴 문제였다. 임시방편으로 웹사이트에 들어가 새로운 kid로 env를 수정하니 생긴 오류는 막을 수 있었다.</p>

<p>다음은 주기적으로 같은 문제가 재발하지 않기위한 코드 수정이 남았다.</p>

<p>수정사항은 간단하다. google api 서버에 접속하여 kid를 실시간으로 가져온 후 jwt decode를 한 kid와 매칭시켜본다. 여기서 추가되는 부분은 <code class="language-plaintext highlighter-rouge">매번 google api 서버에 요청하기보다 한번 가져온 후 재사용할 수 있었으면 좋겠다</code> 였다.</p>

<p>나 혼자 작성해도 크게 문제될 것 없는 쉬운 문제이지만 reference는 언제나 좋으니 github을 뒤적거리다 좋은 소스를 발견했다.
바로 이름부터 신뢰가 가는 <a href="https://github.com/kriasoft/web-auth-library/blob/42a722e4cedc09ea2a86f92fe5aed73b19e5de94/google/credentials.ts#L43">web-auth-library</a>.</p>

<p>대충 보아하니, auth 인증이 된 유저 instance를 만들어 사용하는 방법인것 같은데, 내 서비스와 살짝 상황이 달랐다. 그래도, 싱글톤 instance로 관리하면 재요청 하지 않고 계속 쓰일 수 있을 것 같아 FirebaseCert Class를 만들어 관리하기로 했다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">private</span> <span class="k">async</span> <span class="nx">getCertificateFromServer</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">fetch</span><span class="p">(</span><span class="nx">CLIENT_AUTH_URL</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">();</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">setCert</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>대충 이런식으로 initialize를 1회 해주는 class를 만들어</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">firebaseCert</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FirebaseCert</span><span class="p">();</span>

<span class="kd">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="p">(</span><span class="nx">token</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">decoded</span> <span class="o">=</span> <span class="nx">jwtDecode</span><span class="p">(</span><span class="nx">token</span><span class="p">,</span> <span class="p">{</span> <span class="na">header</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">firebaseCert</span><span class="p">.</span><span class="nx">getCert</span><span class="p">()</span> <span class="o">||</span> <span class="o">!</span><span class="nx">decoded</span><span class="p">.</span><span class="nx">kid</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">firebaseCert</span><span class="p">.</span><span class="nx">getCert</span><span class="p">());</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nx">includes</span><span class="p">(</span><span class="nx">decoded</span><span class="p">.</span><span class="nx">kid</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>이렇게 사용하도록 수정했다.</p>

<p>테스트해보니 fetch도 최초 1회만 하고, 페이지 전환을 하여도 client 세션이 만료되거나 새로고침 전에는 재 요청 하지 않음을 확인할 수 있었다.</p>

<p>오늘의 문제 해결 끝</p>]]></content><author><name>071yoon</name></author><category term="web" /><category term="web" /><summary type="html"><![CDATA[문제 확인]]></summary></entry><entry><title type="html">SQL 함수 알아보기</title><link href="http://localhost:4000/sql/2024/03/02/sql-functions.html" rel="alternate" type="text/html" title="SQL 함수 알아보기" /><published>2024-03-02T00:00:00+09:00</published><updated>2024-03-02T00:00:00+09:00</updated><id>http://localhost:4000/sql/2024/03/02/sql-functions</id><content type="html" xml:base="http://localhost:4000/sql/2024/03/02/sql-functions.html"><![CDATA[<h2 id="sql-함수-알아보기">SQL 함수 알아보기</h2>

<p>평소에 SELECT, INSERT, ALTER, CREATE 등 일반적인 DML, DDL문법만 사용하였는데 일을 하면서 다양한 문법들을 마주하고 공부하고 필요함이 느껴져 조금이나마 정리를 해보자고 한다</p>

<h2 id="coalesce">COALESCE</h2>

<blockquote>
  <p>NULl이 아닌 첫번째 값을 반환하는 함수</p>
</blockquote>

<p>행을 보고 COALESCE(col1, col2, col3) 이라면, 차례대로 col1, col2, col3 값을 보며 제일 먼저 null이 아닌 값을 반환하게 된다.</p>

<p>마지막 값에 static한 값을 넣어두면, NVL과 비슷한 형태로 사용할 수 있다.</p>

<h2 id="rollup">ROLLUP</h2>

<blockquote>
  <p>합계를 쉽게 사용하기 위해 사용</p>
</blockquote>

<ul>
  <li>GROUP BY ROLLUP</li>
  <li>GROUP BY GROUP_COLUMN WITH ROLLUP</li>
</ul>

<p>두가지 형태로 사용 가능하며, <code class="language-plaintext highlighter-rouge">GROUP BY</code> 를 하여 합계에 대한 새로운 row를 생성해준다.</p>

<h2 id="decode">DECODE</h2>

<p>ORACLE에서 사용하는 CASE WHEN 문법</p>

<p><code class="language-plaintext highlighter-rouge">DECODE(GENDER, 'M', 'Male', 'F', 'Female', 'others')</code></p>

<p>라 하면, GENDER가 ‘M’ 이면 ‘Male’, ‘F’면 ‘Female’, 둘 다 아니면 ‘others’인 문법</p>

<h2 id="character--varchar">CHARACTER / VARCHAR</h2>

<p>CHAR인 경우 크기가 고정되며, 만약 부족하다면 우측에 공백을 넣어 사이즈를 무조건 맞춘다.</p>

<p>VARCHAR인 경우, 가변 길이기에 공백을 넣는 방식이 아님.</p>

<h2 id="connect-by">CONNECT BY</h2>

<blockquote>
  <p>CONNECT BY, LEVEL, PRIOR 등 다양한 문법 세트
https://vaert.tistory.com/166 이사람의 블로그를 보면 쉽게 이해가 가능하다</p>
</blockquote>

<p>헷갈리는걸 정리 한번만 하자면 PRIOR 순서.</p>

<p><code class="language-plaintext highlighter-rouge">connect by 직속상사 = prior 직원</code> 이라면 <code class="language-plaintext highlighter-rouge">방금 전 행의 직원 값이 현재 행의 직속상사 값인 모든 행을 찾아라</code>
즉 이 순서라면 직속상사가 상위 계층(LEVEL 1) 으로 뻗어져가는 노드의 형태가 되고,</p>

<p><code class="language-plaintext highlighter-rouge">connect by prior 직속상사 = 직원</code> 이라면 <code class="language-plaintext highlighter-rouge">방금 전 행의 직속상사 값이 현재 행의 직원 값인 모든 행을 찾아라</code>
이 순서라면 제일 아래 직급이 상위의 계층이 되는 형태로 정렬이 된다.</p>

<h2 id="rank">RANK</h2>

<p>RANK는 <code class="language-plaintext highlighter-rouge">RANK() OVER()</code> 형태로 사용되며, 순위를 지정하는데 사용된다.
RANK 자체가 순위를 지정하기에, OVER 구문에 ORDER BY 로 순서를 지정해주어야 한다.</p>

<blockquote>
  <p>ex. RANK() OVER(ORDER BY SOMETHING DESC) as rank</p>
</blockquote>

<p>일반 RANK는 중복값이 들어갔을 경우, (1, 1, 3, 4, 5..) 이런 방향이라면 DENSE_RANK는 (1, 1, 2, 3, 4) 이렇게 중복과 순위의 측정 방식에 따라 다르다.</p>

<p>공부하다 새로운것이 생기면 더 정리할 것</p>]]></content><author><name>071yoon</name></author><category term="sql" /><category term="sql" /><summary type="html"><![CDATA[SQL 함수 알아보기]]></summary></entry><entry><title type="html">객체지향의 사실과 오해</title><link href="http://localhost:4000/book/2024/01/28/essence-of-oop.html" rel="alternate" type="text/html" title="객체지향의 사실과 오해" /><published>2024-01-28T00:00:00+09:00</published><updated>2024-01-28T00:00:00+09:00</updated><id>http://localhost:4000/book/2024/01/28/essence-of-oop</id><content type="html" xml:base="http://localhost:4000/book/2024/01/28/essence-of-oop.html"><![CDATA[<h2 id="객체지향의-사실과-오해">객체지향의 사실과 오해</h2>

<p>약 2년전에 사두고 시간이 없다는 핑계로 읽지 않았던 책을 이제야 읽게 되어 남기는 후기. (AKA 토끼책)</p>

<p>워낙 유명한 책인탓에, 내용을 정리하거나 분석해놓은 글은 정말 많기에, 읽으면서 느꼈던 나의 생각과 후기를 정리해보려고 한다.</p>

<h3 id="책에-관하여">책에 관하여</h3>

<p>이 책에서는 역할, 책임, 협력 그리고 객체의 자율성에 대한 개념을 끊임없이 강조하고 객체지향에 대해서 굉장히 추상적으로 정리한다.</p>

<p>객체란 클래스와 동의어가 아니며, 실세계와 일치시키려는 노력을 버리고 객체지향은 이런거야!를 설명한다. 이는, 전공생 기준 1학년 때 배우는 객체지향의 설명의 잘못된 점을 지적하고 개념을 새로이 정립하려는 의도로 보였다.</p>

<p>주로 1학년 때 배웠던 것은, 객체는 클래스에서 만든 instance이며, class라 함은 상속등을 통하여 다형성을 만족할 수 있다고 배운다. 무려 7년전 기억을 끄집어 내어 현재 내가 생각하는 객체지향과 한번 비교를 해보자.</p>

<h3 id="객체지향은-붕어빵인가">객체지향은 붕어빵인가</h3>

<p>생각해보면, 1학년 때는 객체지향을 붕어빵틀과 붕어빵, 혹은 다양한 종류의 피자들로 배웠던 기억이 난다. 실제로 1학년 때 교재의 첫장에는 이러한 글이 적혀있다.</p>

<blockquote>
  <p>클래스와 객체는 붕어빵틀과 붕어빵의 관계와 유사하다.</p>

  <p>클래스는 붕어빵을 찍어내는 틀이며, 객체는 붕어빵이다.</p>
</blockquote>

<p>이러한 비유법은 사실 나는 크게 나쁘다고 생각하지는 않는다. 처음 배우는 학생들에게 객체지향에 대한 진입장벽을 낮추고 쉽게 이해를 시킬 수 있는 좋은 수단이라고 생각한다.</p>

<p>하지만, 토끼책의 저자는 객체란 자율성을 부여받고 request와 response 관계가 있어야 한다는 점에서 이러한 예시는 정답이 아니라고 이야기한다.</p>

<p>이를 설명하기 위해 책에서는 커피의 주문을 예시로 둔다. 손님의 역할은 주문할 책임을 지는것으로, 바리스타에게 주문을 <code class="language-plaintext highlighter-rouge">request</code>하고 바리스타의 역할은 커피를 만들 책임을 지는것으로, 커피를 <code class="language-plaintext highlighter-rouge">response</code>로 전달한다.</p>

<p>즉 객체지향은 기능이 우선이 아닌, 이러한 <code class="language-plaintext highlighter-rouge">협력의 구조</code>가 우선시 되고 기능이 나오기에 붕어빵의 예시는 옳지 않다는 뜻이다. 또한, 현실 사물과 비교를 했을때의 문제는, 객체는 자율성을 가지고 판단을 할 수 있어야 하지만, 사물을 예시로 드는 순간, 사물이 판단을 해야 한다는 현실과의 괴리감이 생겨 오히려 이해가 어려울 수 있다는 말을 전달한다.</p>

<p>1학년 때 만약, 이 책을 읽었다면 오히려 이해가 되지 않거나 굉장히 객체지향은 복잡하다고 생각했을 것 같다. 하지만, 개발을 꽤나 해보고 항상 개발을 하기 전 구조를 작성하고 진행을 해서인지 교양책처럼 공감을 하며 읽었던것 같다.</p>

<h3 id="후기">후기</h3>

<p>해당 책에는 예시를 코드로 들지 않는다. 대신 그림이나 UML 다이어그램등을 잘 활용하여 표현한다. 이러한 부분을 오히려 이해하기 어렵다고 부정적으로 생각하는 사람도 있었지만, 나는 오히려 다이어그램이 저자가 말하고 싶은 협력의 부분을 더 강조하고 이해를 도와주어 이해하기가 편리했다.</p>

<p>사실 개발을 하다보면, 자연스럽게 책에서 말하고자 하는 바가 모두의 코드에 녹아들어 있을 수 밖에 없다고 생각한다. 하지만, 해당 책은 이러한 알고는 있지만, 말 혹은 글로 표현하기 어려운 점들을 글로 정말 잘 풀어 냈다고 생각한다. 그리고 개발을 하며 설계에 대해 한번쯤은 더 생각하게 만들어 주는 책이라 생각한다.</p>

<p>사실 해당 책은 객체지향을 하기전 무조건 읽어야된다! 혹은 객체지향의 바이블! 이런 느낌 보다는 이렇게 해야 확장성 혹은 누구나 쉽게 이해할 수 있는 코드가 되지 않을까? 에 가깝다고 생각한다.</p>

<p>개발트렌드가 있고 TDD, 함수형 프로그래밍이 뜨고 있는 시대 개발이론에 옳고그름은 없다 생각한다. 하나의 개발 교양도서로 한번쯤은 읽어보면 좋은 책이라 생각한다.</p>]]></content><author><name>071yoon</name></author><category term="book" /><category term="book" /><summary type="html"><![CDATA[객체지향의 사실과 오해]]></summary></entry><entry><title type="html">자바스크립트 메모리관리</title><link href="http://localhost:4000/javascript/2024/01/02/js-memory-management.html" rel="alternate" type="text/html" title="자바스크립트 메모리관리" /><published>2024-01-02T00:00:00+09:00</published><updated>2024-01-02T00:00:00+09:00</updated><id>http://localhost:4000/javascript/2024/01/02/js-memory-management</id><content type="html" xml:base="http://localhost:4000/javascript/2024/01/02/js-memory-management.html"><![CDATA[<h2 id="메모리란">메모리란</h2>

<p>우선 간단하게 메모리 관리에 대한 이야기를 해보자.</p>

<p>메모리란 개념은 컴퓨터 공학을 처음 배울 때 부터 배우기 시작하여 끝도 없이 공부하며, 아직까지도 많은 프로그래머들을 괴롭힌다. C언어 같은 언어는 allocation 함수들(<code class="language-plaintext highlighter-rouge">malloc()</code>, <code class="language-plaintext highlighter-rouge">calloc()</code> 등)을 활용하여 동적으로 메모리를 사용하고 <code class="language-plaintext highlighter-rouge">free()</code>함수를 활용하여 메모리를 해제한다. 하지만, JS 혹은 Java같은 언어는 runtime에 객체가 생성 시 자동으로 메모리를 할당하고 필요하지 않을 때 해제하게 된다. 여기서 <code class="language-plaintext highlighter-rouge">필요하지 않을 때</code>의 시점이 컴퓨터가 판단하기에, 개발자가 메모리 관리에 대한 고민을 할 필요는 없지만 오히려 관리를 하지 않아 문제를 발생시킬 수 있다는 점에 유의해야 한다. 이를 더 깊이 이해하기 위해 <code class="language-plaintext highlighter-rouge">Javascript</code>의 메모리 관리에 대해 공부해보자.</p>

<h2 id="메모리의-생존주기">메모리의 생존주기</h2>

<p>메모리의 생존주기는 <code class="language-plaintext highlighter-rouge">할당 -&gt; 사용 -&gt; 해제</code>로 매우 간단하다.</p>

<p>여기서 <code class="language-plaintext highlighter-rouge">사용</code> 부분은 모든 언어에서 명시적으로 사용하지만, 앞서 말했던 것 처럼 <code class="language-plaintext highlighter-rouge">할당</code>과 <code class="language-plaintext highlighter-rouge">해제</code>는 Javascript와 같은 고수준 언어에서는 암묵적으로 작동한다.</p>

<h3 id="할당">할당</h3>

<p>아래는 다양한 js의 메모리 할당방법들이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">b</span><span class="p">:</span> <span class="kc">null</span><span class="p">,</span>
<span class="p">};</span> <span class="c1">// object가 아닌 literal도 비슷하게 할당할 수 있다</span>

<span class="c1">// 함수식 또한 오브젝트를 담기 위한 메모리를 할당한다.</span>
<span class="nx">someElement</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">click</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">someElement</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">blue</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">},</span>
  <span class="kc">false</span>
<span class="p">);</span>

<span class="kd">const</span> <span class="nx">d</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span> <span class="c1">// new를 활용해 새로운 객체 할당</span>

<span class="kd">const</span> <span class="nx">e</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">div</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// DOM 엘리먼트를 위해 메모리를 할당</span>

<span class="kd">const</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">azerty</span><span class="dl">"</span><span class="p">;</span>
<span class="kd">const</span> <span class="nx">s2</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span> <span class="c1">// 문자열은 immutable하기에, 새로운 메모리가 아닌 [0,3] 만 할당</span>
</code></pre></div></div>

<h3 id="사용">사용</h3>

<p>일반적으로 js에서 variable을 가지고 읽고 쓰는것을 의미한다.</p>

<h3 id="해제">해제</h3>

<p><code class="language-plaintext highlighter-rouge">Javascript</code>가 <code class="language-plaintext highlighter-rouge">필요하지 않다</code>고 판단이 되면, 메모리를 해제한다. Python, Java, Javascript와 같은 언어들은 각 언어만의 Garbage Collection(GC)이 동작하며 메모리 관리를 하게된다. GC의 목적은 할당된 메모리들을 추적하여 더 이상 필요하지 않을 떄 회수하는 것이지만, 이를 판단하는것이 비결정적이기 때문에 우리도 GC에 대한 이해가 필요하다.</p>

<h2 id="garbage-collection">Garbage Collection</h2>

<p>Garbage Collection은 주로 두가지의 알고리즘을 사용한다. (단순 JS에 국한되는게 아님)</p>

<h3 id="reference-counting">Reference Counting</h3>

<p>정말 간단한 방법으로, 아무도 해당 객체를 참조하고 있지 않을 때 필요없다고 간주되어 해제해 버리는 방법이다.</p>

<p>간단한 예시와 함께 살펴보자.</p>

<blockquote>
  <p>원래 js는 object에 저장될 때 obj의 주소값으로 저장하고, 해당 obj에서 변수에 대한 값 또한 주소로 저장하지만, 간편하게 도식화 하였다.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">a</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">b</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
</code></pre></div></div>

<p>2개의 객체가 생성되어, 변수 x에 저장되고, y또한 x를 참조하고 있으므로 가비지는 없다는게 명확하다.
<img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/6ba565c5-976b-49c3-93fc-74af9ba1f4ea" alt="rc1" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</code></pre></div></div>

<p>x에 대한 값을 immutable한 값으로 바꾸며 원래 객체에 대한 참조를 y만 하게 되었다
<img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/ef8edbaf-6330-4854-bc2d-abf9dfa27ba1" alt="rc2" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">z</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span>

<span class="nx">y</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">mozilla</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>y의 값을 immutable한 값으로 바꾸고, z의 값을 a를 참조하도록 수정하였으므로, 아직 객체의 a 속성이 z에 대해 참조되어 메모리를 해제할 수 없다.
<img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/8b3b5d4c-8e8a-4fff-8fe1-f95ffa4a2658" alt="rc3" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">z</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</code></pre></div></div>

<p>이제 원래 x가 참조했던 객체의 모든 속성에, 참조하고 있는 변수가 없으므로 가비지 콜렉션이 수행되어, 메모리의 해제가 이루어진다.
<img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/2d606e85-02d6-495a-89d9-3439be9e1509" alt="image" /></p>

<p>하지만, 이런 단순한 방법에는 서로 참조하는 <code class="language-plaintext highlighter-rouge">순환 참조</code>가 이루어질 때 문제가 생긴다. 서로 참조하는 속성이 있는 경우, 함수 호출이 끝났음에도, 서로 참조하고 있기에 메모리가 해제되지 않고 메모리 누수가 일어날 수 있다. 순환참조의 예시는 다음과 같다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">f</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">x</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="kd">const</span> <span class="nx">y</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">x</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">y</span><span class="p">;</span> <span class="c1">// x -&gt; y 참조</span>
  <span class="nx">y</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span> <span class="c1">// y -&gt; x 참조</span>

  <span class="k">return</span> <span class="dl">"</span><span class="s2">nothing</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="mark-and-sweep">Mark and Sweep</h3>

<p>해당 방법은 <code class="language-plaintext highlighter-rouge">필요 없는 객체</code> 를 <code class="language-plaintext highlighter-rouge">도달할 수 없는 객체</code>로 인식한다.</p>

<p>우선 <code class="language-plaintext highlighter-rouge">roots</code>라는 객체 시작하여, roots를 참조하는 객체들을 찾으며, 도달할 수 없는 객체들을 탐색 및 수집하는 방식이다.</p>

<blockquote>
  <p>js는 전역 객체</p>
</blockquote>

<p>이러한 방식은, 이전처럼 <code class="language-plaintext highlighter-rouge">순환 참조</code>가 일어나더라도 도달할 수 없음을 판단하고, 메모리를 회수할 수 있고, 실제로 js의 최신 엔진은 해당 방법으로 메모리 관리를 하게된다.</p>

<p>단점으로는, garbage collection을 수동으로 조작할 수 없고, 공식적으로 코어 언어에서도 지원하지 않을 예정이라 한다.</p>

<h2 id="v8-엔진의-메모리-구조">v8 엔진의 메모리 구조</h2>

<p>v8 메모리 구조는 우선, 메모리의 Resident Set이라는 공간에서 시작된다. 해당 영역에서 스택과 힙 공간으로 나누어져 메모리를 할당하게 된다. Operating System에서 배웠듯, Stack 공간은 함수호출이 끝난 후 삭제되지만, 동적인 힙 메모리는 그렇지 않기에, 메모리 누수에 취약하며 주의깊게 봐야한다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/914c8119-239e-4d13-adc0-1662ead4b693" alt="v8-memory-structure" /></p>

<p>힙 공간은 위 그림에서 Stack을 제외한 모든 부분이며, 여러 공간들로 나누어져 있지만 실제로, GC가 일어나는 New Space와 Old Space를 주의깊게 보자.</p>

<ul>
  <li>New Space: 새로 만들어지는 Object가 할당</li>
  <li>
    <p>Old Space: New Space에서 Minor GC가 2번 일어날 동안 살아남는 경우 저장된다</p>

    <ul>
      <li>Old Pointer Space: 다른 객체를 참조하는 객체 (다른 객체에 대한 포인터를 가지는 경우)</li>
      <li>Data Space: 문자열/실수 등 데이터만 가지고 있는 객체</li>
    </ul>
  </li>
  <li>Large Object Space: mmap 메모리를 가지는 객체들이 있으며, GC의 대상이 아니다.</li>
  <li>Code space: JIT 컴파일러가 컴파일된 코드들을 저장하여, 실행 가능한 메모리가 있는 영역이다.</li>
  <li>Rest: 이 영역들은 각각 Cells, PropertyCells, Maps이며, 각 영역은 모두 같은 크기의 객체들을 포함하며, 어떤 종류의 객체를 참조하는지에 대한 제약이 있어서 수집을 단순하게 만든다.</li>
</ul>

<h2 id="v8-엔진의-gc">v8 엔진의 GC</h2>

<p>v8 엔진의 GC는 Java의 GC와 사뭇 비슷하다.</p>

<blockquote>
  <p>Java에서 갓 생성된 객체를 Eden이라고 따로 관리했던 것을 제외하면 매우 유사하다고 생각함</p>
</blockquote>

<p>JS의 Garbage Collection은 <code class="language-plaintext highlighter-rouge">Generational Hypothesis</code> 이론을 중점으로 이루어지는데, 이는 새로운 객체가 오래된 객체보다 쓸모 없어질 가능성이 높다, 즉 일회성 데이터들이 많다는 이론에 의거하여 동작한다.</p>

<p>그렇게 Garbage Collection을 Minor GC와 Major GC 둘로 나누어 관리하게 된다.</p>

<h3 id="minor-gc">Minor GC</h3>

<p>Minor GC는 New Space의 Garbage를 수집하는 역할을 한다. 앞서 다이어그램에서 보았듯, New Space에는 두개의 Semi Space가 존재한다. 여기서 한 Semi Space는 항상 비워두며, Mark and Sweep 알고리즘을 통해 삭제되지 않는 객체들을 옮기고, 다시 한 Space를 비우는 방식으로 작동한다. 만약 다음 Minor GC에도 해당 객체들이 살아있다면, 이들은 Old Space로 이동하게 된다.</p>

<p>이를 간단히 도식화 하면 다음과 같다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/cfcfe251-94d4-4563-a570-a62f5f2204b7" alt="minor_gc" /></p>

<h3 id="major-gc">Major GC</h3>

<p>이제 Old Space에서의 Garbage Collection을 알아보자. Major GC는 Mark and Sweep Compact 와 Tri-Color Algorithm을 사용하며, 크게 마킹 -&gt; 스위핑 -&gt; 압축 으로 이루어진다.</p>

<ol>
  <li>
    <p>마킹</p>

    <p>우선 어떤 객체들이 할당 해제가 되어야 되는 객체들인지 판단을 하기 위해, 전역객체부터 시작하여 DFS로 순회하며 Tri Color Algorithm으로 마킹을 한다.</p>

    <p>Tri Color는 3가지 색으로 node를 나타내며</p>

    <ul>
      <li>white: 아직 탐색을 하지 못한 노드</li>
      <li>gray: 탐색을 했지만, 객체가 참조하고 있는 노드까지는 탐색을 완료하지 못한 노드</li>
      <li>black: 참조하고 있는 개체까지 확인을 완료한 노드</li>
    </ul>

    <p>해당 알고리즘을 마치고 나면, 모든 노드들은 white / black인 형태로 남게 되어, white인 경우 도달할 수 없는 노드로 판단할 수 있다.</p>
  </li>
  <li>
    <p>스위핑</p>

    <p>white 인 노드들은 도달할 수 없으므로, 필요없는 객체라 판단되어 할당된 메모리 공간을 해제한다.</p>
  </li>
  <li>
    <p>압축</p>

    <p>메모리 단편화가 심한 페이지들을 재배치하여 메모리 공간을 확보한다. 이는 Fragmentation과 Segmentation을 검색해보면 더 자세히 알 수 있다.</p>
  </li>
</ol>

<h2 id="orinoco">Orinoco</h2>

<p>Garbage Collection을 수행하는 동안에는 Stop The World가 일어나며, 모든 프로세스가 멈추어 UX 적으로 많은 문제가 생긴다. 이를 v8 엔진은 우아하게 처리하기 위한 Orinoco 프로젝트를 알아보자.</p>

<h3 id="incremental-marking">Incremental Marking</h3>

<p>2011년에 나온 stop the world의 해결방안으로 나온 incremental marking 이다.
<img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/4544a7bf-de1e-44d1-ae0c-4a3a7eb0647e" alt="incremental marking" /></p>

<p>다이어그램에서 보이듯, 짧은 GC로 쪼개어 프로그램의 반응속도 및 UX를 개선하려함을 볼 수 있다. 하지만, 프로그램이 동작함에 따라, object graph에 대한 변동사항이 생길 때 마다 Garbage Collection에 알려야 하기 때문에, idle time이 없는 경우 cost가 굉장히 높다.</p>

<p>여기서 idle time이란, 크롬 자체에서 프로그램이 쉬는 기간을 미리 알 수 있다는 것이다. 이를 활용하면, 예를 들어, 1 프레임에 필요한 연산을 16ms안에 해결한다면, 남는 시간동안 idle GC를 활용하여, GC를 미리 할 수 있다.</p>

<h3 id="parallel--concurrent">Parallel &amp; Concurrent</h3>

<p>해당 방식은, Helper Thread를 두어, 병렬 혹은 동시적으로 Garbage Collection을 수행하여 stop the world를 최소한을 줄이는 방식이다.</p>

<p>그래서 모든 GC의 기술들을 합치면 현재는 이러한 형태를 띄게 된다.</p>

<p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/fd27a383-cf71-4110-bc83-d044750b76e5" alt="v8-gc-graph" /></p>

<h2 id="참조">참조</h2>

<p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Memory_management">mozilla</a></p>

<p><a href="https://deepu.tech/memory-management-in-v8/">memory-management-in-v8</a></p>

<p><a href="https://v8.dev/blog/trash-talk">v8-dev-trash-talk</a></p>

<p><a href="https://v8.dev/blog/concurrent-marking">v8-concurrent-marking</a></p>]]></content><author><name>071yoon</name></author><category term="javascript" /><category term="javascript" /><category term="til" /><summary type="html"><![CDATA[메모리란]]></summary></entry><entry><title type="html">2023년 회고</title><link href="http://localhost:4000/retrospect/2023/12/27/2023-retrospect.html" rel="alternate" type="text/html" title="2023년 회고" /><published>2023-12-27T00:00:00+09:00</published><updated>2023-12-27T00:00:00+09:00</updated><id>http://localhost:4000/retrospect/2023/12/27/2023-retrospect</id><content type="html" xml:base="http://localhost:4000/retrospect/2023/12/27/2023-retrospect.html"><![CDATA[<p>되게 바빴지만, 동시에 여유로웠던 한해였다.</p>

<p>작년이나 재작년처럼 열심히 개발 역량을 키우기 위해 달리기 보다 다른 업무나 일을 보기위해 바빴던 것 같다.</p>

<h2 id="상반기">상반기</h2>

<p>토스에서 일해보았다. Interaction Team에 UX Engineer Assistant로 6개월 근무를 하였는데, 정말 많은 경험을 해보며 재미있었던 기간이였다. 단순히 React만 적당히 끄적일 수 있고, 딱 컴퓨터 전공자만큼의 지식을 알고있던 무지한 상태에서 나름 실무적인 경험을 해보며 다양한 경험들을 할 수 있었다.</p>

<p>물론, 처음에는 나의 기술을 통해 돈을 보넌 행위를 함에 부담도 많이 됐다. 내가 돈을 받고 일을 하는데, 나 때문에 일을 못하거나 병목이 생기는 상황이 오면 어떡하지..? 라는 생각때문에 입사 초반에는 걱정이 많았다. 검토를 정말 많이 하고, 항상 슬랙을 보는 버릇이 생겼던 것 같은데, 당연히 그렇듯 입사하고 시간이 지나니 점차 괜찮아졌다 ㅎㅎ</p>

<p>토스에 입사하고, 당연히 기술적으로 프론트엔드 Toss Design System등을 유지보수 및 토스 사내 Animation Library인 Rally도 어깨너머로 배우며 많이 성장했다 생각한다. 특히, Web에서의 Animation은 정말 제대로 다뤄본 경험이 없었는데, Interaction Team에 들어가며 많이 배울 수 있어서 정말 좋은 경험이라 생각한다. 단순히 Web에서의 Interaction, CSS가 아닌 Interaction에 대한 고찰을 해볼 수 있는 시간이였어서 더 값진 경험이라 생각한다. 그리고, 기술적으로 말고도 Framer등 디자이너 툴도 제대로 사용해보며 어떤식으로 디자이너와 일을 하는지 시스템을 배울 수 있었는데, 많은 미팅에 들어가며 스타트업에 대한 프로세스를 배울 수 있는게 좋았다.</p>

<p>이러한 프로세스들을 직접 몸으로 느껴보며, 애자일함이란 이런 것이구나를 제대로 느낄 수 있었다. 검증에 최소한의 비용을 사용하며 테스트를 진행하는것이 제일 신기했다. 이론으로만 배웠던 빠른 실패란 어떤것인지 실제로 보고 겪을 수 있었다. 이를 통해, 개발에 집중할 수 있어 일에 대한 집중도가 높아져 사람들이 정말 열심히 일 할 수 있는 동기부여가 되었던 것 같다. 또한, 배경뿐만이 아니라 프론트엔드의 전반적으로 테스트나 배포등에 있어 시스템이 정말 잘 갖추어져 있어 정말 개발에만 집중할 수 있는 시스템이 갖추어 져 있는것 또한 좋았다. 한가지 아쉬웠던 점은, 토스팀은 Silo나 스쿼드로 팀을 구성해서 같이 프로젝트를 하는걸로 유명하지만, Design Platform Team에 소속되어 서비스나 사일로를 경험해보지 못한것이 조금 안타깝다.
그리고,이런 개발 친화적이고 빠른 기업도 좋지만, 대기업은 어떤식으로 동작하는지도 궁금해져 대기업도 한번 가보고 싶은 생각이 좀 커져갔던 것 같다.</p>

<p>한가지 또 생각나는건, IT기업의 복지가 정말 잘 갖추어져 있다는 것이다. 예를 들어 커피 사일로가 존재해서 매일매일 정말 좋은 퀄리티의 커피를 부담없이 즐길 수 있다는것, 혹은 1인1법카를 활용하여 정말 밥을 고민없이 먹을 수 있는점, 사내 편의점이 존재하여 과자 혹은 음료수를 원할 때 막 먹을 수 있는점 등 IT의 복지의 끝판왕이라고 생각한다. 그리고, 보통 유연 근무제라고 하면 코어타임이 10-15등 정해져 있는 경우가 많은데, 토스같은 경우 아예 자율근무를 지향하기에, 완전 재택으로 일해도 아무도 신경쓰지 않을정도로 정말 유연했다.</p>

<blockquote>
  <p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/7e61e1bb-bcf2-4238-94e0-93faff2da768" width="200" />
사내 바리스타분이 매일 내려주는 오늘의 커피의 바리에이션 내일의 커피</p>
</blockquote>

<p>토스에 있었던 경험은 개발자로서의 커리어나 성장빼고도 정말 값진 경험이라 생각한다. 정말 좋은사람들도 많이 만나고 내 실력의 한계도 느낄 수 있었다. 더불어 내가 어디가 부족하고, 내가 진정으로 원하는건 무엇인지에 대한 깊은 고민을 할 수 있는 시간이여 더 좋았다.</p>

<h2 id="하반기">하반기</h2>

<p>앞서 토스를 퇴사하고, 많은 고민을 했다. 개발, 특히 프론트엔드를 하며 항상 재미있었고, 성장하고 싶다는 욕심이 있었는데, 막상 일을 하며 돈을 버는 행위를 하다보니 내가 정말 이걸 평생 할 수 있을까? 란 고민을 하게 됐다. 아직 백엔드도 제대로 해보지 못하고, 다양한 직군 혹은 분야를 해보지도 않았는데, 앞으로의 커리어를 이렇게 이어가는게 맞을까? 란 많은 생각이 들었다. 그래서 생각정리를 할 겸 친구와 제주도 종주를 기획하고 떠났다.
하지만,,, 생각보다 너무 힘든 종주길에 생각은 커녕 몸만 지치고 돌아왔다. 하지만 정말 친구와 처음 떠난 긴 여행에 정말 재미있었고 퇴사 후 노트북 혹은 컴퓨터 자체를 보지 않고 일주일 넘게 있던 경험자체에 힐링을 할 수 있었다.</p>

<p>그리고 학교 4-2를 마무리하며, 취준을 제대로 시작하였다.</p>

<p>사실 나는 4-2 복학을 하기가 싫었다. 빠르게, 취업을 해서 취업계를 내고 졸업을 하고 싶었지만,, 학교의 이상한 시스템 때문에 취준은 취준대로 하며 학교는 학교대로 다녀야되는 상황에 놓이게 되었다. 사실은 원래 2023 상반기도 취업을 하고 싶었지만, 학교시스템상 취업계가 되지 않아 억지로 휴학 후 계약직을 했다.</p>

<p>나는 이번 학기에는 취준과 학교생활을 병행하기 위해 정말 최소한의 학점인 11학점만 들었다. 3학년에 전과를 하여, 타 4학년들과 비교하였을 때 꽤나 많은 학점을 들었지만, 사실 그렇게 바쁘지는 않았다. 하지만, 코로나가 끝남에 따라 대면과 비대면 수업을 병행하고, 대면의 비중이 높아 일주일 중 4일이나 학교를 가게 되어 조금 이동시간이 많아서 체감상 바빴다. 그리고 막상 학교 공부를 하려고 해도, 내일 면접, 그 다음날 코딩 테스트, 그 다음날 자소서 등 취준관련하여 신경을 써야되는게 많아 제대로 집중하기 쉽지가 않았다. 이번에는 서류만 한 30개 가까이 제출했던 것 같고, 최종은 4개정도 붙었다. 물론, 처음에 한 기업을 붙고나서 면접이나 다음 채용과정을 많이 취소해서 더 붙었을 수 도 있긴하다. 결국, 채용 취소를 죄송하게도 두번이나 하게 되었다.</p>

<p>취준에 대하여 고찰을 해보자면, 내가 너무 만만하게 봤던것 같다. 다들 이번에 채용시장이 불바다라고 하긴 했지만, 그럼에도 서류가 떨어질 때 마다 나름 충격의 연속이였다. 나름 2년간 정말 열심히 살아왔다고 생각을 하였는데, 탈락 메일을 받는건 아무리 받아도 적응이 되지 않았다. 그리고 여기서 조금 실수를 하게 되는데, 처음에 서류의 탈락들을 보고 너무 겁을 먹어, 스타트업과 중소/중견을 가리지 않고 막 쓰기 시작했다. 그래서 정말 붙었을 때 갈 회사들만 작성을 했어야 됐는데, <code class="language-plaintext highlighter-rouge">면접도 경험이지 뭐~</code> 라는 생각에, 정말 많이 작성하는 바람에 면접과 코딩테스트 등을 수습하느라 하나에 대해서 제대로 준비도 못하고 시간도 없고 그랬다. 그리고 인적성이나 NCS등을 한번도 공부해본 적이 없는데, 너무 만만하게 보고 있다가 여기서 정말 많이 떨어졌다.. 아쉽아쉽..</p>

<p>그리고 취준을 하면서 정말 많은 생각들을 하게 되었다. 대기업 같은 경우 지원을 하면서, 내가 쌓아오던 커리어(프론트엔드)가 아닌 크게 IT 직무로 많이 뽑았는데, 만약 이런곳 가서 내가 잘 알지도 못하는 도메인에 잘 알지도 못하는 일을 하게 되었을 때 정말 행복할까 라는 생각을 하게 되었다. 내가 처음 전과를 한 이유가 개발과 컴퓨터가 재미있어서 였는데, 결국에는 내가 좋아하는걸 못하게 될까봐 두렵기도 했다. 물론 대기업 혹은 금융권을 가면 돈도 좋고 워라밸도 챙길 수 있겠지만, 어떤 내가 더 삶에 만족을 할 수 있을까에 대한 고민이 계속 생겨났다.
물론 운이 좋게도, 나름 IT대기업에 내가 원하는 직무에 합격을 하게 되어 여기서 경험을 더 해보기로 결정하게 되었지만, 아마 평생을 고민하며 살게 될 것 같다.</p>

<p>취준기간 동안, 시간이 남아 <code class="language-plaintext highlighter-rouge">공정하다는 착각</code>을 읽은 적이 있다. 여기서, 요새 사람들은 남의 시선과 인식에 대해 겁을 많이 먹는다는 이야기가 나오게 된다. 어쩌면 내가 대기업에 들어가고 싶어했던 이유도, 사회적으로 인정을 받고 싶어서 였을까?</p>

<blockquote>
  <p><img src="https://github.com/071yoon/071yoon.github.io/assets/66371206/64c81581-5f0c-42c5-8c71-612d613145a3" width="200" />
내 방을 지켜주는 숲의 요정들</p>
</blockquote>

<h2 id="회고">회고</h2>

<p>뭔가 개발적으로 성장하지 않으면 시간이 아깝고 버려지는것 같은 기분이 든다. 아마 재작년에 개발을 시작하며 늦었다는 생각이 들며, 계속 개발적으로 성과를 내야하고 공부를 해야한다는 강박이 나도모르게 있었던 것 같다. 그래서 취업을 준비하면서도, 전공 지식, 실무 면접, 코딩테스트는 열심히 하였지만 대기업 회사의 NCS 혹은 인적성은 시간이 아깝다는 생각이 들어 소홀했던 것 같다.</p>

<p>또한, 예전에는 교양 공부가 흥미롭고 재미있었는데, 이번 학기에는 그 시간에 면접 준비를 더 하거나 자소서를 쓰는것에 더 집중한다는 생각에(그렇다고 제대로 한것도 아니다), 제대로 하지도 못하고 공부를 할 때도 재미가 없었던 것 같다.</p>

<p>이제는 나름 대기업에 들어가, 정규직 직원으로서 나의 직무가 명확하기에 앞서 말했던 성장에 대한 갈망이나 강박을 조금 벗어날 수 있지 않을까 생각한다. 이제는 내가 무엇 때문에 전과를 하였는지, 나는 왜 개발자가 되고 싶었는지 초심으로 돌아가 여러 공부와 다양한 인사이트를 얻는 시간을 보내고 싶다.</p>

<h2 id="짧온-메모">짧온 메모</h2>

<p>다소 건방진 이야기일 수 도 있지만, 다들 취업이 힘들다 하는것은 내가 원하는 회사에 들어가지 못해 계속 도전하고 불합격에 좌절하기 때문이라 생각한다. 하지만, 원하는 회사가 정말 본인이 원하는 회사인지 혹은 사회적으로 형성된 좋은 회사인지 모두가 고민해 보는 시간을 가졌으면 좋겠다. 단순히 모두가 <code class="language-plaintext highlighter-rouge">우아</code> 소리가 나오는 회사를 갔다고 해서 내가 행복할지, 혹은 그곳에 꿈이 있어 나의 비전과 미래를 이룰 수 있는 곳이기에 가고 싶은지.. 나 또한 평생 고민할 숙제라고 생각한다.</p>]]></content><author><name>071yoon</name></author><category term="retrospect" /><category term="retrospect" /><summary type="html"><![CDATA[되게 바빴지만, 동시에 여유로웠던 한해였다.]]></summary></entry><entry><title type="html">firebase 정보 백업하기 (export)</title><link href="http://localhost:4000/til/2023/12/04/export-firebase.html" rel="alternate" type="text/html" title="firebase 정보 백업하기 (export)" /><published>2023-12-04T00:00:00+09:00</published><updated>2023-12-04T00:00:00+09:00</updated><id>http://localhost:4000/til/2023/12/04/export-firebase</id><content type="html" xml:base="http://localhost:4000/til/2023/12/04/export-firebase.html"><![CDATA[<h2 id="배경">배경</h2>

<p>firebase를 활용해서 개인 프로젝트를 잘 하고 있었는데, 문득 백업이 하고싶어졌다.</p>

<p>google이 갑자기 내 data를 날려버리거나 하지는 않겠지만 내가 실수로 table을 날렸을 경우 복구도 되지 않을 것 같고 (가뜩이나 무료 버전을 쓰고 있기에) 점점 traffic이 올라감에 한번은 백업이 필요하다 생각이 들었다.</p>

<h2 id="firebase-둘러보기">Firebase 둘러보기</h2>

<p>솔직히 firebase에 backup 혹은 export 기능이 없을리가 없다</p>

<p><img width="1155" alt="firebase-export-import-icon" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/a367acb2-37b7-4cdc-a7cb-98d1dc4defc3" /></p>

<p>당연히 있다..!</p>

<p>하지만 아니나 다를까 결제 정보를 입력하고 돈을 내야 가능하는것 처럼 보인다.</p>

<p><img width="542" alt="firebase-export-card-image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/fb30b9c5-a7ca-4155-b30a-46c868cff91f" /></p>

<p>(사실 GCP와 연결하는것 같아 당연히 결제 정보가 필요한것이고 실제로 돈이 필요한지는 모르겠음.. 그냥 혹시나 카드정보 입력해 두었다가 firebase traffic이 폭주해서 지갑이 털릴까봐 조금 무서웠다)</p>

<p>그래서 다른 방법을 찾아 나서기로…!</p>

<h2 id="github-돌아다니기">github 돌아다니기</h2>

<p>솔직히 firebase는 문서화가 잘 되어 있기도 하고, query를 통해 data를 읽기/쓰기가 매우 쉬워 손쉽게 코드로 export 하는 기능을 찾는것도 어렵지 않다고 생각한다. 하지만,, 누군가 더 깔끔하게 만들어 두었다면..? 굳이 내가 만들 필요가 있을까? 라는 생각에 뒤적 뒤적,.. firebase export를 찾아보기 시작했다..</p>

<h3 id="node-firestore-import-export">node-firestore-import-export</h3>

<p>기가 막힌 library를 찾아내고야 말았다. 바로 이름부터 직관 그 자체인 <a href="https://github.com/jloosli/node-firestore-import-export">node-firestore-import-export</a>!</p>

<p>두가지 활용 방법이 존재한는데</p>

<ol>
  <li>npm 으로 전역으로 library를 설치 후 export하여 json 형태로 받기</li>
  <li>코드로 export/import 기능을 구현하여 web application 내부에서 활용</li>
</ol>

<p>나는 굳이 export나 import를 web으로 할것이 아니기에 1번 방법으로 수동으로 백업을 하였다.</p>

<p>워낙 README가 잘 되어 있어 직접 레포에 확인해보는것이 더 정확하겠지만, 간략한 사용법은 다음과 같다.</p>

<ol>
  <li>
    <p>firebase에서 비공개 키 생성</p>

    <blockquote>
      <p>프로젝트 설정 -&gt; 새 비공개 키 생성
<img width="652" alt="firebase-goto-image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/f4e24a2d-e09d-4608-8633-a68c84b054dc" /> <img width="1031" alt="firebase-admin-sdk-image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/dfc43936-e13c-4cfc-b9df-9601485aa5cd" /></p>
    </blockquote>
  </li>
  <li>
    <p>npm package 설치 및 export</p>
  </li>
</ol>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># sudo로 해야될 수 있음</span>
npm <span class="nb">install</span> <span class="nt">-g</span> node-firestore-import-export

<span class="c"># ..비공개 키 저장된 위치로 이동..</span>
firestore-export <span class="nt">--accountCredentials</span> path/to/credentials/file.json <span class="nt">--backupFile</span> /backups/myDatabase.json
</code></pre></div></div>

<p>그리고 이러한 open-source library를 사용하는 경우 내 credential 이 외부로 노출이 되지는 않을까.. 하는 생각으로 항상 검증 해봐야 된다.</p>

<p>실제로 export 하는 부분을 링크로 남겨둘테니 한번씩은 확인해 보았으면 한다. (내가 봤을때는 문제 없음)</p>

<blockquote>
  <p><a href="https://github.com/jloosli/node-firestore-import-export/blob/master/src/lib/export.ts">firebase-export 링크</a></p>
</blockquote>

<p>아주 깔끔~ 하게 json 으로 export가 된다.</p>

<p><img width="482" alt="firebase-export-image" src="https://github.com/071yoon/071yoon.github.io/assets/66371206/ff54d889-63fa-4be0-8858-e9b157ac310e" /></p>

<p>다음엔 아마 oracle 무료 cloud를 받은 기념,, 하루에 한번씩 backup 하도록 자동화 해둘 예정..</p>

<p>총총..</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="web" /><summary type="html"><![CDATA[배경]]></summary></entry></feed>