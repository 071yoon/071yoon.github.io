<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-10T22:21:49+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi's tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">S3 &amp;amp; CloudFront를 활용한 CDN 서버 만들기</title><link href="http://localhost:4000/til/2022/08/10/aws-cloudFront.html" rel="alternate" type="text/html" title="S3 &amp;amp; CloudFront를 활용한 CDN 서버 만들기" /><published>2022-08-10T00:00:00+09:00</published><updated>2022-08-10T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/08/10/aws-cloudFront</id><content type="html" xml:base="http://localhost:4000/til/2022/08/10/aws-cloudFront.html"><![CDATA[<p><img width="300" alt="image" src="https://user-images.githubusercontent.com/66371206/183911780-90c424e9-e115-44e2-8163-f0b4ab823458.png" /></p>

<p>CDN 서버를 만들기 앞서, 왜 CDN 서버를 만드는지에 대해 알아보자</p>

<h2 id="cdn">CDN</h2>

<h3 id="cdn-이란">CDN 이란?</h3>

<p>콘텐츠 전송 네트워크(CDN)는 데이터 사용량이 많은 애플리케이션의 웹 페이지 로드 속도를 높이는 상호 연결된 서버 네트워크로 콘텐츠 전송 혹은 배포 용도로 사용된다.</p>

<p>실제 사용자는 웹사이트에 접속 시, 해당 웹사이트의 데이터를 다운받기 위해 인터넷으로 접속한다. 하지만, 사용자가 서버에서 떨어질 수록, 웹사이트의 정적 이미지(이미지, 동영상, 음악 등)를 다운받는데 오래 걸리게 됩니다. 이러한 경우, CDN 서버를 전 세계에 있는 엣지 포인트를 두어 캐싱처리를 하여 사용자가 가장 가까운 지역의 엣지 포인트로 접속하게 하여 해당 문제를 해결 할 수 있다.</p>

<h2 id="cdn이-중요한-이유">CDN이 중요한 이유?</h2>

<p>콘텐츠 전송 네트워크(CDN)의 주 목적은 대기 시간을 줄이거나 네트워크 설계로 인해 발생하는 통신 지연을 줄이는 것이다. CDN은 클라이언트와 웹 사이트 서버 간에 중간 서버를 두어 효율성을 높일 수 있다. 이러한 CDN 서버는 클라이언트-서버 통신을 관리하며, 웹 서버에 대한 웹 트래픽을 줄이고, 대역폭 소비를 줄이며, 애플리케이션의 사용자 환경을 개선할 수 있다.</p>

<h2 id="cdn의-장점">CDN의 장점?</h2>

<p>CDN을 사용함으로써 다음과 같은 이득을 볼 수 있다.</p>

<h3 id="페이지-로드-시간-단축">페이지 로드 시간 단축</h3>

<p>페이지 로드 시간이 너무 느리면 웹 사이트 트래픽이 감소할 수 있으므로, 반송률을 줄이고 사용자가 사이트에서 보내는 시간을 늘릴 수 있다.</p>

<h3 id="대역폭-비용-절감">대역폭 비용 절감</h3>

<p>들어오는 모든 웹 사이트 요청은 네트워크 대역폭을 사용하기 때문에 대역폭 비용이 상당히 높다. 캐싱 및 기타 최적화를 통해 CDN은 오리진 서버가 제공해야 하는 데이터의 양을 줄여 웹 사이트 소유자의 호스팅 비용을 절감할 수 있음.</p>

<h3 id="콘텐츠-가용성-제고">콘텐츠 가용성 제고</h3>

<p>한 번에 너무 많은 방문자가 방문하거나 네트워크 하드웨어 오류가 발생하면 웹 사이트가 중단될 수 있습니다. CDN 서비스는 더 많은 웹 트래픽을 처리하고 웹 서버의 로드를 줄일 수 있습니다. 또한 하나 이상의 CDN 서버가 오프라인으로 전환되면 다른 운영 서버가 해당 서버를 대체하여 서비스가 중단되지 않도록 할 수 있습니다.</p>

<h3 id="웹-사이트-보안-강화">웹 사이트 보안 강화</h3>

<p>분산 서비스 거부(DDoS) 공격은 대량의 가짜 트래픽을 웹 사이트로 전송하여 애플리케이션이 작동 중지되도록 만들려고 시도합니다. CDN은 여러 중간 서버 간에 로드를 분산하여 오리진 서버에 미치는 영향을 줄임으로써 이러한 트래픽 급증을 처리할 수 있습니다.</p>

<h2 id="cdn-구현">CDN 구현</h2>

<h3 id="s3-버킷-생성">S3 버킷 생성</h3>

<p>먼저 S3 버킷을 일반적으로 생성한다.
<img width="844" alt="image" src="https://user-images.githubusercontent.com/66371206/183887243-2b1dd102-166b-4e1f-bbc8-846ff990d27f.png" /></p>

<blockquote>
  <p>CloudFront에서 public으로 열어줄 예정이라, 액세스 차단을 해도 된다</p>
</blockquote>

<p><img width="835" alt="image" src="https://user-images.githubusercontent.com/66371206/183887348-9e248bf8-a7c3-4b79-857f-68a672208981.png" /></p>

<p>다음으로, 프로젝트에서 사용할 static 파일들을 넣어준다.</p>

<p><img width="1202" alt="image" src="https://user-images.githubusercontent.com/66371206/183887581-979abfb6-6557-416a-813c-a7cf04a79817.png" /></p>

<p>마지막으로 버킷정책과 CORS 정책을 수립해주면 된다.
<img src="https://user-images.githubusercontent.com/66371206/183889538-902d219b-75f3-48aa-a7b9-541a9a788125.png" alt="image" /></p>

<blockquote>
  <p>버킷정책</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2008-10-17"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PolicyForCloudFrontPrivateContent"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"AWS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity [my id]"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::static.[myDomain].com/*"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"AWS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity [my id]"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::static.[myDomain].com/*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>CORS 정책</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"AllowedHeaders"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"*"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"AllowedMethods"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="w"> </span><span class="s2">"GET"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"AllowedOrigins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"*"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"ExposeHeaders"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"ETag"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-server-side-encryption"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-request-id"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-id-2"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"MaxAgeSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="cloudfront-연동">CloudFront 연동</h3>

<p>아까만든 S3 버킷으로 CloudFront를 생성해주면 된다
<img src="https://user-images.githubusercontent.com/66371206/183890057-0a6c3ebb-9a0f-4886-8113-f6cc92ab5010.png" alt="image" /></p>

<p>여기서 나온 ID를 앞서 버킷 정책에서의 [my id]에 넣어주면 된다.</p>

<p>상세 정책은 다음과 같다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895266-496ab645-577b-45a2-a003-b374bfcabe70.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895316-83d7189c-5310-4d2e-931f-84dd6c21a565.png" alt="image" /></p>

<p>CloudFront를 public으로 열어두고, CORS 정책을 S3에 위임하면 된다.</p>

<h2 id="domain-달기">Domain 달기</h2>

<p>Domain은 AWS 내 Route 53에서 미리 구매한 Domain을 확장해서 사용하였다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895726-b2486618-83c4-48a9-b269-9f4af7a8fb24.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895901-8c996509-d9b8-461d-8ec4-f611672fbb01.png" alt="image" /></p>

<p>그리고 다시 CloudFront로 와서, 생성한 대체 도메인을 선택 후, https 를 사용하기에 해당 SSL 인증서를 등록해주면 static.domain.com 으로 접근 가능한 cdn 서버가 완료가 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183910403-19ac163e-a202-4a59-8430-a81beae4385b.png" alt="image" /></p>

<p>참조
<a href="https://aws.amazon.com/ko/what-is/cdn/">https://aws.amazon.com/ko/what-is/cdn/</a></p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="AWS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">React에서 Volume Slider 구현하기</title><link href="http://localhost:4000/til/2022/07/31/react-volume-slider.html" rel="alternate" type="text/html" title="React에서 Volume Slider 구현하기" /><published>2022-07-31T00:00:00+09:00</published><updated>2022-07-31T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/07/31/react-volume-slider</id><content type="html" xml:base="http://localhost:4000/til/2022/07/31/react-volume-slider.html"><![CDATA[<h2 id="react-볼륨-슬라이더-만들기">React 볼륨 슬라이더 만들기</h2>

<p>프로젝트를 진행중에, 이러한 시안이 날라왔다. 대충 볼륨을 컨트롤 할 수 있는 Slider를 제작하는 것.</p>

<p><img width="758" alt="image" src="https://user-images.githubusercontent.com/66371206/182016262-70befb1d-aa0f-4e68-b26d-4c61d20f1199.png" /></p>

<p>우선 여러가지 선택사항이 있는데, material UI를 사용하여, 간단하고 이쁜 슬라이더를 가져다 쓰는것, 아니면 직접 구현이 있었다.</p>

<p>우선 라이브러리를 쓰는것 보다 구현을 하는것을 좋아하기에, 한번 알아보았고, <code class="language-plaintext highlighter-rouge">input type</code> 을 <code class="language-plaintext highlighter-rouge">range</code>로 선택하여 간단하게 구현할 수 있음을 알게되었다.</p>

<h3 id="vanilla-html로-구현">Vanilla HTML로 구현</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">input</span>
  <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">range</span><span class="dl">"</span>
  <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
  <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
  <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">gray</span><span class="dl">"</span>
  <span class="nx">step</span><span class="o">=</span><span class="p">{</span><span class="mf">0.02</span><span class="p">}</span>
  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span>
  <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setVolume</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">valueAsNumber</span><span class="p">);</span>
  <span class="p">}}</span>
<span class="sr">/</span><span class="err">&gt;
</span></code></pre></div></div>

<p>간단하게 구현을 해보면 위의 코드와 같다.</p>

<p>setVolume같은 경우에는, state로 관리하기 위해서 넣었고, step 기준으로 volume bar를 컨트롤 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182019180-9500a561-ee79-468d-b97b-220abb93d398.gif" alt="ezgif-3-5e9fa8f258" /></p>

<p>괜찮아 보이지만, 여러 문제가 있다.</p>

<ol>
  <li>컨트롤 하는 동그라미 (thumb) 도 파란색이 마음에 안든다</li>
  <li>볼륨이 0이 됐을 때 투명해졌으면 좋겠다</li>
  <li>볼륨이 올라갈때 색이 파란색이 마음에 안든다</li>
</ol>

<p>이러한 문제를 해결하기 위해 CSS에서 노력을 해주어야 한다.</p>

<h3 id="css-적용">CSS 적용</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">VolumeControl</span> <span class="nx">volume</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span> <span class="o">*</span> <span class="mi">100</span><span class="p">}</span> <span class="nx">speaker</span><span class="o">=</span><span class="p">{</span><span class="nx">userSpeaker</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">input</span>
    <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">range</span><span class="dl">"</span>
    <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
    <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
    <span class="nx">step</span><span class="o">=</span><span class="p">{</span><span class="mf">0.02</span><span class="p">}</span>
    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span>
    <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setVolume</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">valueAsNumber</span><span class="p">);</span>
    <span class="p">}}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/VolumeControl</span><span class="err">&gt;
</span></code></pre></div></div>

<p>우선 styled로 크게 VolumeControl이라는 component로 분할하였고, speaker로 스피커가 꺼져있음을 판단할 수 있고, volume으로 나의 speaker 크기를 판단할 수 있게 만들었다. 여기서 <code class="language-plaintext highlighter-rouge">volume === 0</code> 인 경우 speaker 가 꺼져있다고 판단할것이다.</p>

<h4 id="컨트롤-하는-동그라미-thumb-도-파란색이-마음에-안든다">컨트롤 하는 동그라미 (thumb) 도 파란색이 마음에 안든다</h4>

<p>우선 처음에는 1번 문제를 해결하기 위해 slider-thumb를 손봐주었다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="nd">::-webkit-slider-thumb</span> <span class="p">{</span>
      <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="nl">width</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
      <span class="nl">background</span><span class="p">:</span> <span class="err">${</span><span class="p">(</span><span class="n">props</span><span class="p">)</span> <span class="err">=&gt;</span> <span class="p">(</span><span class="n">props</span><span class="p">.</span><span class="n">volume</span> <span class="err">?</span> <span class="s1">"#d9d9d9"</span> <span class="p">:</span> <span class="s1">"#E5E7EB"</span><span class="p">)}</span><span class="o">;</span>
      <span class="nt">margin-top</span><span class="o">:</span> <span class="nt">-5px</span><span class="o">;</span>
      <span class="nt">cursor</span><span class="o">:</span> <span class="nt">pointer</span><span class="o">;</span>
    <span class="err">}</span>
</code></pre></div></div>

<p>해당코드는 별 문제 없이 가능하다. 그냥 volume 이 0이라면 볼륨이 꺼졌을 때의 색상이 나올 수 있게 지정하고 끝이다.</p>

<h4 id="볼륨이-0이-됐을-때-투명해졌으면-좋겠다">볼륨이 0이 됐을 때 투명해졌으면 좋겠다</h4>

<p>이부분도 그렇게 어렵지 않다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">&amp;</span><span class="nd">::-webkit-slider-runnable-track</span> <span class="p">{</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">0.6rem</span><span class="p">;</span>
      <span class="nl">opacity</span><span class="p">:</span> <span class="err">${</span><span class="p">(</span><span class="n">props</span><span class="p">)</span> <span class="err">=&gt;</span> <span class="p">(</span><span class="n">props</span><span class="p">.</span><span class="n">volume</span> <span class="err">&amp;&amp;</span> <span class="n">props</span><span class="p">.</span><span class="n">speaker</span> <span class="err">?</span> <span class="s1">"1"</span> <span class="p">:</span> <span class="s1">"0.5"</span><span class="p">)}</span><span class="o">;</span>
    <span class="err">}</span>
</code></pre></div></div>

<p>그냥 opacity를 volume과 speaker가 존재 시 1, 아니면 0.5를 줘서 간단히 해결하였다.</p>

<h4 id="볼륨이-올라갈때-색이-파란색이-마음에-안든다">볼륨이 올라갈때 색이 파란색이 마음에 안든다</h4>

<p>이부분이 상당히 애를 먹었다. 우선 여러번의 삽질과 해결법이 존재하였고, 나는 나름 정말 우아한 해결법을 찾았다고 생각한다.</p>

<p>우선 첫번째는 너무나 쉬운 material-UI 를 사용하는것이다. 하지만, 이미 돌아가기엔, 너무 많이 구현을 해버린 나… 끝까지 바닐라로 해결해보았다.</p>

<p>두번째는 내장 CSS 옵션을 사용하는 방법. CSS 는 브라우저에 의존적이기에, <code class="language-plaintext highlighter-rouge">fill-lower, fill-upper</code> 를 사용하여 색 지정이 되는 브라우저가 있다고 한다. 하지만 이건 IE만 지원을 하며, 크롬이나 파이어폭스는 지원하지 않아, 무시하였다.</p>

<p>혹시라도 사용하고 싶다면</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-ms-fill-lower</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-ms-fill-upper</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이러한 방식을 사용하면 된다.</p>

<p>세번째는 인터넷에 떠돌아 다니는 방법을 사용하는 것. 바로 thumb의 box-shadow를 두어 0부터 thumb까지 전부 색칠하는 방법이다. 그리고 남는 부분은 input 전체에 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>을 두어 새어 나오는것을 방지하는 방법이다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span> <span class="p">{</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#9a905d</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-webkit-slider-runnable-track</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#13bba4</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-webkit-slider-thumb</span> <span class="p">{</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#434343</span><span class="p">;</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">-80px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">80px</span> <span class="m">#43e5f7</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이건 괜찮아 보이지만 문제가 많다. 우선 완성된 결과물부터 보자.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182020050-bbbdd186-67b7-45b0-849f-fc0eec3c075b.gif" alt="ezgif-3-875a95cf4c" /></p>

<p>우선 box shadow를 활용하기에, 동그라미인 thumb 를 사용할 수 없으며 overflow-hidden이 필수적으로 필요해 원하는 이쁜 디자인을 절대 만들 수 없다. 그래서 더 고민을 하고 linear-gradient를 활용한 우아한 해결법을 찾았다.</p>

<p>linear-gradient 가 단순히 서서히 적용되지 않고, 완전 다른 색으로 hard line을 그릴 수 있는 방법을 이용하였다. 코드를 보면 다음과 같다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">background</span><span class="o">:</span> <span class="err">$</span><span class="p">{</span><span class="err">(props)</span> <span class="err">=&gt;</span>
        <span class="err">props.volume</span>
          <span class="err">?</span> <span class="err">`linear-gradient(to</span> <span class="err">right,</span> <span class="err">#D9D9D9</span> <span class="err">${props.volume</span><span class="p">}</span><span class="o">%,</span> <span class="nt">rgba</span><span class="o">(</span><span class="err">229</span><span class="o">,</span> <span class="err">231</span><span class="o">,</span> <span class="err">235</span><span class="o">,</span> <span class="err">0</span><span class="o">.</span><span class="err">5</span><span class="o">)</span>
 <span class="err">$</span><span class="p">{</span><span class="err">props.volume</span><span class="p">}</span><span class="o">%</span> <span class="err">100</span><span class="o">%)</span><span class="err">`</span>
          <span class="o">:</span> <span class="s1">"#E5E7EB"</span><span class="err">}</span><span class="o">;</span>
</code></pre></div></div>

<p>우선 볼륨을 0 ~ 100 의 수를 주므로, 해당하는 볼륨 % 까지, <code class="language-plaintext highlighter-rouge">#d9d9d9</code>의 색으로, 그 다음부터는 rgba(229, 231, 235, 0.5) 에 해당하는 색으로 지정하였다. 그렇게 완성된 볼륨 슬라이더는 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182032799-34a4b224-7e92-4388-8d45-58db2714bad0.gif" alt="ezgif-3-10012500c9" /></p>

<blockquote>
  <p>최종적으로 적용된 CSS 는 다음과 같다.</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">VolumeControl</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">volume</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">speaker</span><span class="p">:</span> <span class="nx">boolean</span> <span class="p">}</span><span class="o">&gt;</span><span class="s2">`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-left: 1rem;
  width: 6rem;

  input[type='range'] {
    -webkit-appearance: none;
    height: 100%;
    background: transparent;

    &amp;:focus {
      outline: none;
    }

    //WEBKIT
    &amp;::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 16px;
      width: 16px;
      border-radius: 50%;
      background: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">#d9d9d9</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">#E5E7EB</span><span class="dl">"</span><span class="p">)}</span><span class="s2">;
      margin-top: -5px;
      cursor: pointer;
    }

    &amp;::-webkit-slider-runnable-track {
      height: 0.6rem;
      background: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">props</span><span class="p">.</span><span class="nx">volume</span>
          <span class="p">?</span> <span class="s2">`linear-gradient(to right, #D9D9D9 </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span><span class="p">}</span><span class="s2">%, rgba(229, 231, 235, 0.5)
 </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span><span class="p">}</span><span class="s2">% 100%)`</span>
          <span class="p">:</span> <span class="dl">"</span><span class="s2">#E5E7EB</span><span class="dl">"</span><span class="p">}</span><span class="s2">;
      opacity: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="o">&amp;&amp;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">speaker</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">0.5</span><span class="dl">"</span><span class="p">)}</span><span class="s2">;
      border-radius: 3rem;
      transition: all 0.5s;
      cursor: pointer;
    }
`</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="React" /><summary type="html"><![CDATA[React 볼륨 슬라이더 만들기]]></summary></entry><entry><title type="html">React + Typescript 에서 Horizontal Scroll 구현</title><link href="http://localhost:4000/til/2022/07/11/react-horizontal-scroll.html" rel="alternate" type="text/html" title="React + Typescript 에서 Horizontal Scroll 구현" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/07/11/react-horizontal-scroll</id><content type="html" xml:base="http://localhost:4000/til/2022/07/11/react-horizontal-scroll.html"><![CDATA[<h2 id="react-에서-가로-스크롤-구현을-해보자">React 에서 가로 스크롤 구현을 해보자</h2>

<p>좌우 스크롤은 직접 구현해도 되지만, 누군가 이쁜 library를 만들어 두었길래, 바로 사용하였다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add react-horizontal-scrolling-menu
</code></pre></div></div>

<p>공식 페이지나 깃허브에 상세하게 설명이 있으니, 참고해도 좋아보임</p>

<p><a href="https://www.npmjs.com/package/react-horizontal-scrolling-menu">공식 페이지</a>
<a href="https://github.com/asmyshlyaev177/react-horizontal-scrolling-menu#readme">깃허브</a></p>

<h2 id="사용">사용</h2>

<h3 id="scrollmenu">ScrollMenu</h3>

<p>ScrollMenu라는 컴포넌트에 Block을 설정해두면, 바로 가로스크롤을 사용할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ScrollMenu</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-horizontal-scrolling-menu</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">LeftArrow</span><span class="p">,</span> <span class="nx">RightArrow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Arrow</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Block</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Block</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Scrolls</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ScrollMenu</span> <span class="nx">LeftArrow</span><span class="o">=</span><span class="p">{</span><span class="nx">LeftArrow</span><span class="p">}</span> <span class="nx">RightArrow</span><span class="o">=</span><span class="p">{</span><span class="nx">RightArrow</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="p">{</span><span class="nx">Data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
                <span class="p">({</span> <span class="nx">nickname</span><span class="p">,</span> <span class="nx">avatar</span><span class="p">,</span> <span class="nx">itemId</span> <span class="p">}:</span> <span class="nx">Interface</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span>
                        <span class="o">&lt;</span><span class="nx">Block</span>
                            <span class="nx">itemId</span><span class="o">=</span><span class="p">{</span><span class="nx">itemId</span><span class="p">}</span>
                            <span class="nx">nickname</span><span class="o">=</span><span class="p">{</span><span class="nx">nickname</span><span class="p">}</span>
                            <span class="nx">avatar</span><span class="o">=</span><span class="p">{</span><span class="nx">avatar</span><span class="p">}</span>
                        <span class="sr">/</span><span class="err">&gt;
</span>                    <span class="p">);</span>
                <span class="p">},</span>
            <span class="p">)}</span>
        <span class="o">&lt;</span><span class="sr">/ScrollMenu</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">Container</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  overflow: hidden;
  .react-horizontal-scrolling-menu--scroll-container::-webkit-scrollbar {
    display: none;
  }
  .react-horizontal-scrolling-menu--scroll-container {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>일반적으로 이렇게 구현을 하면, horizontal-scrolling-scroll-bar가 생기게 된다. 하지만, 일반적으로 가로 스크롤바를 사용하는 경우에 안그래도 비좁은데 스크롤바 까지 생겨버리면 너무 못생겨지기 때문에 삭제 코드를 넣어둔다. 그게 위 Container에서 선언한 style 이다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.react-horizontal-scrolling-menu--scroll-container</span><span class="nd">::-webkit-scrollbar</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.react-horizontal-scrolling-menu--scroll-container</span> <span class="p">{</span>
  <span class="nl">-ms-overflow-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="c">/* IE and Edge */</span>
  <span class="py">scrollbar-width</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="c">/* Firefox */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게만 구현을 해도, 일반적으로는 문제가 없다. 하지만, 마우스를 쓰는 유저에게 문제가 생기는데, 마우스는 버티컬 움직임을 제어 할 수 없어 우측방향 스크롤이 불가능하게 된다. 심지어, 위에서 못생겼다고 스크롤바까지 없애버린 상황! 그걸 해결하기위해 우측 좌측으로 하나씩 화살표를 넣어 버튼형식으로 이동할 수 있게 설정해 두었다.</p>

<h3 id="arrow">Arrow</h3>

<p>Block은 그냥 일반적으로 디자인을 해도 상관이 없으니 넘어가고, Arrow 부분을 살펴보겠다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">VisibilityContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-horizontal-scrolling-menu</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Left</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
  <span class="nx">onClick</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
  <span class="nl">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">show</span><span class="p">,</span> <span class="nx">setShow</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">show</span> <span class="p">?</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Button</span>
      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onClick</span><span class="p">}</span>
      <span class="nx">onMouseLeave</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setShow</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="p">}}</span>
    <span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>  <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Transparent</span>
      <span class="nx">onMouseEnter</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setShow</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="p">}}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Transparent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 10rem;
  position: absolute;
  z-index: 999;
  height: 50rem;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  cursor: pointer;
  color: white;
  cursor: pointer;
`</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">LeftArrow</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">scrollPrev</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">VisibilityContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Left</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">scrollPrev</span><span class="p">()}</span><span class="o">&gt;</span><span class="err">←</span><span class="o">&lt;</span><span class="sr">/Left&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<p>모든 코드를 다 넣자니, 코드가 너무 길어져 나름 핵심 부분만 가져왔다.</p>

<p>이 library에서 제공하는 기능 중 제일 마음에 드는것이 바로 VisibilityContext 이다. 즉 해당하는 block이 화면상에서 보이는지 안보이는지 체크를 해주는 기능인데, 이게 Arrow를 사용하는 핵심이 된다.</p>

<p>그리고 장황하게 써두었지만, 사실 핵심 코드는 아래만 보면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">LeftArrow</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">scrollPrev</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">VisibilityContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Left</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">scrollPrev</span><span class="p">()}</span><span class="o">&gt;</span><span class="err">←</span><span class="o">&lt;</span><span class="sr">/Left&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<p>즉 onClick 이벤트로 클릭을 하면 VisibilityContext 즉 현재 보이지 않는 곳으로 scroll을 움직이게 할 수 있는 설정이다. 이 기능을 좌 우측으로 두어서 깔끔하게 좌우 스크롤바를 구현할 수 있다.</p>

<h2 id="완성본">완성본</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/178254938-aadfeab6-89fb-4af4-8813-cf2278b31e27.gif" alt="ezgif-3-ca65f790f8" /></p>

<p>부드럽게 잘 작동한다..!</p>

<p>만족 ㅎㅎ</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[React 에서 가로 스크롤 구현을 해보자]]></summary></entry><entry><title type="html">Typescript React Styled-Component 에서 Font 적용하기</title><link href="http://localhost:4000/til/2022/07/09/typescript-font.html" rel="alternate" type="text/html" title="Typescript React Styled-Component 에서 Font 적용하기" /><published>2022-07-09T00:00:00+09:00</published><updated>2022-07-09T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/07/09/typescript-font</id><content type="html" xml:base="http://localhost:4000/til/2022/07/09/typescript-font.html"><![CDATA[<h2 id="typescript-react-styled-component-환경에서-font-적용하기">Typescript, React, Styled-Component 환경에서 Font 적용하기</h2>

<p>프로젝트를 진행하다보니, Font를 설정해야 되는데, 일반적으로 App.css를 사용하는 방식이 아니라, Styled-Component를 사용했기에 조금 더 복잡했다.</p>

<h2 id="적용순서">적용순서</h2>

<h3 id="font-다운받기">Font 다운받기</h3>

<p>font는 OpenSource 나 원하는곳에서 잘 다운 받으면 된다. 나는 <a href="https://noonnu.cc">눈누</a>라는 폰트 저장소를 애용한다. 저작권에 주의하며 다운받자.</p>

<p>다운을 받을 때, ttf, otf, woff 중 어떤것을 받을지 선택 할 수 있는데, 우선 ttf로 적용하였다.</p>

<p><code class="language-plaintext highlighter-rouge">ttf</code>는 true type font <code class="language-plaintext highlighter-rouge">otf</code>는 open type font 으로 pc에 설치하는 폰트이며 <code class="language-plaintext highlighter-rouge">woff</code>는 web open font format 으로 웹에서 사용하는 포맷이다.</p>

<blockquote>
  <p>로딩속도는 woff2 &gt; woff &gt; ttf 순서</p>
</blockquote>

<p>그럼 잘 다운받은 폰트를 src폴더 안에 fonts라는 디렉토리를 만들어 잘 저장해둔다.</p>

<p>프로젝트 내부의 폴더구조는 다음과 같다
<img width="273" alt="image" src="https://user-images.githubusercontent.com/66371206/178093254-5ca4bbff-b528-41a3-a7c0-d17afe8a2d9d.png" /></p>

<h3 id="globalstyle에-font-추가">GlobalStyle에 Font 추가</h3>

<p>원래는 App.css에 font를 적용시켜 <code class="language-plaintext highlighter-rouge">&lt;App&gt;</code>에 감싸주기만 하면 됐다. 하지만, 지금은 Styled-Component를 사용하므로 GlobalStyle로 잘 적용시켜보자.</p>

<p>우선 styles 디렉토리에 있는 GlobalStyle을 담당하고있는 global.ts에 사용하고싶은 font들을 추가해주었다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// global.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createGlobalStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFBold</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFBold.ttf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFMedium</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFMedium.ttf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFLight</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFLight.ttf</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">GlobalStyle</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`
  @font-face {
        font-family: 'GmarketSansTTFBold';
        src: local('GmarketSansTTFBold'), local('GmarketSansTTFBold');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFBold</span><span class="p">}</span><span class="s2">) format('truetype');
  }
  @font-face {
        font-family: 'GmarketSansTTFMedium';
        src: local('GmarketSansTTFMedium'), local('GmarketSansTTFMedium');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFMedium</span><span class="p">}</span><span class="s2">) format('truetype');
  }
  @font-face {
        font-family: 'GmarketSansTTFLight';
        src: local('GmarketSansTTFLight'), local('GmarketSansTTFLight');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFLight</span><span class="p">}</span><span class="s2">) format('truetype');
  }
</span></code></pre></div></div>

<p>여기서 문제가 하나 생기는데, <code class="language-plaintext highlighter-rouge">.ttf</code> 파일을 제대로 import 해줄 수 없다. 해당 문제는 src의 디렉토리위에 <code class="language-plaintext highlighter-rouge">fonts.d.ts</code>를 만들어 해당 타입의 모듈을 import 해줄 수 있게 수정해주면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fonts.d.ts</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">*.ttf</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="globalstyle-적용">GlobalStyle 적용</h3>

<p>이제 index.tsx에 폰트들이 추가된 GlobalStyle을 잘 둘러주기만 하면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GlobalStyle</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./styles/global</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">rootElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">rootElement</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to find the root element</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">createRoot</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">);</span>
<span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">GlobalStyle</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="sr">/StrictMode</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="사용하고-싶은-font를-component에-적용">사용하고 싶은 Font를 Component에 적용</h3>

<p>이제 해당 App 안에 있는 컴포넌트에서 자유롭게 폰트를 꺼내서 사용할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.tsx</span>
<span class="p">...</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">p</span><span class="s2">`
  margin-top: 5rem;
  height: 10rem;
  font-size: 10rem;
  font-family: GmarketSansTTFLight, sans-serif, Arial;
`</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="651" alt="image" src="https://user-images.githubusercontent.com/66371206/178093400-3c5fa099-f561-4f21-954e-650dfa98b0b5.png" /></p>

<p>잘 적용된 모습을 볼 수 있다.</p>

<h2 id="후기">후기</h2>

<p>이번에는 우선 ttf로 통일을 했지만, 역시나 개선을 위해 woff로 하는것이 좋아보인다. 튜닝을 하게된다면, 웹폰트로 지정을 해서 로딩속도를 개선해보자.</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[Typescript, React, Styled-Component 환경에서 Font 적용하기]]></summary></entry><entry><title type="html">Typescript 에서 Zustand 배우기</title><link href="http://localhost:4000/til/2022/07/03/zustand.html" rel="alternate" type="text/html" title="Typescript 에서 Zustand 배우기" /><published>2022-07-03T00:00:00+09:00</published><updated>2022-07-03T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/07/03/zustand</id><content type="html" xml:base="http://localhost:4000/til/2022/07/03/zustand.html"><![CDATA[<h2 id="왜-zustand">왜 Zustand?</h2>

<p>Zustand에 대하여 공부하기 앞서, 왜 Zustand인지 알아보도록 하겠다. 우선, Zustand vs Recoil vs Jotai vs Redux vs Context API 등 전역상태관리에 대해 여러가지 방법들이 존재한다. 그중에 Zustand를 택한건 크게 두가지가 있다.</p>

<ol>
  <li>쉬움</li>
  <li>트렌드임</li>
</ol>

<p>우선 너무 쉽다. Recoil도 배웠을 때는 어렵지 않았다. 솔직히 Redux를 써보고 Recoil을 사용해서 인지는 몰라도, 한번 RecoilProvider로 감싸기만 하면, const state를 관리할 수 있다. 하지만 Redux는 여기서 Provider로 감싸지도 않고 사용할 수 있다. 그냥 상태관리를 해주는 파일을 하나 만들어, 여기서만 정해진 함수로 상태를 바꿀 수 있게 관리를 해주면, 전역 상태관리로 사용할 수 있다.</p>

<p>다음은 트렌드이다. 처음에는 아무리 그래도 React에서 100% 호환되게 서포트 해주는 Recoil이 다운로드수나 인기상으로 더 높다고 생각했다. 그렇게 전역 상태관리로 Recoil을 선택하고, 마지막으로 npm trend를 확인했는데, Zustand가 압도적으로 높았다. 여기서, Zustand를 써보기로 결심하고 공부를 시작해보았다.</p>

<p><img width="1387" alt="image" src="https://user-images.githubusercontent.com/66371206/177025269-8f208795-796f-4f38-88a9-84452da95117.png" /></p>

<blockquote>
  <p>놀라운 Zustand의 성장세..!</p>
</blockquote>

<h2 id="적용">적용</h2>

<p>간단하게 전역 상태 관리를 해보자</p>

<p>우선 간단하게 ID를 메인 페이지에서 입력하면, 추후에 모든 페이지에 적용이 되게 관리하고 싶어, 전역 상태를 채용했다고 가정해보겠다. 그럼 구현해야 되는 순서는 다음과 같다.</p>

<ol>
  <li>아이디를 저장하는 zustand 객체 생성</li>
  <li>ID 입력하는 페이지 구성</li>
  <li>다음 페이지에 방금 입력한 ID가 잘 적용 되었는지 확인</li>
</ol>

<h3 id="아이디를-저장하는-zustand-객체-rngus">아이디를 저장하는 zustand 객체 rngus</h3>

<blockquote>
  <p>typescript에 맞춰 interface를 만드는것에 주의</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">ID</span> <span class="p">{</span>
  <span class="nl">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">setId</span><span class="p">:</span> <span class="p">(</span><span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">IdStore</span> <span class="o">=</span> <span class="nx">create</span><span class="o">&lt;</span><span class="nx">ID</span><span class="o">&gt;</span><span class="p">((</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">id</span><span class="p">:</span> <span class="dl">"</span><span class="s2">init</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">setId</span><span class="p">:</span> <span class="p">(</span><span class="nx">id</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">id</span><span class="p">:</span> <span class="nx">id</span> <span class="p">}));</span>
  <span class="p">},</span>
  <span class="cm">/*
    setId: (by) =&gt; {
    set((state) =&gt; ({ id: by }));
  }, // 이게 더 보기 편할 수 있음
  */</span>
<span class="p">}));</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">IdStore</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>입력하지 않으면 페이지가 넘어가지 않음</p>
</blockquote>

<h3 id="id-입력하는-페이지-구성">ID 입력하는 페이지 구성</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">InputID</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nx">useNavigate</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span><span class="p">,</span> <span class="nx">setId</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">IdStore</span><span class="p">();</span>

  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FormEvent</span><span class="o">&lt;</span><span class="nx">HTMLFormElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="nx">navigate</span><span class="p">(</span><span class="s2">`/lobby`</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="kd">const</span> <span class="nx">onChange</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ChangeEvent</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setId</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="nx">onSubmit</span><span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Input</span>
        <span class="nx">autoComplete</span><span class="o">=</span><span class="dl">"</span><span class="s2">off</span><span class="dl">"</span>
        <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="nx">onChange</span><span class="p">}</span>
        <span class="nx">placeholder</span><span class="o">=</span><span class="dl">"</span><span class="s2">Enter ID</span><span class="dl">"</span>
        <span class="nx">id</span><span class="o">=</span><span class="dl">"</span><span class="s2">nickname</span><span class="dl">"</span>
      <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">Button</span> <span class="nx">disabled</span><span class="o">=</span><span class="p">{</span><span class="o">!</span><span class="nx">id</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Enter</span><span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Form</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="다음-페이지에-방금-입력한-id가-잘-적용-되었는지-확인">다음 페이지에 방금 입력한 ID가 잘 적용 되었는지 확인</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Lobby</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">id</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">IdStore</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Header</span><span class="o">&gt;</span><span class="nx">Lobby</span><span class="o">&lt;</span><span class="sr">/Header</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">Me</span><span class="o">&gt;</span><span class="nx">name</span><span class="p">:</span> <span class="p">{</span><span class="nx">id</span><span class="p">}</span> <span class="o">&lt;</span><span class="sr">/Me</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게 구성해서 확인해보았다.</p>

<h3 id="결과물">결과물</h3>

<p><img src="https://user-images.githubusercontent.com/66371206/177069313-1c86d716-465e-4c0b-87a0-779f79e1d73e.gif" alt="ezgif-4-300bae9264" /></p>

<p>그리고, 실시간으로 전역상태가 관리되고 있는지 확인하기 위해 한 페이지에서 다른 컴포넌트에서 한 전역상태를 가지고 테스트도 해 보았다.</p>

<h3 id="bearcounter-state">BearCounter State</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">create</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">zustand</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">interface</span> <span class="nx">BearState</span> <span class="p">{</span>
  <span class="nl">bears</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span>
  <span class="nl">increase</span><span class="p">:</span> <span class="p">(</span><span class="nx">by</span><span class="p">:</span> <span class="kr">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">useStore</span> <span class="o">=</span> <span class="nx">create</span><span class="o">&lt;</span><span class="nx">BearState</span><span class="o">&gt;</span><span class="p">()((</span><span class="kd">set</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span>
  <span class="na">bears</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="na">increase</span><span class="p">:</span> <span class="p">(</span><span class="nx">by</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="kd">set</span><span class="p">((</span><span class="nx">state</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">({</span> <span class="na">bears</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">bears</span> <span class="o">+</span> <span class="nx">by</span> <span class="p">})),</span>
<span class="p">}));</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">useStore</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="bearcounter-component">BearCounter Component</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TestOne</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">navigate</span> <span class="o">=</span> <span class="nx">useNavigate</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">bears</span><span class="p">,</span> <span class="nx">increase</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useStore</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">id</span><span class="p">,</span> <span class="nx">setId</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="kr">number</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="c1">// const increasePopulation = useStore((state) =&gt; state.increase);</span>

  <span class="kd">const</span> <span class="nx">formHandler</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">FormEvent</span><span class="o">&lt;</span><span class="nx">HTMLFormElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
    <span class="k">return</span> <span class="nx">increase</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">form</span> <span class="nx">onSubmit</span><span class="o">=</span><span class="p">{</span><span class="nx">formHandler</span><span class="p">}</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">button</span> <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">submit</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">incrase</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">TestTwo</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TestOne</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="testtwo">TestTwo</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TestTwo</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">bears</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useStore</span><span class="p">();</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">bears</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/h1</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">TestTwo</span><span class="p">;</span>
</code></pre></div></div>

<p><img src="https://user-images.githubusercontent.com/66371206/177069574-5e7cd794-b86a-4282-9b5a-1c998b4862b6.gif" alt="ezgif-4-4fc22081fc" /></p>

<p>잘 되는 모습을 볼 수 있다</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[왜 Zustand?]]></summary></entry><entry><title type="html">Recoil 배우기</title><link href="http://localhost:4000/til/2022/07/01/recoil.html" rel="alternate" type="text/html" title="Recoil 배우기" /><published>2022-07-01T00:00:00+09:00</published><updated>2022-07-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/07/01/recoil</id><content type="html" xml:base="http://localhost:4000/til/2022/07/01/recoil.html"><![CDATA[<h2 id="why-recoil">Why Recoil?</h2>

<p>왜 Recoil을 사용할까?</p>

<p>우선 전역 상태관리는 개발을 하다보면 무조건 필요로 하게 된다. 특히나 전에 만들었던 프로젝트 경우에는 게임이였기 때문에, 더욱 필요했고, 이번에도 적지만 id 같은 경우에 모든 페이지마다 변경되는 state이다 보니 전역상태관리가 필요로 하게 된다.</p>

<p>recoil공식 설명에서는 사용하는 이유 즉 탄생배경을 다음과 같이 설명한다.</p>

<ol>
  <li>컴포넌트의 상태는 공통된 상위요소까지만 끌어 올릴 수 있어, 이 과정에서 거대한 트리가 다시 렌더링 되는 효과가 나온다.</li>
  <li>Context는 단일 값만 가질 수 있어, Consumer가 가지는 여러 값들의 집합을 담을 수 없다.</li>
  <li>두 가지 특성이 트리의 상단부터 말단까지 이어져야 돼서 분할이 어려워진다.</li>
</ol>

<p>즉 Recoil은 해당 문제를 해결하기 위해 orthogonal 하지만 본직적인 방향 그래프를 정의해서 React 트리에 붙이게 된다. 즉 그래프의 뿌리 (atoms) 으로부터 시작해 Selectors(순수함수)를 거쳐 컴포넌트로 흐르게 된다.</p>

<p>즉 Recoil의 사용함으로써 가져가는 장점은 다음과 같다.</p>

<ol>
  <li>동시성와 React의 호환성</li>
  <li>상태정의 분산이 가능 -&gt; 코드 분할이 쉽다</li>
  <li>컴포넌트를 수정하지 않고, 파생된 데이터로 대체 가능</li>
  <li>공유된 상태도 React local state로 간단하게 사용 가능</li>
</ol>

<h2 id="atom">Atom</h2>

<p>Recoil의 상태를 나타내는 상태 단위라 볼 수 있다.</p>

<h3 id="atom-생성">Atom 생성</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">atom</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">({</span>
  <span class="na">key</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span>
  <span class="na">default</span><span class="p">:</span> <span class="nx">T</span> <span class="o">|</span> <span class="nb">Promise</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span> <span class="o">|</span> <span class="nx">RecoilValue</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">,</span>

  <span class="nx">effects_UNSTABLE</span><span class="p">?:</span> <span class="nx">$ReadOnlyArray</span><span class="o">&lt;</span><span class="nx">AtomEffect</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;&gt;</span><span class="p">,</span>

  <span class="nx">dangerouslyAllowMutability</span><span class="p">?:</span> <span class="nx">boolean</span><span class="p">,</span>
<span class="p">}):</span> <span class="nx">RecoilState</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>위와 유사하게, atom을 선언 해 주어야 atom 함수를 사용 할 수 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">key</code>는 atom의 unique한 값</li>
  <li><code class="language-plaintext highlighter-rouge">default</code>는 초기값 혹은 selector, promise의 객체</li>
  <li><code class="language-plaintext highlighter-rouge">effect_UNSTABLE</code>는 Atom Effects 배열</li>
  <li><code class="language-plaintext highlighter-rouge">dangerouslyAllowMutability</code>는 atom이 변경될 경우, 등록된 컴포넌트에게 알리지 않고 리렌더링을 방지하는 옵션</li>
</ul>

<h3 id="atom의-hook">Atom의 Hook</h3>

<p>먼저 atom을 생성해야된다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">myState</span> <span class="o">=</span> <span class="nx">atom</span><span class="p">({</span>
  <span class="na">key</span><span class="p">:</span> <span class="dl">"</span><span class="s2">uniqueKey</span><span class="dl">"</span><span class="p">,</span>
  <span class="na">default</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<h4 id="userecoilstate">useRecoilState</h4>

<p>atom을 읽고 쓰기 위해 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">[</span><span class="nx">val</span><span class="p">,</span> <span class="nx">setVal</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useRecoilState</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="userecoilvalue">useRecoilValue</h4>

<p>atom을 읽을 때 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">useRecoilValue</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="usesetrecoilstate">useSetRecoilState</h4>

<p>atom에 쓰기 위해 사용
업데이트 할 수 있는 setter를 리턴한다
컴포넌트를 atom에 등록하지 않아, 변경이 되어도 리렌더링 되지는 않는다. -&gt; 즉 atom을 사용하지 않는 경우 이 훅을 사용</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">setVal</span> <span class="o">=</span> <span class="nx">useSetRecoilState</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="useresetrecoilstate">useResetRecoilState</h4>

<p>atom을 default를 초기화한다
비동기 setter를 리턴하며, 컴포넌트 리렌더링이 되지는 않는다</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">reset</span> <span class="o">=</span> <span class="nx">useResetRecoilState</span><span class="p">(</span><span class="nx">uniqueKey</span><span class="p">);</span>
</code></pre></div></div>

<h4 id="userecoilcallback">useRecoilCallback</h4>

<p>Recoil 상태에서 callback시킬 수 있는 훅</p>

<h2 id="recoilroot">RecoilRoot</h2>

<p>Atom 컨텍스트를 제공해주며, hook의 조상으로 사용된다.</p>

<p>override가 <code class="language-plaintext highlighter-rouge">true</code>라면 새로운 Scope 생성</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">RecoilRoot</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">recoil</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">App</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">RecoilRoot</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Components</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/RecoilRoot</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="recoilselector">RecoilSelector</h2>

<p>atom의 상태에서 파생된 데이터로, 상태에 의존하는 동적인 데이터이다.</p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[Why Recoil?]]></summary></entry><entry><title type="html">왜 TypeScript인가</title><link href="http://localhost:4000/til/2022/06/30/why-typescript.html" rel="alternate" type="text/html" title="왜 TypeScript인가" /><published>2022-06-30T00:00:00+09:00</published><updated>2022-06-30T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/06/30/why-typescript</id><content type="html" xml:base="http://localhost:4000/til/2022/06/30/why-typescript.html"><![CDATA[<h2 id="typescript">TypeScript</h2>

<h3 id="why-typescript">Why TypeScript</h3>

<p>JavaScript는 Dynamic Typing을 지원한다. <a href="https://seongonion.tistory.com/16">관련블로그</a></p>

<p>간략하게 설명하면, 변수를 지정시에 데이터 타입등을 정하지 않고, 컴퓨터가 정하도록 둘 수 있다. 코드가 간결하고 로직을 명확하게 볼 수 있지만, 컴퓨터가 파악하기에 실행속도가 느려지가 해당 오류가 날 수 있다. 그걸 TypeScript를 이용하여 정적 타이핑으로 만들어 주는 것이다. 이런 데이터 타입을 지정해 줌으로써, 코드의 안정성과 정교함이 커지게 된다.</p>

<p>예제</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">5</span> <span class="o">-</span> <span class="dl">"</span><span class="s2">3</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//?</span>
<span class="mi">1</span> <span class="o">+</span> <span class="kc">true</span><span class="p">;</span> <span class="c1">//?</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">mul</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">mul</span><span class="p">();</span> <span class="c1">//?</span>
<span class="nx">mul</span><span class="p">(</span><span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//?</span>
<span class="nx">mul</span><span class="p">(</span><span class="kc">true</span><span class="p">,</span> <span class="dl">"</span><span class="s2">hi</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//? -&gt; Runtime Error</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="nx">count</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">;</span> <span class="c1">//Type 'string' is not assignable to type 'number'</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">append</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
<span class="p">};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">apend</span><span class="p">;</span> <span class="c1">//undefined</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">append</span><span class="p">:</span> <span class="mi">123</span><span class="p">,</span>
<span class="p">};</span>
<span class="nx">obj</span><span class="p">.</span><span class="nx">apend</span><span class="p">;</span> <span class="c1">//'append'아니야? 그거 2번줄에 declared ㅋㅋ</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">mul</span><span class="p">(</span><span class="nx">a</span><span class="p">:</span> <span class="kr">number</span><span class="p">,</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">number</span><span class="p">):</span> <span class="kr">string</span> <span class="p">{</span>
  <span class="c1">//return도 지정 가능</span>
  <span class="k">return</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*</span> <span class="nx">b</span><span class="p">).</span><span class="nx">toString</span><span class="p">();</span>
<span class="p">}</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">mul</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">));</span>
</code></pre></div></div>

<h3 id="types">Types</h3>

<h4 id="implicit-types-타입추론">Implicit Types [타입추론]</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">test</span><span class="dl">"</span><span class="p">;</span>
<span class="nx">a</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="c1">//string -&gt; number 안됨!</span>
<span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">a</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">b</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">c</span><span class="dl">"</span><span class="p">];</span>
<span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="dl">"</span><span class="s2">d</span><span class="dl">"</span><span class="p">);</span> <span class="c1">//OK</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">fire</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">member1</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">juhyeong</span><span class="dl">'</span><span class="p">;</span>
    <span class="nl">member2</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">yeonggi</span><span class="dl">'</span><span class="p">;</span>
    <span class="nl">member3</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">haryung</span><span class="dl">'</span><span class="p">;</span>
<span class="p">}</span>
<span class="nx">fire</span><span class="p">.</span><span class="nx">member1</span> <span class="o">=</span> <span class="mi">42</span> <span class="c1">//ERROR</span>
</code></pre></div></div>

<h4 id="explicit-types-타입지정">Explicit Types [타입지정]</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">c</span><span class="p">:</span> <span class="kr">number</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span> <span class="c1">//OK</span>
</code></pre></div></div>

<h4 id="null-처리">NULL 처리</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">yeonggi</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">team</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">}</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">team</span><span class="p">:</span> <span class="dl">"</span><span class="s2">FIRE</span><span class="dl">"</span><span class="p">,</span>
<span class="p">};</span>
<span class="k">if</span> <span class="p">(</span><span class="nx">yeonggi</span><span class="p">.</span><span class="nx">age</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//ERROR</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">yeonggi</span><span class="p">.</span><span class="nx">age</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">type</span> <span class="nx">Member</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">;</span>
  <span class="nl">age</span><span class="p">?:</span> <span class="kr">number</span><span class="p">;</span>
<span class="p">};</span>
<span class="kd">function</span> <span class="nx">memberGenerator</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//?</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">name</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
<span class="c1">// const memberGenerator = (name: string) : Player =&gt; ({name})</span>
<span class="kd">const</span> <span class="nx">yeonggi</span> <span class="o">=</span> <span class="nx">memberGenerator</span><span class="p">(</span><span class="dl">"</span><span class="s2">yeonggi</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">yeonggi</span><span class="p">.</span><span class="nx">age</span> <span class="o">=</span> <span class="mi">12</span><span class="p">;</span>
</code></pre></div></div>

<h4 id="any">ANY</h4>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span><span class="p">:</span> <span class="kr">any</span><span class="p">[]</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
<span class="kd">const</span> <span class="nx">b</span><span class="p">:</span> <span class="kr">any</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

<span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">//OK but hmmm...</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">a</span><span class="p">:</span> <span class="nx">unknown</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">a</span> <span class="o">===</span> <span class="kr">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://ui.toast.com/weekly-pick/ko_20220323">never 관련 블로그</a></p>

<h3 id="generic">Generic</h3>

<h3 id="type-vs-interface">Type vs Interface</h3>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="Javascript" /><category term="TypeScript" /><summary type="html"><![CDATA[TypeScript]]></summary></entry><entry><title type="html">Socket.io 연결 에러</title><link href="http://localhost:4000/til/2022/06/29/socket-error.html" rel="alternate" type="text/html" title="Socket.io 연결 에러" /><published>2022-06-29T00:00:00+09:00</published><updated>2022-06-29T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/06/29/socket-error</id><content type="html" xml:base="http://localhost:4000/til/2022/06/29/socket-error.html"><![CDATA[<h2 id="socket-통신시-에러나는-경우">Socket 통신시 에러나는 경우</h2>

<p>최근에 WebRTC를 사용하며 소켓 통신을 해야할 일이 생겼는데, 웬걸 자꾸 연결에서 실패를 하였다.</p>

<p>우선 결론은 dependency 확인이다. Front에서 연결을 하려는 소켓 통신인 경우 <code class="language-plaintext highlighter-rouge">socket.io-client</code>라는 module을 사용하는데, 이게 Back에 기다리고 있는 <code class="language-plaintext highlighter-rouge">socket.io</code> 모듈에서의 Server와 Socket의 dependency를 맞춰야 된다. 내가 Front 에서 사용하던 모듈은 ^4.3 이였고 백에서는 ^2에서 주었기 때문에 당연히 오류가 났다… 결국 둘 다 최근 모듈인 4세대로 바꾼 후 잘 작동하였다 ㅎㅎ
<img width="305" alt="image" src="https://user-images.githubusercontent.com/66371206/176819682-9a5fe411-e64c-4152-88dd-0c7c6d303155.png" /></p>

<p>백엔드와 소통을 열심히 하자~</p>

<h3 id="공식-document와-stackoverflow를-보며-했던-tries">공식 document와 StackOverflow를 보며 했던 tries</h3>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">io</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">socket.io-client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="o">*</span> <span class="k">as</span> <span class="nx">io</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">socket.io-client</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">io</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">socket.io-client</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<p>등 버전에 따라 import 하는 방식도 다른 것 같았다.</p>

<h3 id="유의사항">유의사항</h3>

<blockquote>
  <p>Backend에서 줄 때는 CORS에러에 유의하자.</p>
</blockquote>

<blockquote>
  <p>ES6의 React StrictMode를 꺼야지 Socket통신을 한번만 받는다. 켜두면 두번 받아서 한번은 잘 받고, 한번은 제대로 못받아서 오류가 났었다.</p>
</blockquote>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="Javascript" /><summary type="html"><![CDATA[Socket 통신시 에러나는 경우]]></summary></entry><entry><title type="html">Mac 초기 세팅</title><link href="http://localhost:4000/mac/2022/06/05/mac-setting.html" rel="alternate" type="text/html" title="Mac 초기 세팅" /><published>2022-06-05T00:00:00+09:00</published><updated>2022-06-05T00:00:00+09:00</updated><id>http://localhost:4000/mac/2022/06/05/mac-setting</id><content type="html" xml:base="http://localhost:4000/mac/2022/06/05/mac-setting.html"><![CDATA[<h2 id="나만의-맥북-셋업">나만의 맥북 셋업</h2>

<p>이번에 새로운 Mac m1 pro 를 갖게 되면서, 설치하다보니 뭐를 설치해야되고 어떤거를 동기화 해야되고 생각보다 기억이 잘 안났다. 그래서 이번 기회에 나의 맥이라면 이런걸 해야하는 TODO List를 만들어 보았다.</p>

<h3 id="개발자-도구"><a href="#개발자도구">개발자 도구</a></h3>

<ul>
  <li><a href="#iterm-setting">iTerm2</a></li>
  <li><a href="#web-programming">Web</a></li>
  <li><a href="#blog">Blog</a></li>
</ul>

<h3 id="어플"><a href="#applications">어플</a></h3>

<ul>
  <li><a href="#chrome">Chrome</a></li>
  <li><a href="#visual-stuido-code">Visual Stuido Code</a></li>
  <li><a href="#discord">Discord</a></li>
  <li><a href="#kakaotalk">KakaoTalk</a></li>
  <li><a href="#webex">Webex</a></li>
  <li><a href="#slack">Slack</a></li>
  <li><a href="#notion">Notion</a></li>
  <li><a href="#terminus">Terminus</a></li>
</ul>

<h3 id="위젯"><a href="#Widgets">위젯</a></h3>

<ul>
  <li><a href="#alt-tab">Alt-Tab</a></li>
  <li><a href="#fig">Fig</a></li>
  <li><a href="#runcat">RunCat</a></li>
  <li><a href="#unicorn">Unicorn</a></li>
  <li><a href="#hidden-bar">Hidden-Bar</a></li>
  <li><a href="#magnet">Magnet</a></li>
  <li><a href="#karabiner">Karabiner</a></li>
  <li><a href="#amphetamine">Amphetamine</a></li>
</ul>

<h2 id="개발자도구">개발자도구</h2>

<h3 id="iterm-setting">iTerm Setting</h3>

<p>나는 내장 terminal보다 iTerm을 주로 쓴다. 하이라이트, 복사, 붙여넣기, 히스토리 등 다양한 기능이 많아서 더 편함</p>

<ul>
  <li>
    <h4 id="oh-my-zsh">Oh-my-zsh</h4>

    <p>기왕 Terminal 쓰는김에 이쁘면 좋잖아요?</p>

    <p><a href="https://ohmyz.sh">공식문서</a></p>
  </li>
  <li>
    <h4 id="powerlevel10k">Powerlevel10k</h4>

    <p>마찬가지로 zsh shell을 더 이쁘게 만들어준다.</p>

    <p>설치 끝내고, VSC Terminal에서도 폰트 적용을 해서 깨지는걸 방지하자</p>

    <p><a href="https://github.com/romkatv/powerlevel10k">공식문서</a>
<a href="https://velog.io/@boms2/Mac-Powerlevel10k로-Zsh-터미널-꾸미기-M1">도움받은 블로그</a></p>

    <p>완성된 모습
<img width="681" alt="스크린샷 2022-06-09 오후 2 00 03" src="https://user-images.githubusercontent.com/66371206/172768037-5da27996-7652-42ff-874b-f84c55648b32.png" /></p>
  </li>
  <li>
    <h4 id="brew">brew</h4>

    <p>당연히 깔아야 하는 맥주</p>

    <p><a href="https://brew.sh/index_ko">공식문서</a></p>
  </li>
  <li>
    <h4 id="git-setup">git setup</h4>

    <p>git login을 미리미리 해두자</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git config <span class="nt">--global</span> user.name <span class="s2">"John Doe"</span>
<span class="nv">$ </span>git config <span class="nt">--global</span> user.email johndoe@example.com
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="web-programming">Web Programming</h3>

<p>명색이 프론트엔드이기에 깔아야 하는 기본적인 세팅</p>

<ul>
  <li>
    <h4 id="node">node</h4>

    <p>맥주가 있어 행복하다</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>node
node <span class="nt">--version</span>
npm <span class="nt">--version</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h4 id="yarn">yarn</h4>

    <p>npm보다 더 안전하고 오류를 잘 잡아준다</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>yarn <span class="nt">--ignore-dependencies</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="blog">Blog</h3>

<p>해당 깃허브 블로그 또한 jekyll 로 관리하기에 ruby, bundle, jekyll설치가 필수적이다</p>

<ul>
  <li>
    <h4 id="ruby">Ruby</h4>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>rbenv ruby-build
rbenv <span class="nb">install</span> <span class="nt">-l</span> <span class="c">#버전은 알아서 선택! 근데 3.0.0 부터 잘 안됐던거 같음</span>
rbenv <span class="nb">install </span>2.7.2
rbenv global 2.7.2
</code></pre></div>    </div>

    <p>zsh 적용하기</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.zshrc
</code></pre></div>    </div>

    <p>들어가서 환경변수 추가</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.rbenv/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>rbenv init -<span class="si">)</span><span class="s2">"</span>
</code></pre></div>    </div>
  </li>
  <li>
    <h4 id="bundle--jekyll">Bundle &amp;&amp; Jekyll</h4>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>bundler
bundle add jekyll
bundle <span class="nb">install
</span>gem <span class="nb">install </span>jekyll
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="applications">Applications</h2>

<p>내가 최초로 설치했던 어플리케이션 목록</p>

<h3 id="chrome">Chrome</h3>

<p>사파리 대체용품</p>

<h3 id="visual-stuido-code">Visual Stuido Code</h3>

<ul>
  <li>
    <h4 id="code-runner">Code Runner</h4>

    <p>작성한 코드를 빠르게 실행시켜주게 도와주는 확장</p>
  </li>
  <li>
    <h4 id="discord-presence">Discord Presence</h4>

    <p>Discord 에서 내가 어떤 작업하고 있는지 보여주는 확장
<img width="353" alt="스크린샷 2022-06-09 오후 2 02 14" src="https://user-images.githubusercontent.com/66371206/172768189-80f3ab3c-8d3a-4ff7-98ff-a30175ceed47.png" /></p>
  </li>
  <li>
    <h4 id="eslint">ESLint</h4>

    <p>ESLint 규칙 적용해주는 확장</p>
  </li>
  <li>
    <h4 id="git-graph">Git-Graph</h4>

    <p>VSC Git Page에서 Git-Kraken 처럼 어떤 브랜치에서 어떤 작업하는지 보여주는 확장</p>
  </li>
  <li>
    <h4 id="live-share">Live Share</h4>

    <p>VSC를 쓰는 주된 이유</p>
  </li>
  <li>
    <h4 id="live-server">Live Server</h4>

    <p>VSC를 쓰는 주된 이유2 -&gt; Live share 호스트 컴퓨터에서 서버 올릴 때 접속한 사람들도 같은 localhost로 접속 할 수 있음</p>
  </li>
  <li>
    <h4 id="prettier">Prettier</h4>

    <p>Lint 혹은 일반적인 코드 포맷팅 도와주는 포매터
기본 foramtter를 prettier로 설정 및 format on save 등록하는걸 까먹지 말자.</p>

    <p><img src="https://user-images.githubusercontent.com/66371206/172768418-1d71bd54-8a8d-4faf-8a08-0aef05dc6d74.png" alt="image" /></p>

    <p><img src="https://user-images.githubusercontent.com/66371206/172768450-f4fc69bc-5ba7-4a13-8cf4-e3788dfd480d.png" alt="image" /></p>
  </li>
  <li>
    <h4 id="styled-components">Styled-Components</h4>

    <p>styled에서 주석처럼 안달리고, 코드처럼 사용가능. 훨씬 쉽다.
심지어 추천도 해준다
<img src="https://user-images.githubusercontent.com/66371206/172768289-34e830cd-3a5b-472e-87a0-e2e6dd12f0d1.png" alt="image" /></p>
  </li>
  <li>
    <h4 id="material-icon">Material Icon</h4>

    <p><img src="https://user-images.githubusercontent.com/66371206/172767754-dee7ea7e-5c56-485d-aae3-8cce8d3cf2af.png" alt="image" /></p>

    <p>옆에 아이콘들 이쁘게 보임</p>
  </li>
  <li>
    <h4 id="markdown-all-in-one">Markdown All in One</h4>

    <p>블로그 쓸 일이 많다면, 마크다운 쓸 때 도움 받을 수 있다</p>
  </li>
  <li>
    <h4 id="markdown-preview">Markdown Preview</h4>

    <p>마크다운 미리보기 지원</p>

    <p><img src="https://user-images.githubusercontent.com/66371206/172768531-8acc01b2-0d48-4926-81b1-c780fa316a20.png" alt="image" /></p>
  </li>
</ul>

<h3 id="discord">Discord</h3>

<h3 id="kakaotalk">KakaoTalk</h3>

<h3 id="webex">Webex</h3>

<h3 id="slack">Slack</h3>

<h3 id="notion">Notion</h3>

<h3 id="terminus">Terminus</h3>

<h2 id="widgets">Widgets</h2>

<h3 id="alt-tab">Alt-Tab</h3>

<p>보통 맥북을 사용하다보면, Cmd + Tab을 주로 사용하는데, 사파리 창이 여러개 띄워져 있는 경우에 상당히 불편하다. 윈도우처럼 쓰는 창들이 전부 분할해서 나오면 참 좋겠다~ 싶을 때 사용하는 위젯</p>

<p><img width="1215" alt="image" src="https://user-images.githubusercontent.com/66371206/172768969-3022bcc2-c7d9-42ff-ae94-ad978e8af522.png" /></p>

<h3 id="fig">Fig</h3>

<p>터미널을 쓰다보면, 단축키가 뭐였는지 까먹을 때가 많다. 올바른 명령어를 추천해주기도 하고, cd 에서 어디로 가야할 지 모를 때, ls로 안찾고 gui처럼 쉽게 찾을 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/172769368-c464cf70-019b-4216-8baa-ec91a1d90111.png" alt="스크린샷 2022-06-09 오후 2 12 43" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/172769373-95a150b5-d293-4589-af72-9cb13196ba90.png" alt="스크린샷 2022-06-09 오후 2 12 58" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/172769378-86ed108d-4a26-492c-a47d-b90ba30a515b.png" alt="스크린샷 2022-06-09 오후 2 13 10" /></p>

<h3 id="runcat">RunCat</h3>

<p>상태바에 CPU 속도만큼 뛰는 고양이</p>

<p>나는 주로 귀여운 슬라임과 WIFI 다운로드 및 업로드 속도를 켜둔다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/172769669-0f0e2982-bf7f-4395-8fd8-a8fe1384ead2.gif" alt="화면-기록-2022-06-09-오후-2 14 41" /></p>

<h3 id="unicorn">Unicorn</h3>

<p>사파리 광고차단 위젯.</p>

<p>유료인데 값어치를 한다고 생각한다</p>

<h3 id="hidden-bar">Hidden-Bar</h3>

<p>상태바에 너무 많아서 정리하고 싶을 때 사용.</p>

<p>보통 상태바에서 정말 빠져도 괜찮다~ 싶은데, 필수록 달아둬야 하는게 많은데, 그런것들 빼놓을 수 있다</p>

<h3 id="magnet">Magnet</h3>

<h3 id="karabiner">Karabiner</h3>

<p>윈도우 키보드를 맥용으로 사용할 수 있게 도와준다.</p>

<p>나는 Cmd와 Option 키만 바꿔서 사용한다.</p>

<h3 id="amphetamine">Amphetamine</h3>]]></content><author><name>071yoon</name></author><category term="Mac" /><category term="Mac" /><category term="Setting" /><summary type="html"><![CDATA[나만의 맥북 셋업]]></summary></entry><entry><title type="html">CSS의 역사</title><link href="http://localhost:4000/css/2022/05/31/css-history.html" rel="alternate" type="text/html" title="CSS의 역사" /><published>2022-05-31T00:00:00+09:00</published><updated>2022-05-31T00:00:00+09:00</updated><id>http://localhost:4000/css/2022/05/31/css-history</id><content type="html" xml:base="http://localhost:4000/css/2022/05/31/css-history.html"><![CDATA[<center>CSS 트렌드</center>

<p><img src="https://user-images.githubusercontent.com/66371206/171093573-f5758d9a-6ff3-44e8-aa86-8c52ad983c93.png" alt="image" /></p>

<center>(출처: oliverturner's twitter)</center>

<h2 id="traditional-css">Traditional CSS</h2>

<p>가장 전통적인 CSS 방식에는 크게 3가지 방식이 존재한다.</p>

<ul>
  <li><a href="#inline-css">Inline CSS</a></li>
  <li><a href="#internal-css">Internal CSS</a></li>
  <li><a href="#external-css">External CSS</a></li>
</ul>

<h3 id="inline-css">Inline CSS</h3>

<blockquote>
  <p>일반적으로 간단하게 태그안에 style을 적용하는 방법</p>
</blockquote>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;h1</span> <span class="na">style=</span><span class="s">"color:white;padding:30px;"</span><span class="nt">&gt;</span>Inline CSS<span class="nt">&lt;/h1&gt;</span>
<span class="nt">&lt;p</span> <span class="na">style=</span><span class="s">"color:white;"</span><span class="nt">&gt;</span>HTML 안에서 직접 스타일 적용.<span class="nt">&lt;/p&gt;</span>
</code></pre></div></div>

<h4 id="inline-css-장점">Inline CSS 장점</h4>

<ul>
  <li>HTML 페이지에 쉽고 빠르게 CSS 룰을 삽입할 수 있다.
    <ul>
      <li>변경에 대한 미리보기, 그리고 빠르게 고칠 수 있는 성능에 유용하다.</li>
    </ul>
  </li>
  <li>별도의 문서로 외부 스타일을 만들거나 업로드 할 필요가 없다.</li>
</ul>

<h4 id="inline-css-단점">Inline CSS 단점</h4>

<ul>
  <li>CSS룰을 모든 HTML 엘리먼트에 추가하는 것은 시간 낭비이며 HTML 구조를 복잡하게 만든다.</li>
  <li>여러 엘리먼트에 스타일을 적용하는 것은 웹페이지 사이즈가 커지고 다운로드 시간이 걸리게 된다.</li>
</ul>

<h3 id="internal-css">Internal CSS</h3>

<blockquote>
  <p>CSS Object Model처럼 사용하는 방법.</p>
</blockquote>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;style </span><span class="na">type=</span><span class="s">"text/css"</span><span class="nt">&gt;</span>
  <span class="nt">body</span> <span class="p">{</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">h1</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">60px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
</code></pre></div></div>

<h4 id="internal-css-장점">Internal CSS 장점</h4>

<ul>
  <li>스타일시트에 클래스와 ID 선택자를 사용할 수 있다.</li>
  <li>동일한 HTML 파일 내에서만 코드를 추가하여 여러 파일을 업로드할 필요가 없다.</li>
</ul>

<h4 id="internal-css-단점">Internal CSS 단점</h4>

<ul>
  <li>HTML 문서에 코드를 추가하는 것은 페이지의 사이즈와 로딩 시간을 증가시킬 수 있다.</li>
</ul>

<h3 id="external-css">External CSS</h3>

<blockquote>
  <p>외부에 .css 파일을 따로 빼서 만드는 방법.</p>
</blockquote>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* external.css */</span>
<span class="nc">.xleftcol</span> <span class="p">{</span>
  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">33%</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#809900</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.xmiddlecol</span> <span class="p">{</span>
  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">34%</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#eff2df</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- head --&gt;</span>
<span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">type=</span><span class="s">"text/css"</span> <span class="na">href=</span><span class="s">"external.css"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h4 id="external-css의-장점">External CSS의 장점</h4>

<ul>
  <li>CSS 코드가 별도의 문서로 있기 때문에 HTML 파일 구조가 깔끔해지고, 사이즈가 작아진다.</li>
  <li>여러 페이지들에 같은 .css 파일을 사용할 수 있다.</li>
</ul>

<h4 id="external-css의-단점">External CSS의 단점</h4>

<ul>
  <li>외부 CSS 파일이 로드되기 전까지 페이지가 올바르게 표시되지 않는다.</li>
  <li>여러 CSS 파일을 업로드 하거나 연결하면 사이트 다운로드 시간이 증가할 수 있다.</li>
</ul>

<h2 id="sassscss">SASS/SCSS</h2>

<blockquote>
  <p>SCSS와 SASS는 CSS를 편리하게 이용할 수 있도록 도와주며 추가 기능도 있는 확장판이다</p>
</blockquote>

<p>간단하게 css 스타일의 코드 차이를 보며 이해해보자</p>

<h3 id="일반적인-css">일반적인 CSS</h3>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.list</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">li</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="sx">url("./image.jpg")</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">li</span><span class="nd">:last-child</span> <span class="p">{</span>
  <span class="nl">margin-right</span><span class="p">:</span> <span class="m">-10px</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="scss">SCSS</h3>

<div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.list</span> <span class="p">{</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span><span class="p">;</span>
  <span class="nt">li</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
    <span class="nl">background</span><span class="p">:</span> <span class="sx">url("./image.jpg")</span><span class="p">;</span>
    <span class="k">&amp;</span><span class="nd">:last-child</span> <span class="p">{</span>
      <span class="nl">margin-right</span><span class="p">:</span> <span class="m">-10px</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="sass">SASS</h3>

<div class="language-sass highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.list</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">100px</span>
  <span class="nl">float</span><span class="p">:</span> <span class="nb">left</span>
  <span class="nt">li</span>
    <span class="nl">color</span><span class="p">:</span> <span class="no">red</span>
    <span class="nl">background</span><span class="p">:</span> <span class="sx">url("./image.jpg")</span>
    <span class="k">&amp;</span><span class="nd">:last-child</span>
      <span class="nl">margin-right</span><span class="p">:</span> <span class="m">-10px</span>
</code></pre></div></div>

<h3 id="왜-쓰는가">왜 쓰는가</h3>

<blockquote>
  <p>CSS가 복잡한 언어는 아니지만 작업이 크고 고도화 될수록 불편하다!</p>
</blockquote>

<p>SCSS나 SASS는 선택자를 많이 남발하거나 프로젝트가 커지면서 점점 복잡해지게 되는데, 이러한 부분에서 가독성과 재사용성을 높여주며 유지보수를 쉽게 만들어준다. 여기서 도움을 주는 도구는 다음과 같다.</p>

<ul>
  <li>변수의 사용</li>
  <li>조건문과 반복문</li>
  <li>Import</li>
  <li>Nesting</li>
  <li>Mixin</li>
  <li>Extend/Inheritance</li>
</ul>

<h3 id="scss-vs-sass">SCSS vs SASS</h3>

<p>SCSS = (Sassy CSS) -&gt; 지리는 CSS</p>

<p>SASS = (Syntactically Awesome Style Sheets) -&gt; 문법적으로 엄청난 CSS</p>

<blockquote>
  <p>SASS는 들여쓰기 기반, SCSS는 {} 기반</p>
</blockquote>

<p>일반적으로 SCSS가 더 넓은 범용성과 CSS의 호환성 등의 장점으로 SCSS를 사용하기를 권장하고 있다!</p>

<h2 id="bem">BEM</h2>

<blockquote>
  <p>Blcok, Element, Modifier</p>
</blockquote>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.header__navigation--navi-text</span> <span class="p">{</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>여기서 header는 <code class="language-plaintext highlighter-rouge">Block</code>, naviagtion은 <code class="language-plaintext highlighter-rouge">Element</code>, navi-text는 <code class="language-plaintext highlighter-rouge">Modifier가</code> 된다.</p>

<p>BEM은 기본적으로 ID를 사용하지 않으며, class만을 사용하며, 이름을 연결할 때는 block-name과 같이 하이픈 하나만 써서 연결한다.</p>

<h3 id="block">Block</h3>

<blockquote>
  <p>재사용 가능한 기능적으로 독립적인 페이지 컴포넌트</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/171098198-40127e9b-c070-4c13-8a33-4198472d5d28.png" alt="9977B24F5C7BF67802" /></p>

<p>즉 위 사진처럼 떼어내서, 재사용이 가능한 컴포넌트를 부른다. 어디에서나 종속되지 않고, 독립적으로 사용할 수 있으며 특징으로는 블럭은 블럭으로 감쌀 수 있다는 점이 있다.</p>

<h3 id="element">Element</h3>

<blockquote>
  <p>블럭을 구성하는 단위</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/171098520-fe2f8dac-867e-45e3-85d3-9979e60e5647.png" alt="993FCF4A5C7BF68F27" /></p>

<p>자신이 속한 블럭 내에서만 의미를 가지기 때문에 블럭 안에서 떼어다 다른 데 쓸 수 없다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">form</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">search-form</span><span class="dl">"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">input</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">search-form__input</span><span class="dl">"</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="nx">button</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">search-form__button</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Search</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/form</span><span class="err">&gt;
</span></code></pre></div></div>

<p>위 예시에서 <code class="language-plaintext highlighter-rouge">.search-form</code>은 블럭이고, <code class="language-plaintext highlighter-rouge">.search-form__input</code>과 <code class="language-plaintext highlighter-rouge">.search-form__button</code>은 엘리먼트이다.
저 search-form이란 블럭은 떼어내서 마음껏 붙여도 된다.
하지만 내부의 input과 button은 검색을 위한 인풋창이자 버튼이기 때문에, search-form 안에서만 존재 의미가 있는 엘리먼트이다.</p>

<h3 id="modifier">Modifier</h3>

<blockquote>
  <p>블럭이나 엘리먼트의 속성을 담당</p>
</blockquote>

<p><img src="https://user-images.githubusercontent.com/66371206/171098735-bb4930fb-7ee3-4bfd-82e5-de42bd017a50.png" alt="992F5E4A5C7BF68F33" /></p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">ul</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">tab</span><span class="dl">"</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">tab__item tab__item--focused</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">탭</span> <span class="mi">1</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">tab__item</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">탭</span> <span class="mi">2</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">li</span> <span class="kd">class</span><span class="o">=</span><span class="dl">"</span><span class="s2">tab__item</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">탭</span> <span class="mi">3</span><span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/ul</span><span class="err">&gt;
</span></code></pre></div></div>

<p>위 코드에서 –focused가 수식어에 해당한다. 저렇게 작성된 걸 불리언(boolean) 타입이라고 하는데, 그 값이 true라고 가정하고 사용하며, <code class="language-plaintext highlighter-rouge">key-value</code>로도 사용할 수 있다.</p>

<h2 id="css-module">CSS Module</h2>

<blockquote>
  <p>리액트 프로젝트에서 컴포넌트를 스타일링 할 때 CSS Module 이라는 기술을 사용하면, CSS 클래스가 중첩되는 것을 완벽히 방지할 수 있다.</p>
</blockquote>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/*box.css*/</span>
<span class="nc">.Box</span> <span class="p">{</span>
  <span class="nl">background</span><span class="p">:</span> <span class="no">black</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="no">white</span><span class="p">;</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">2rem</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//box.js</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styles</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./Box.module.css</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Box</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">Box</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">styles</span><span class="p">.</span><span class="nx">Box</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/div&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">Box</span><span class="p">;</span>
</code></pre></div></div>

<p>그럼 다른 css 파일에서 동일한 css className을 만들어야 된다는 부담감에 필요없이 만들 수 있다.</p>

<h2 id="css-in-js">CSS in JS</h2>

<blockquote>
  <p>마지막으로 CSS in JS에서 제일 유명한 styled components 를 보며 알아보자</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Box4.js</span>
<span class="k">import</span> <span class="nx">React</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Box</span><span class="p">({</span> <span class="nx">size</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">isBig</span> <span class="o">=</span> <span class="nx">size</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">big</span><span class="dl">"</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">label</span> <span class="o">=</span> <span class="nx">isBig</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">큰 박스</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">작은 박스</span><span class="dl">"</span><span class="p">;</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">BoxCommon</span> <span class="nx">isBig</span><span class="o">=</span><span class="p">{</span><span class="nx">isBig</span><span class="p">}</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/BoxCommon&gt;</span><span class="err">;
</span><span class="p">}</span>

<span class="kd">const</span> <span class="nx">BoxCommon</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">isBig</span> <span class="p">?</span> <span class="mi">200</span> <span class="p">:</span> <span class="mi">100</span><span class="p">)}</span><span class="s2">px;
  height: 50px;
  background-color: #aaaaaa;
`</span><span class="p">;</span>
</code></pre></div></div>

<p>다음과 같이 진행했던 CSS를 module 처럼 뺄 필요도 없이, 한 페이지에서 관리할 수 있다. 즉 CSS코드를 자바스크립트 파일안에서 하므로, 내부응집도가 올라가고, 동적으로 CSS를 변경하기도 쉽다.</p>

<p>출처</p>

<p><a href="https://latte-is-horse.tistory.com/38">https://latte-is-horse.tistory.com/38</a></p>

<p><a href="https://velog.io/@jch9537/CSS-SCSS-SASS">https://velog.io/@jch9537/CSS-SCSS-SASS</a></p>

<p><a href="https://nykim.work/15">https://nykim.work/15</a></p>

<p><a href="https://react.vlpt.us/styling/02-css-module.html">https://react.vlpt.us/styling/02-css-module.html</a></p>]]></content><author><name>071yoon</name></author><category term="CSS" /><category term="CSS" /><category term="SASS" /><category term="SCSS" /><category term="styled-components" /><category term="CSS-Moduler" /><summary type="html"><![CDATA[CSS 트렌드]]></summary></entry></feed>