<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-20T03:03:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">YeongGi’s tech blog</title><subtitle>This is YeongGi&apos;s tech blog. I post IT related items.</subtitle><author><name>071yoon</name></author><entry><title type="html">Cypress로 e2e 테스트 하기</title><link href="http://localhost:4000/react/2022/09/19/start-cypress.html" rel="alternate" type="text/html" title="Cypress로 e2e 테스트 하기" /><published>2022-09-19T00:00:00+09:00</published><updated>2022-09-19T00:00:00+09:00</updated><id>http://localhost:4000/react/2022/09/19/start-cypress</id><content type="html" xml:base="http://localhost:4000/react/2022/09/19/start-cypress.html"><![CDATA[<h2 id="cypress로-진행하는-e2e-테스트">Cypress로 진행하는 e2e 테스트</h2>

<blockquote>
  <p>환경: React, typescript, styled-components</p>
</blockquote>

<h2 id="테스트를-해야되는-이유">테스트를 해야되는 이유?</h2>

<hr />

<p>사실 테스트를 진행해야 되는이유는 정말 셀 수 없이 많다.</p>

<ul>
  <li>개발 과정에서 문제가 생겼을 때 바로 눈치 챌 수 있디</li>
  <li>리팩토링을 믿고 할 수 있다</li>
  <li>바로 코드의 동작 상태를 확인할 수 있다</li>
  <li>테스트 코드를 만들기 위해 코드를 하다보면 컴포넌트 분할 및 클린코드가 자연스럽게 이루어진다</li>
  <li>품질, 안전, 성능을 확인할 수 있다</li>
  <li>지속적인 운영을 보장한다</li>
  <li>위험을 완화할 수 있다</li>
  <li>등등..</li>
</ul>

<p>하지만 이러한 이유들을 포함하여 도입한 이유 중 큰 이유는 우리 프로젝트가 <code class="language-plaintext highlighter-rouge">Agile</code> 방법론을 따르고 있기 때문이다.</p>

<blockquote>
  <p>“애자일의 기술 실천 방법은 모든 애자일 활동 중 가장 핵심적인 요소다.
기술 실천 방법 없이 애자일을 도입하려는 시도는 실패할 수밖에 없다.”</p>
</blockquote>

<p>그리고 이러한 애자일의 실천방법 중 대표적인 방법이 바로 <code class="language-plaintext highlighter-rouge">TDD</code> Test Driven Development 이다. 하지만 아직 Test를 먼저 짜고 코드를 그에 맞춰 개발하는 레벨에는 도달하지 못하여 우선 e2e 테스트 코드를 짜는 연습부터 시작하기로 했다.</p>

<hr />

<h2 id="cypress-설치하기">Cypress 설치하기</h2>

<h3 id="dependency-설치">dependency 설치</h3>

<p>우선 cypress dependency 를 추가해준다</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">--save-dev</span> cypress
</code></pre></div></div>

<h4 id="styled-component-처리">Styled Component 처리</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add <span class="nt">--save-dev</span> react-remove-properties
</code></pre></div></div>

<p>테스트를 위해서 component에 <code class="language-plaintext highlighter-rouge">[data-cy=”new-component”]</code> 이런식으로 선언해주는데 빌드 과정에서 없애주는 dependency를 추가로 설치해준다. 그리고 babelrc에서 빌드하기 전에 처리하지 않는 작업도 포함해주자.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"env"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nl">"production"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"plugins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">[</span><span class="w">
        </span><span class="s2">"react-remove-properties"</span><span class="p">,</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"properties"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"data-cy"</span><span class="p">]</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="config-설정">config 설정</h3>

<p>그 다음 cypress가 원하는대로 작동할 수 있게 config설정을 마무리 해준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// cypress.config.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">defineConfig</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">cypress</span><span class="dl">"</span><span class="p">;</span>

<span class="kr">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">defineConfig</span><span class="p">({</span>
  <span class="na">e2e</span><span class="p">:</span> <span class="p">{</span>
    <span class="nx">setupNodeEvents</span><span class="p">(</span><span class="nx">on</span><span class="p">,</span> <span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// implement node event listeners here</span>
    <span class="p">},</span>
    <span class="na">baseUrl</span><span class="p">:</span> <span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">projectId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">ownProjectId</span><span class="dl">"</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>baseUrl같은 경우에는, 테스트할 서버의 주소가 되며, projectId는 추후에 cypress 앱과 연동하여 record 확인등을 할 시에 인증 용도로 사용된다.</p>

<p>그리고 cypress는 테스트 코드를 실행하다보면, 자연스럽게 스크린샷과 영상을 찍어서 로컬에 저장해두는데, 깃이 무거워지기 전에 ignore도 미리 해두자</p>

<pre><code class="language-gitignore"># ...

cypress/videos
cypress/screenshots
</code></pre>

<h3 id="폴더-구조">폴더 구조</h3>

<p>내가 사용하고 있는 Cypress 의 폴더 구조는 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>+--cypress
      +--e2e
      |   +--1-main-page
      |   |      +--login.cy.ts
      |   |      +--main.cy.ts
      |   |      +--register.cy.ts
      |   +--2-ready-page
      |          +--ready-modal.cy.ts
      |          +--ready.cy.ys
      +--fixtures
      |   +--allRooms.json
      |   +--loginResult.json
      |   +--profile.json
      +--support

</code></pre></div></div>

<p>e2e 폴더에 실제로 테스트할 코드들을 페이지별로 분리했고,
fixtures 폴더에는 추후에 사용할 모킹하였을 때 결과로 받을 json 형식들을 미리 만들어 두었다.</p>

<hr />

<h2 id="테스트-코드-작성하기">테스트 코드 작성하기</h2>

<p>간단하게 main page를 e2e 테스를 진행해보자. 테스트해볼 사안들은 다음과 같다.</p>

<ul>
  <li>타이틀이 렌더이 잘 되는지</li>
  <li>Header가 잘 렌더링 되었는지
    <ul>
      <li>로고</li>
      <li>로그인 버튼</li>
    </ul>
  </li>
  <li>Footer가 잘 렌더링 되었는지
    <ul>
      <li>Terms, Privacy Policy 버튼</li>
      <li>정보</li>
    </ul>
  </li>
  <li>랜딩 페이지가 잘 렌더링 되었는지</li>
  <li>방 정보API를 잘 호출하는지</li>
  <li>방 정보가 잘 렌더링 되었는지
    <ul>
      <li>방장 정보</li>
      <li>방의 제목</li>
      <li>방의 설명</li>
    </ul>
  </li>
</ul>

<p>그럼 천천히 진행해보도록 하자.</p>

<h3 id="describe">describe</h3>

<p>이 부분은 거의 모든 테스트코드 라이브러리들은 다 유사한 것 같다. describe 에서 내가 어떠한 컴포넌트 혹은 페이지를 검사할지 대주제를 정하고 it에서 개개인의 테스트들을 실제로 구현한다.</p>

<h4 id="beforeeach">beforeEach</h4>

<p>매번 it를 실행하기 전, 어떠한 역할을 수행할지 미리 정할 수 있다. 예를들어 모킹이 필요한 경우, 여기서 어떤 요청을 intercept해서 가져올지, it를 실행하기 전에, 어떤 페이지를 방문할지, viewport는 어떤 비율로 볼지 등 설정 할 수 있다.</p>

<h4 id="intercept">intercept</h4>

<p>여기서 가장 중요한 부분이다. Cypress는 e2e 테스트이기에 모든 방면에서 다 테스트를 진행하기에 BE에 API 요청은 당연히 일어난다. 하지만, 실제 BE에 API를 요청한다면 그건 완벽한 테스트가 될 수 없다.</p>

<blockquote>
  <p>CREATE 같은 경우 매번 BE에 요청하기에도 애매…</p>
</blockquote>

<p>그래서 요청을 보내기전에 method와 url 기준으로 intercept해서 어떠한 요청을 주거나 받을지 미리 설정할 수 있는 방법이다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cy</span><span class="p">.</span><span class="nx">intercept</span><span class="p">(</span>
  <span class="p">{</span> <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span> <span class="s2">`/api/v1/rooms`</span> <span class="p">},</span>
  <span class="p">{</span> <span class="na">fixture</span><span class="p">:</span> <span class="dl">"</span><span class="s2">allRooms.json</span><span class="dl">"</span> <span class="p">}</span>
<span class="p">);</span>
</code></pre></div></div>

<p>해석을 간단하게 해보자면, <code class="language-plaintext highlighter-rouge">GET</code>요청을 <code class="language-plaintext highlighter-rouge">/api/v1/rooms</code>에 요청하게 되면, 실제로 <code class="language-plaintext highlighter-rouge">GET</code>을 하지는 말고, fixtures 디렉토리에 저장해둔 <code class="language-plaintext highlighter-rouge">allRooms.json</code>을 가져오라는 뜻이다.</p>

<p>그렇게 완성된 beforeEach는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">beforeEach</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">intercept</span><span class="p">({</span> <span class="na">method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span> <span class="nx">API</span><span class="p">.</span><span class="nx">ROOM</span> <span class="p">},</span> <span class="p">{</span> <span class="na">fixture</span><span class="p">:</span> <span class="dl">"</span><span class="s2">allRooms.json</span><span class="dl">"</span> <span class="p">});</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">visit</span><span class="p">(</span><span class="dl">"</span><span class="s2">http://localhost:3000</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="mi">1536</span><span class="p">,</span> <span class="mi">960</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="it">it</h3>

<blockquote>
  <p>이제 실제로 테스트케이스들을 작성할 준비가 되었다!</p>
</blockquote>

<p>우선 cypress의 문법을 알아야된다. 정말 방대하지만, cypress.io에 정리가 잘 되어 있는지 천천히 읽어보면 좋을 것 같다.</p>

<blockquote>
  <p><a href="https://docs.cypress.io/api/table-of-contents">docs.cypress.io</a>로 바로가기</p>
</blockquote>

<p>간단한 문법들은 다음과 같다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">cy.get('')</code> 으로 원하는 컴포넌트를 선택 할 수 있다. 빈칸에는 class 혹은 id 등으로 검색이 가능하지만, cypress 의 best practice 는 data-cy 태그를 이용하여 unique한 컴포넌트를 가져오는 것이라 하며, 컴포넌트에 추가하여 손쉽게 적용시킬 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">.should()</code> 명령어로 방금 get()에서 가져온 컴포넌트가 어떠한 동작들을 해야하는지 선언 할 수 있다. 예를들어 <code class="language-plaintext highlighter-rouge">should('be.visible')</code> 이라면 선택된 컴포넌트가 보여야된다는 것이며, <code class="language-plaintext highlighter-rouge">should('have.text','word')</code> 라면, <code class="language-plaintext highlighter-rouge">word</code>라는 단어를 꼭 포함해야 된다는 뜻이다. 만약 찾는것이 실행되고 있는 비디오라면, 이런것도 가능하다.
    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="custom-video-screen"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span>
  <span class="dl">"</span><span class="s2">have.prop</span><span class="dl">"</span><span class="p">,</span>
  <span class="dl">"</span><span class="s2">paused</span><span class="dl">"</span><span class="p">,</span>
  <span class="kc">false</span>
<span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">cy.wait()</code> 를 이용하여 ms단위로 cypress 의 테스트를 멈춰 둘 수 있다. 영상으로 볼 때 워낙 빠르게 지나가기에, 한번씩 테스트 후에 <code class="language-plaintext highlighter-rouge">wait()</code>를 두어 눈으로 따라가는것도 괜찮았다.</li>
  <li><code class="language-plaintext highlighter-rouge">cy.and()</code> 앞선 명령어를 연계해서 사용할 수 있게 도와준다. 예로 이런것도 가능하다.
    <div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="dropbox-item"]</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">have.length</span><span class="dl">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">and</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain.text</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">fake_device_0</span><span class="dl">"</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</code></pre></div>    </div>
  </li>
</ol>

<blockquote>
  <p>간단한 예시코드는 다음과 같이 만들 수 있다!</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">render Main Props</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// check if title is visible</span>
  <span class="nx">cy</span><span class="p">.</span><span class="nx">title</span><span class="p">().</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">include</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">MODOCO</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// check if login button is visible and clickable</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="main-login-button"]</span><span class="dl">'</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">be.visible</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">have.text</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">로그인</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// check modoco logo</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="modoco-logo"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">modoco</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// check if all footer props are visible</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">[data-cy="main-footer"]</span><span class="dl">'</span><span class="p">).</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">be.visible</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">cy</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">button</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Terms</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">should</span><span class="p">(</span><span class="dl">"</span><span class="s2">contain</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Privacy Policy</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>완성된 테스트코드를 Cypress로 실행하면 다음과 같은 결과를 얻을 수 있다.</p>

<blockquote>
  <p>메인 페이지 테스트
<img src="https://user-images.githubusercontent.com/66371206/191083487-d63d6966-6867-47ca-abcd-b69d9e23e205.gif" alt="ezgif-4-1251ac46b2" /></p>
</blockquote>

<blockquote>
  <p>레디 페이지 테스트
<img src="https://user-images.githubusercontent.com/66371206/191083493-8de8438b-ff4d-4f69-a947-35ddafd58276.gif" alt="ezgif-4-350cc82de1" /></p>
</blockquote>

<hr />

<p>참고문서</p>

<p><a href="https://www.kiwa.com/kr/ko/services/testing/why-should-i-have-my-product-tested-or-evaluated/">https://www.kiwa.com/kr/ko/services/testing/why-should-i-have-my-product-tested-or-evaluated/</a>
<a href="https://tech.kakao.com/2021/11/08/test-code/">https://tech.kakao.com/2021/11/08/test-code/</a></p>]]></content><author><name>071yoon</name></author><category term="React" /><category term="React" /><category term="Testing" /><summary type="html"><![CDATA[Cypress로 진행하는 e2e 테스트]]></summary></entry><entry><title type="html">빌더 패턴</title><link href="http://localhost:4000/gof/2022/09/15/builder-pattern.html" rel="alternate" type="text/html" title="빌더 패턴" /><published>2022-09-15T00:00:00+09:00</published><updated>2022-09-15T00:00:00+09:00</updated><id>http://localhost:4000/gof/2022/09/15/builder-pattern</id><content type="html" xml:base="http://localhost:4000/gof/2022/09/15/builder-pattern.html"><![CDATA[<h2 id="java언어로-배우는-디자인-패턴-입문">Java언어로 배우는 디자인 패턴 입문</h2>

<h3 id="생성-패턴-creational-pattern">생성 패턴 Creational Pattern</h3>

<p>생성 패턴에서는 중요한 이슈가 두 가지가 존재한다.</p>

<ul>
  <li>생성 패턴은 시스템이 어떤 Concrete Class를 사용하는지에 대한 정보를 캡슐화한다.</li>
  <li>생성 패턴은 이들 클래스의 인스턴스들이 어떻게 만들고 어떻게 결합하는지에 대한 부분을 완전히 가려준다.</li>
</ul>

<blockquote>
  <p>생성 패턴을 이용하면 무엇이 생성되고, 누가 이것을 생성하며, 이것이 어떻게 생성되는지, 언제 생성할 것인지 결정하는 데 유연성을 확보할 수 있다.</p>
</blockquote>

<p>추후에 어떤식으로 구현할 수 있는지 알아보자.</p>

<h3 id="빌더-패턴의-등장인물">빌더 패턴의 등장인물</h3>

<p><img src="https://user-images.githubusercontent.com/66371206/190228103-b8b180e3-1fb3-4700-872c-5f263b0b6284.jpg" alt="Director 1" /></p>

<ul>
  <li>Builder
    <ul>
      <li>Instance 생성을 위한 API를 결정</li>
      <li>인스턴스의 각 부분을 만들기 위한 메소드 존재</li>
      <li>Builder Class</li>
    </ul>
  </li>
  <li>ConcreteBuilder
    <ul>
      <li>Build 역할의 API를 실제로 구현</li>
      <li>인스턴스 작성으로 호출되는 메소드가 정의</li>
      <li>최종적인 결과물을 얻기위한 메소드가 준비</li>
      <li>TextBuilder와 HTMLBuilder</li>
    </ul>
  </li>
  <li>Director
    <ul>
      <li>Builder 역할의 API를 사용하여 인스턴스 생성</li>
      <li>ConcreteBuilder에 의존하지 않음</li>
      <li>ConcreteBuilder에 상관하지 않고, Builder 역할의 메소드만 사용</li>
      <li>Director Class</li>
    </ul>
  </li>
  <li>Client
    <ul>
      <li>Builder패턴을 이용</li>
      <li>Main Class</li>
    </ul>
  </li>
</ul>

<p><img src="https://user-images.githubusercontent.com/66371206/190228118-4e62902f-cd49-40ad-b139-f66ac0eef2c0.jpg" alt="Director 2" /></p>

<h3 id="빌더-패턴-예시">빌더 패턴 예시</h3>

<p><code class="language-plaintext highlighter-rouge">문서</code>를 작성하는 프로그램</p>

<h4 id="구조">구조</h4>

<ul>
  <li>타이틀을 한 개 포함</li>
  <li>문자열을 몇 개 포함</li>
  <li>개별항목을 몇 개 포함</li>
  <li>TextBuilder : Plain Text를 사용하여 문서를 생성</li>
  <li>HTMLBuilder : HTML을 사용하여 문서를 생성</li>
</ul>

<p><img src="https://user-images.githubusercontent.com/66371206/190228122-f6accbb8-f15b-4575-b69a-0330d2853373.jpg" alt="Director 3" /></p>

<h4 id="builder-class">Builder Class</h4>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">문서</code>를 만들 메소드들을 선언하고 있는 추상클래스</p>
</blockquote>

<p>makeTitle, makeString, makeItems는 각각 타이틀, 문자열, 개별 항목을 문서 안에 구축하는 메소드</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Builder</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeString</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">makeItems</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">items</span><span class="o">);</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="director-class">Director Class</h4>

<blockquote>
  <p>Builder 클래스로 선언되어 있는 메소드를 사용하여 문서를 생성</p>
</blockquote>

<p>Director 클래스의 생성자는 Builder형이지만, 실제로 Builder 클래스의 인스턴스가 주어지지는 않는다.</p>

<blockquote>
  <p>Builder 클래스는 추상클래스이므로, 인스턴스 생성이 불가</p>
</blockquote>

<p>Director 클래스에서 실제로 전달되는것은 Builder 클래스의 하위 클래스의 인스턴스이다. Builder 클래스의 하위 클래스 종류에 따라 Director 클래스가 만들 문서의 형식이 정해진다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Director</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">Builder</span> <span class="n">builder</span><span class="o">;</span>
	<span class="kd">public</span> <span class="nf">Director</span><span class="o">(</span><span class="nc">Builder</span> <span class="n">builder</span><span class="o">){</span> <span class="c1">// Builder의 하위 클래스의 인스턴스이므로</span>
		<span class="k">this</span><span class="o">.</span><span class="na">builder</span> <span class="o">=</span> <span class="n">builder</span><span class="o">;</span> <span class="c1">// builder필드에 저장</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">construct</span><span class="o">()</span> <span class="o">{</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeTitle</span><span class="o">(</span><span class="err">'</span><span class="nc">Greeting</span><span class="err">'</span><span class="o">);</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeString</span><span class="o">(</span><span class="err">'</span><span class="n">아침과</span> <span class="n">낮에</span><span class="err">'</span><span class="o">);</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeItems</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span>
			<span class="err">'</span><span class="n">좋은</span> <span class="n">아침입니다</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
			<span class="err">'</span><span class="n">안녕하세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
		<span class="o">});</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeString</span><span class="o">(</span><span class="err">'</span><span class="n">밤에</span><span class="err">'</span><span class="o">);</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">makeItems</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span>
			<span class="err">'</span><span class="n">안녕하세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
			<span class="err">'</span><span class="n">안녕히</span> <span class="n">주무세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
			<span class="err">'</span><span class="n">안녕히</span> <span class="n">계세요</span><span class="o">.</span><span class="err">'</span><span class="o">,</span>
		<span class="o">});</span>
		<span class="n">builder</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">//문서를 완성</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="textbuilder-class">TextBuilder Class</h4>

<blockquote>
  <p>Builder Class의 하위 Class</p>
</blockquote>

<p>일반 텍스트를 사용하여 문서를 구축하고, String으로 봔한</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TextBuilder</span> <span class="kd">extends</span> <span class="nc">Builder</span> <span class="o">{</span>
	<span class="kd">private</span> <span class="nc">StringBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuffer</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">){</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">'</span><span class="o">======================</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'['</span> <span class="o">+</span> <span class="err">'</span><span class="n">title</span><span class="err">'</span> <span class="o">+</span> <span class="err">'</span><span class="o">]</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeString</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">){</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'ㅁ'</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="err">'</span><span class="n">ㅁ</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeItems</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">items</span><span class="o">){</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
			<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">'</span> <span class="o">-</span><span class="err">'</span> <span class="o">+</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="sc">'\n'</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">'\n'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">(){</span>
		<span class="n">buffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="err">'</span><span class="o">======================</span><span class="err">\</span><span class="n">n</span><span class="err">'</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getResult</span><span class="o">(){</span>
		<span class="k">return</span> <span class="n">buffer</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="htmlbuilder-class">HTMLBuilder Class</h4>

<blockquote>
  <p>Builder Class의 하위 Class</p>
</blockquote>

<p>HTML 파일로 문서를 구축</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HTMLBuilder</span> <span class="kd">extends</span> <span class="nc">Builder</span><span class="o">{</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">filename</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">PrintWriter</span> <span class="n">writer</span><span class="o">;</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeTitle</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">){</span>
		<span class="n">filename</span> <span class="o">=</span> <span class="n">title</span> <span class="o">+</span> <span class="err">'</span><span class="o">.</span><span class="na">html</span><span class="err">'</span><span class="o">;</span>
		<span class="k">try</span> <span class="o">{</span>
			<span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWrite</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileWriter</span><span class="o">(</span><span class="n">filename</span><span class="o">));</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
		<span class="o">}</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;html&gt;&lt;head&gt;&lt;title&gt;"</span> <span class="o">+</span> <span class="n">title</span> <span class="o">+</span> <span class="s">"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"</span><span class="o">);</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;h1&gt;"</span> <span class="o">+</span> <span class="n">title</span> <span class="o">+</span> <span class="s">"&lt;/h1&gt;"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeString</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">){</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;p&gt;"</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="s">"&lt;/p&gt;"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeItems</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">items</span><span class="o">){</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;ul&gt;"</span><span class="o">);</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">items</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
			<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;li&gt;"</span> <span class="o">+</span> <span class="n">items</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">"&lt;/li&gt;"</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/ul&gt;"</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">(){</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"&lt;/body&gt;&lt;/html&gt;"</span><span class="o">);</span>
		<span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">getResult</span><span class="o">(){</span>
		<span class="k">return</span> <span class="n">filename</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="main-class">Main Class</h4>

<blockquote>
  <p>실제로 실행하는 Builder 패턴의 테스트 프로그램</p>
</blockquote>

<p>TextBuilder와 HTMLBuilder는 Builder의 하위클래스이며, Director는 Builder의 메소드만을 사용하여 문서를 작성한다. Builder의 메소드만을 사용한다는 뜻은 Director는 실제로 동작하는것이 TextBuilder인지, HTMLBuilder인지 알 수 없다는 뜻. 즉 Builder는 문서를 구축하기 위해, 필요 충분한 메소드군을 선언할 필요가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span><span class="o">{</span>
	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
		<span class="k">if</span><span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">1</span><span class="o">){</span>
			<span class="n">usage</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="err">'</span><span class="n">plain</span><span class="err">'</span><span class="o">)){</span>
			<span class="nc">TextBuilder</span> <span class="n">textbuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TextBuilder</span><span class="o">();</span>
			<span class="nc">Director</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Director</span><span class="o">(</span><span class="n">textbuilder</span><span class="o">);</span>
			<span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
			<span class="nc">String</span> <span class="n">result</span> <span class="o">=</span> <span class="n">textbuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="err">'</span><span class="n">html</span><span class="err">'</span><span class="o">))</span> <span class="o">{</span>
			<span class="nc">HTMLBuilder</span> <span class="n">htmlbuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HTMLBuilder</span><span class="o">();</span>
			<span class="nc">Director</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Director</span><span class="o">(</span><span class="n">htmlbuilder</span><span class="o">);</span>
			<span class="n">director</span><span class="o">.</span><span class="na">construct</span><span class="o">();</span>
			<span class="nc">String</span> <span class="n">filename</span> <span class="o">=</span> <span class="n">htmlbuilder</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">filename</span> <span class="o">+</span> <span class="err">'</span><span class="n">가</span> <span class="n">생성되었습니다</span><span class="o">.</span><span class="err">'</span><span class="o">);</span>
		<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
			<span class="n">usage</span><span class="o">();</span>
			<span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">usage</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">'</span><span class="nl">Usage:</span> <span class="n">java</span> <span class="nc">Main</span> <span class="n">plain</span> <span class="n">일반</span> <span class="n">텍스트로</span> <span class="n">문서작성</span><span class="err">'</span><span class="o">);</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="err">'</span><span class="nl">Usage:</span> <span class="n">java</span> <span class="nc">Main</span> <span class="n">html</span> <span class="no">HTML</span> <span class="n">파일로</span> <span class="n">문서작성</span><span class="err">'</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>일반 텍스트 실행결과
<img src="https://user-images.githubusercontent.com/66371206/190231034-16e7b3c7-9880-45b8-8b40-6d4914133567.png" width="400px" /></p>
</blockquote>

<blockquote>
  <p>HTML 파일 실행결과
<img src="https://user-images.githubusercontent.com/66371206/190230554-99d4ada5-afa7-4781-9fad-7d2b7b5362a7.png" width="400px" /></p>
</blockquote>

<blockquote>
  <p>HTMLBuidler가 작성한 Greeting.html의 브라우저 결과
<img src="https://user-images.githubusercontent.com/66371206/190230484-11188473-993c-415e-a887-f311cf88f5b8.png" width="400px" /></p>
</blockquote>

<h3 id="누가-무엇을">누가 무엇을?</h3>

<ul>
  <li>Main Class는 Builder Class의 메소드를 모른다 (호출하지 않음)</li>
  <li>Main Class는 Director Class의 construct만 호출한다</li>
  <li>Director Class는 Builder Class를 알고있다</li>
  <li>Director Class는 실제로 이용하고 있는 클래스가 무엇인지 알 수 없다
    <ul>
      <li>HTMLBuilder인지 TextBuilder인지 알 수 없음</li>
      <li>Director Class는 Builder Class의 메소드만 사용</li>
      <li>Builder Class의 하위 클래스는 메소드를 구현</li>
    </ul>
  </li>
  <li>Director Class가 Builder Class의 하위 클래스를 모르기 때문에, 교체할 수 있다
    <ul>
      <li>모르기 때문에 교환이 가능하며, 교체가 가능하기 때문에 부품의 가치가 높다</li>
    </ul>
  </li>
</ul>

<h2 id="더-알아보기">더 알아보기</h2>

<blockquote>
  <p>엥 이거 완전 팩토리 패턴이랑 비슷한거 아니야?</p>
</blockquote>

<h3 id="여행-예제로-알아보기">여행 예제로 알아보기</h3>

<ul>
  <li>
    <p>클라이언트 프로그램으로부터 팩토리 클래스로 많은 파라미터를 넘겨줄 때 타입, 순서 등에 대한 관리가 어려워져 에러가 발생할 확률이 높아진다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">TourPlan</span><span class="o">(</span><span class="s">"여행 계획"</span><span class="o">,</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2021</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span> <span class="mi">24</span><span class="o">),</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="s">"호텔"</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="k">new</span> <span class="nc">DetailPlan</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"체크인"</span><span class="o">)));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>경우에 따라 필요 없는 파라미터들에 대해서 팩토리 클래스에 일일이 null 값을 넘겨줘야 한다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">new</span> <span class="nc">TourPlan</span><span class="o">(</span><span class="s">"여행 계획"</span><span class="o">,</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2021</span><span class="o">,</span><span class="mi">12</span><span class="o">,</span> <span class="mi">24</span><span class="o">),</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="k">new</span> <span class="nc">DetailPlan</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="s">"놀고 돌아오기"</span><span class="o">)));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>생성해야 하는 sub class가 무거워지고 복잡해짐에 따라 팩토리 클래스 또한 복잡해진다.</p>
  </li>
</ul>

<h4 id="builder-class-1">Builder Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">TourPlanBuilder</span> <span class="o">{</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">nightsAndDays</span><span class="o">(</span><span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">days</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">title</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">startDate</span><span class="o">(</span><span class="nc">LocalDate</span> <span class="n">localDate</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">whereToStay</span><span class="o">(</span><span class="nc">String</span> <span class="n">whereToStay</span><span class="o">);</span>
    <span class="nc">TourPlanBuilder</span> <span class="nf">addPlan</span><span class="o">(</span><span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="nc">String</span> <span class="n">plan</span><span class="o">);</span>
    <span class="nc">TourPlan</span> <span class="nf">getPlan</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="concrete-builder">Concrete Builder</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DefaultTourBuilder</span> <span class="kd">implements</span> <span class="nc">TourPlanBuilder</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">nights</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">days</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">LocalDate</span> <span class="n">startDate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">whereToStay</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">DetailPlan</span><span class="o">&gt;</span> <span class="n">plans</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">nightsAndDays</span><span class="o">(</span><span class="kt">int</span> <span class="n">nights</span><span class="o">,</span> <span class="kt">int</span> <span class="n">days</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">nights</span> <span class="o">=</span> <span class="n">nights</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">days</span> <span class="o">=</span> <span class="n">days</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
	<span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">title</span><span class="o">(</span><span class="nc">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">startDate</span><span class="o">(</span><span class="nc">LocalDate</span> <span class="n">startDate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">startDate</span> <span class="o">=</span> <span class="n">startDate</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">whereToStay</span><span class="o">(</span><span class="nc">String</span> <span class="n">whereToStay</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">whereToStay</span> <span class="o">=</span> <span class="n">whereToStay</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlanBuilder</span> <span class="nf">addPlan</span><span class="o">(</span><span class="kt">int</span> <span class="n">day</span><span class="o">,</span> <span class="nc">String</span> <span class="n">plan</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">plans</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">plans</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="o">}</span>

        <span class="k">this</span><span class="o">.</span><span class="na">plans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">DetailPlan</span><span class="o">(</span><span class="n">day</span><span class="o">,</span> <span class="n">plan</span><span class="o">));</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">TourPlan</span> <span class="nf">getPlan</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">TourPlan</span><span class="o">(</span><span class="n">title</span><span class="o">,</span> <span class="n">startDate</span><span class="o">,</span> <span class="n">days</span><span class="o">,</span> <span class="n">nights</span><span class="o">,</span> <span class="n">whereToStay</span><span class="o">,</span> <span class="n">plans</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="director-class-1">Director Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TourDirector</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">TourPlanBuilder</span> <span class="n">tourPlanBuilder</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">TourDirector</span><span class="o">(</span><span class="nc">TourPlanBuilder</span> <span class="n">tourPlanBuilder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tourPlanBuilder</span> <span class="o">=</span> <span class="n">tourPlanBuilder</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TourPlan</span> <span class="nf">cancunTrip</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tourPlanBuilder</span><span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"칸쿤 여행"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">nightsAndDays</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">)</span>
                <span class="o">.</span><span class="na">startDate</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2020</span><span class="o">,</span> <span class="mi">12</span><span class="o">,</span> <span class="mi">9</span><span class="o">))</span>
                <span class="o">.</span><span class="na">whereToStay</span><span class="o">(</span><span class="s">"리조트"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">addPlan</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"체크인하고 짐 풀기"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">addPlan</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="s">"저녁 식사"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getPlan</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">TourPlan</span> <span class="nf">longBeachTrip</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">tourPlanBuilder</span><span class="o">.</span><span class="na">title</span><span class="o">(</span><span class="s">"롱비치"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">startDate</span><span class="o">(</span><span class="nc">LocalDate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2021</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">15</span><span class="o">))</span>
                <span class="o">.</span><span class="na">getPlan</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="main-class-1">Main Class</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">DefaultTourBuilder</span> <span class="n">defaultbuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTourBuilder</span><span class="o">();</span>
    <span class="nc">TourDirector</span> <span class="n">director</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TourDirector</span><span class="o">(</span><span class="n">defaultbuilder</span><span class="o">);</span>
    <span class="nc">TourPlan</span> <span class="n">tourPlan</span> <span class="o">=</span> <span class="n">director</span><span class="o">.</span><span class="na">cancunTrip</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>setter가 없으므로 객체 일관성을 유지하여 불변 객체로 생성할 수 있다.</p>
</blockquote>

<h3 id="when-not-to-use">When not to use</h3>

<blockquote>
  <p>객체를 생성하는 대부분의 경우에는 빌더 패턴을 적용하는 것이 좋다.</p>
</blockquote>

<p>예외적으로 2가지 상황에서는 빌더를 구현해야될지 고려하면 좋다.</p>

<ol>
  <li>
    <p>객체의 생성을 라이브러리로 위임하는 경우</p>

    <ul>
      <li>엔티티(Entity) 객체나 도메인(Domain) 객체로부터 DTO를 생성하는 경우라면 직접 빌더를 만들고 하는 작업이 번거로우므로 MapStruct나 Model Mapper와 같은 라이브러리를 통해 생성을 위임할 수 있다.</li>
    </ul>
  </li>
  <li>
    <p>변수의 개수가 2개 이하이며, 변경 가능성이 없는 경우</p>
    <ul>
      <li>또한 변수가 늘어날 가능성이 거의 없으며, 변수의 개수가 2개 이하인 경우에는 정적 팩토리 메소드를 사용하는 것이 더 좋을 수도 있다.</li>
      <li>빌더의 남용은 오히려 코드를 비대하게 만들 수 있으므로  변수의 개수와 변경 가능성 등을 중점적으로 보고 빌더 패턴을 적용할지 판단하면 된다.</li>
    </ul>
  </li>
</ol>

<h3 id="참고">참고</h3>

<p><a href="https://readystory.tistory.com/121">참고링크1</a>
<a href="https://dev-youngjun.tistory.com/197">참고링크2</a>
<a href="https://mangkyu.tistory.com/163">참고링크3</a></p>]]></content><author><name>071yoon</name></author><category term="GoF" /><category term="GoF" /><category term="TIL" /><summary type="html"><![CDATA[Java언어로 배우는 디자인 패턴 입문]]></summary></entry><entry><title type="html">리액트 테스팅하기</title><link href="http://localhost:4000/react/2022/09/09/react-test.html" rel="alternate" type="text/html" title="리액트 테스팅하기" /><published>2022-09-09T00:00:00+09:00</published><updated>2022-09-09T00:00:00+09:00</updated><id>http://localhost:4000/react/2022/09/09/react-test</id><content type="html" xml:base="http://localhost:4000/react/2022/09/09/react-test.html"><![CDATA[<h2 id="jest와-react-testing-library를-사용하여-테스트를-해보자">Jest와 React-Testing-Library를 사용하여 테스트를 해보자</h2>

<p>이번에는 모킹 없이 간단하게 DOM관련 테스트만 진행할 예정이다. 모킹 관련은 다음 포스트에서 다룰 예정.</p>

<p>여러 테스트 예시들을 보면, 한 <code class="language-plaintext highlighter-rouge">jest.it</code> 함수 에서 render를 여러번 하는것을 손쉽게 볼 수 있다. 그렇게 나도 유사하게 해보며 익혀보았다.</p>

<h2 id="간단한-사용법-익히기">간단한 사용법 익히기</h2>

<h3 id="describe">describe</h3>

<p>describe에서 내가 어떠한 component를 할지 먼저 알려준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;MyPageForm /&gt;</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div></div>

<h3 id="it">it</h3>

<p>it에서 어떠한 동작들을 테스트할 지 선언하여 알려줄 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">matches snapshot</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{});</span>
</code></pre></div></div>

<h3 id="render">render</h3>

<p>그리고 어떤 컴포넌트를 render할지 it안에 선언을 해준다. 해당 render는 react testing library의 기능이다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
  <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<blockquote>
  <p>ESLint에서 useNavigate를 사용하는 component인 경우 BrowseNavigate 컴포넌트 안에 선언해야 하기에 BrowserRouter as Router로 감싸주었다</p>
</blockquote>

<h3 id="expect">expect</h3>

<p>실제로 방금 선언한 render인 <code class="language-plaintext highlighter-rouge">utils</code>에 어떠한 동작들이 수행되어야 하는지 정의 할 수 있다.</p>

<p>이번 <code class="language-plaintext highlighter-rouge">it</code>는 단순히 이러한 <code class="language-plaintext highlighter-rouge">utils.container</code> 가 snapshot에 매칭 되는지 확인하는 요소이기에 간단하게 <code class="language-plaintext highlighter-rouge">toMatchSnapshot</code>함수를 사용하여 확인할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">expect</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">container</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
</code></pre></div></div>

<p>최종적으로 구현된 간단한 형태는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;MyPageForm /&gt;</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">matches snapshot</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">container</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>그리고 다음 it에서 원하는 텍스트가 존재한느지 있는지 확인하려면 다음과 같이 추가할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">"</span><span class="s2">&lt;MyPageForm /&gt;</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">matches snapshot</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
    <span class="nx">expect</span><span class="p">(</span><span class="nx">utils</span><span class="p">.</span><span class="nx">container</span><span class="p">).</span><span class="nx">toMatchSnapshot</span><span class="p">();</span>
  <span class="p">});</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">has a texts</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">utils</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
      <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">MyPageForm</span> <span class="o">/&gt;</span><span class="p">,</span>
      <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>    <span class="p">);</span>
    <span class="c1">// MyPage에 있는지 확인</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">아바타 재생성</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">프로필 이미지</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">프로필 수정</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">utils</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">수정 완료</span><span class="dl">"</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이런 테스트 코드는 동작하는데에는 문제가 없어 보이지만, 실제로 테스트 코드가 길어지거나, 다양한 동작을 할 때에 문제가 생길 수 있다. 즉 리액트에서 컴포넌트 분할을 하듯이, 테스트 코드 또한 컴포넌트로 쪼개고 재사용할 수 있어야 된다.</p>

<blockquote>
  <p>여기서도 utils를 재사용하는것을 보아 그렇게 좋지않음을 알 수 있다.</p>
</blockquote>

<h2 id="컴포넌트-단위로-쪼개기">컴포넌트 단위로 쪼개기</h2>

<p>조금 더 복잡한 SignUp 페이지를 가지고 테스트를 해보겠다.</p>

<h3 id="기능-빼내기">기능 빼내기</h3>

<p>우선 재사용할 수 있는 기능들을 <code class="language-plaintext highlighter-rouge">describe</code>가 아닌 <code class="language-plaintext highlighter-rouge">function</code>에 빼두자.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">renderSignUp</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// mocking submit button -&gt; not used</span>
  <span class="kd">const</span> <span class="nx">onSubmit</span> <span class="o">=</span> <span class="nx">jest</span><span class="p">.</span><span class="nx">fn</span><span class="p">();</span>

  <span class="c1">// render SignUpForm</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">render</span><span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Router</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SignUpForm</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="sr">/Router</span><span class="err">&gt;
</span>  <span class="p">);</span>

  <span class="c1">// get blocks</span>
  <span class="kd">const</span> <span class="nx">Heading</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">회원가입</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">selector</span><span class="p">:</span> <span class="dl">"</span><span class="s2">h1</span><span class="dl">"</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">Nickname</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span><span class="dl">"</span><span class="s2">닉네임을 입력해주세요.</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">Email</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span><span class="dl">"</span><span class="s2">이메일을 입력해주세요.</span><span class="dl">"</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">FirstPassword</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span>
      <span class="dl">"</span><span class="s2">8~16자 영문 대 소문자, 숫자, 특수문자를 사용하세요.</span><span class="dl">"</span>
    <span class="p">);</span>
  <span class="kd">const</span> <span class="nx">SecondPassword</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">getByPlaceholderText</span><span class="p">(</span><span class="dl">"</span><span class="s2">비밀번호를 다시 입력해주세요.</span><span class="dl">"</span><span class="p">);</span>

  <span class="c1">// make events for blocks</span>
  <span class="kd">const</span> <span class="nx">typeNickname</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">Nickname</span><span class="p">(),</span> <span class="nx">name</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">typeEmail</span> <span class="o">=</span> <span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">Email</span><span class="p">(),</span> <span class="nx">name</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">typeFirstPassword</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pass</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">FirstPassword</span><span class="p">(),</span> <span class="nx">pass</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">typeSecondPassword</span> <span class="o">=</span> <span class="p">(</span><span class="nx">pass</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="kd">type</span><span class="p">(</span><span class="nx">SecondPassword</span><span class="p">(),</span> <span class="nx">pass</span><span class="p">);</span>
  <span class="p">};</span>
  <span class="kd">const</span> <span class="nx">SignUpButton</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">getByText</span><span class="p">(</span><span class="dl">"</span><span class="s2">회원가입</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> <span class="na">selector</span><span class="p">:</span> <span class="dl">"</span><span class="s2">button</span><span class="dl">"</span> <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">clickSubmit</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">userEvent</span><span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="nx">SignUpButton</span><span class="p">());</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">{</span>
    <span class="nx">result</span><span class="p">,</span>
    <span class="nx">Heading</span><span class="p">,</span>
    <span class="nx">Nickname</span><span class="p">,</span>
    <span class="nx">Email</span><span class="p">,</span>
    <span class="nx">FirstPassword</span><span class="p">,</span>
    <span class="nx">SecondPassword</span><span class="p">,</span>
    <span class="nx">typeNickname</span><span class="p">,</span>
    <span class="nx">typeEmail</span><span class="p">,</span>
    <span class="nx">typeFirstPassword</span><span class="p">,</span>
    <span class="nx">typeSecondPassword</span><span class="p">,</span>
    <span class="nx">SignUpButton</span><span class="p">,</span>
    <span class="nx">clickSubmit</span><span class="p">,</span>
    <span class="nx">onSubmit</span><span class="p">,</span>
  <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이런식으로 테스트할 함수들을 분리하여, 추후에 손쉽게 필요한 함수들을 선언하여 관리도 용이하며, 재사용도 쉽게 설정할 수 있다.</p>

<p>userEvent의 옵션으로는 다음과 같이 정리되어 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">declare</span> <span class="kd">const</span> <span class="nx">userEvent</span><span class="p">:</span> <span class="p">{</span>
  <span class="nl">click</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">click</span><span class="p">;</span>
  <span class="nl">dblClick</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">dblClick</span><span class="p">;</span>
  <span class="nl">type</span><span class="p">:</span> <span class="k">typeof</span> <span class="kd">type</span><span class="p">;</span>
  <span class="nl">clear</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">clear</span><span class="p">;</span>
  <span class="nl">tab</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">tab</span><span class="p">;</span>
  <span class="nl">hover</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">hover</span><span class="p">;</span>
  <span class="nl">unhover</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">unhover</span><span class="p">;</span>
  <span class="nl">upload</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">upload</span><span class="p">;</span>
  <span class="nl">selectOptions</span><span class="p">:</span> <span class="p">(</span>
    <span class="nx">args_0</span><span class="p">:</span> <span class="nx">Element</span><span class="p">,</span>
    <span class="nx">args_1</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">string</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HTMLElement</span> <span class="o">|</span> <span class="nx">HTMLElement</span><span class="p">[],</span>
    <span class="nx">args_2</span><span class="p">?:</span> <span class="nx">MouseEventInit</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">,</span>
    <span class="nx">args_3</span><span class="p">?:</span> <span class="k">import</span><span class="p">(</span><span class="dl">"</span><span class="s2">./utils</span><span class="dl">"</span><span class="p">).</span><span class="nx">PointerOptions</span> <span class="o">|</span> <span class="kc">undefined</span>
  <span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
  <span class="nl">deselectOptions</span><span class="p">:</span> <span class="p">(</span>
    <span class="nx">args_0</span><span class="p">:</span> <span class="nx">Element</span><span class="p">,</span>
    <span class="nx">args_1</span><span class="p">:</span> <span class="kr">string</span> <span class="o">|</span> <span class="kr">string</span><span class="p">[]</span> <span class="o">|</span> <span class="nx">HTMLElement</span> <span class="o">|</span> <span class="nx">HTMLElement</span><span class="p">[],</span>
    <span class="nx">args_2</span><span class="p">?:</span> <span class="nx">MouseEventInit</span> <span class="o">|</span> <span class="kc">undefined</span><span class="p">,</span>
    <span class="nx">args_3</span><span class="p">?:</span> <span class="k">import</span><span class="p">(</span><span class="dl">"</span><span class="s2">./utils</span><span class="dl">"</span><span class="p">).</span><span class="nx">PointerOptions</span> <span class="o">|</span> <span class="kc">undefined</span>
  <span class="p">)</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
  <span class="nl">paste</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">paste</span><span class="p">;</span>
  <span class="nl">keyboard</span><span class="p">:</span> <span class="k">typeof</span> <span class="nx">keyboard</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>

<p>render같은 경우 너무나 방대하여, 그때 그때 필요한 쿼리를 선택하여 찾을 수 있다. 대충 보아하니, query, parameter, role, text 등 정말 원하는 정보를 다 찾을 수 있을 것 같다.</p>

<h3 id="렌더링-확인">렌더링 확인</h3>

<p>아까 위에서 했던것 처럼 원하는 버튼 혹은 컴포넌트가 존재하는지 조금 더 직관적으로 위에서 선언한 함수들을 가지고 구현할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">sign up form rendering</span><span class="dl">"</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="nx">Heading</span><span class="p">,</span>
    <span class="nx">Nickname</span><span class="p">,</span>
    <span class="nx">Email</span><span class="p">,</span>
    <span class="nx">FirstPassword</span><span class="p">,</span>
    <span class="nx">SecondPassword</span><span class="p">,</span>
    <span class="nx">SignUpButton</span><span class="p">,</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">renderSignUp</span><span class="p">();</span>

  <span class="c1">// check if blocks are rendered</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Email</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Nickname</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Heading</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">FirstPassword</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">SecondPassword</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">SignUpButton</span><span class="p">()).</span><span class="nx">toBeInTheDocument</span><span class="p">();</span>
<span class="p">});</span>
</code></pre></div></div>

<p>이렇게 함으로써, 짧고 보다 확실하게 어떠한 요소들이 있어야 되는지 확인할 수 있는 테스트 코드가 완성되었다.</p>

<h3 id="동작확인">동작확인</h3>

<p>아무래도 이번에 테스트 하는 컴포넌트가 SignUp이다 보니, 동적인 동작들이 이루어져야한다. 예를들어, 내가 Nickname을 친다던가, password를 타이핑 하는 요소들이 들어갈 수 있다. 앞서 이용한 <code class="language-plaintext highlighter-rouge">type*(string)</code> 함수를 이용하여, 간단하게 구현이 가능하다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">it</span><span class="p">(</span><span class="dl">"</span><span class="s2">form 값으로 onSubmit을 호출.</span><span class="dl">"</span><span class="p">,</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span>
    <span class="nx">Email</span><span class="p">,</span>
    <span class="nx">Nickname</span><span class="p">,</span>
    <span class="nx">FirstPassword</span><span class="p">,</span>
    <span class="nx">SecondPassword</span><span class="p">,</span>
    <span class="nx">typeNickname</span><span class="p">,</span>
    <span class="nx">typeEmail</span><span class="p">,</span>
    <span class="nx">typeFirstPassword</span><span class="p">,</span>
    <span class="nx">typeSecondPassword</span><span class="p">,</span>
    <span class="nx">clickSubmit</span><span class="p">,</span>
  <span class="p">}</span> <span class="o">=</span> <span class="nx">renderSignUp</span><span class="p">();</span>

  <span class="c1">// make events for blocks</span>
  <span class="nx">typeNickname</span><span class="p">(</span><span class="dl">"</span><span class="s2">영기</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">typeEmail</span><span class="p">(</span><span class="dl">"</span><span class="s2">yeonggi@mail.com</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">typeFirstPassword</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">typeSecondPassword</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">clickSubmit</span><span class="p">();</span>

  <span class="c1">// check if events are working</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Email</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">yeonggi@mail.com</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">Nickname</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">영기</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">FirstPassword</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
  <span class="nx">expect</span><span class="p">(</span><span class="nx">SecondPassword</span><span class="p">()).</span><span class="nx">toContainHTML</span><span class="p">(</span><span class="dl">"</span><span class="s2">somatest0909!</span><span class="dl">"</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>여기에서 <code class="language-plaintext highlighter-rouge">clickSubmit()</code>함수를 앞서 <code class="language-plaintext highlighter-rouge">jest.fn()</code>라는 콜백 함수로 불러왔었는데, 이 부분은 추후에 모킹을 하면서 제대로 이용할 예정이다. 모킹할 곳을 만들어 두고, submit을 하였을때 어떠한 json 타입이 오는지 <code class="language-plaintext highlighter-rouge">expect</code>해서 찾아 낼 예정이다.</p>

<p>무사히 테스트 코드를 작성 후 돌려보면, 이렇게 테스트 결과가 통과했다고 나오게 된다.
<img width="622" alt="스크린샷 2022-09-13 오후 2 49 55" src="https://user-images.githubusercontent.com/66371206/189819890-a8ea5e99-693a-4801-ac22-c01e233637f1.png" /></p>

<p>참고 : <a href="https://javascript.plainenglish.io/declarative-and-scalable-testing-with-react-testing-library-177f35f41396">확장가능한 테스트</a></p>]]></content><author><name>071yoon</name></author><category term="react" /><category term="javascript" /><category term="react" /><summary type="html"><![CDATA[Jest와 React-Testing-Library를 사용하여 테스트를 해보자]]></summary></entry><entry><title type="html">오디오 비주얼라이저 만들기</title><link href="http://localhost:4000/modoco/2022/09/07/audio-visualizer.html" rel="alternate" type="text/html" title="오디오 비주얼라이저 만들기" /><published>2022-09-07T00:00:00+09:00</published><updated>2022-09-07T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/07/audio-visualizer</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/07/audio-visualizer.html"><![CDATA[<h2 id="개요">개요</h2>

<p>현재 진행중인 웹 플랫폼에서는 실시간 통신, 즉 음성 및 비디오가 필수적으로 들어가며, 오디오가 잘 나오는지 확인할 수 있는 오디오 비주얼라이저 또한 필수적으로 들어가게 되었다.</p>

<p>처음에 이걸 구현하기에는 다소 어려움이 있었는데, 우선 reference도 많이 없어 힘들었고, 막상 찾았더니 outdated 버전도 많이 있었다.</p>

<blockquote>
  <p>결국 mdn 문서를 뜯어가며 익혔다..</p>
</blockquote>

<h2 id="나만의-오디오-비주얼라이저-만들기">나만의 오디오 비주얼라이저 만들기</h2>

<p>우선 개발하기 앞서, 디자인 시안이 나온 모습은 다음과 같았다.</p>

<p><img width="593" alt="스크린샷 2022-09-13 오후 3 14 00" src="https://user-images.githubusercontent.com/66371206/189823880-d641cc67-7171-4775-a4bc-d7f880a562d3.png" /></p>

<p>마이크를 확인하며, 볼륨이 높을수록 초록색이 올라가는 모습… 직관적이고 보기 좋다!</p>

<h3 id="audiocontext">audioContext</h3>

<p>우선 오디오 비주얼라이저를 구현하기 위해서는 audioContext라는 객체에 대한 이해가 필요하다. 쉽게 말하자면, 오디오 볼률 및 frequency같은 것을 조절해주는 분석기라 볼 수 있다. 나의 audioContext generator는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">audioContext</span> <span class="o">=</span> <span class="p">(</span><span class="nx">stream</span><span class="p">:</span> <span class="nx">MediaStream</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">audioContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">AudioContext</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">analyser</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">.</span><span class="nx">createAnalyser</span><span class="p">();</span>
  <span class="kd">const</span> <span class="nx">microphone</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">.</span><span class="nx">createMediaStreamSource</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
  <span class="nx">microphone</span><span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="nx">analyser</span><span class="p">);</span>
  <span class="nx">analyser</span><span class="p">.</span><span class="nx">fftSize</span> <span class="o">=</span> <span class="mi">256</span><span class="p">;</span> <span class="c1">// 256 ~ 2048</span>
  <span class="kd">const</span> <span class="nx">bufferLength</span> <span class="o">=</span> <span class="nx">analyser</span><span class="p">.</span><span class="nx">frequencyBinCount</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">dataArray</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Uint8Array</span><span class="p">(</span><span class="nx">bufferLength</span><span class="p">);</span>
  <span class="k">return</span> <span class="p">{</span> <span class="nx">analyser</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">,</span> <span class="nx">dataArray</span> <span class="p">};</span>
<span class="p">};</span>
<span class="k">export</span> <span class="k">default</span> <span class="nx">audioContext</span><span class="p">;</span>
</code></pre></div></div>

<p>여기서 인자로 받는 stream은 내가 분석할 오디오 stream이다.
순서를 보면</p>

<ol>
  <li>새로운 <code class="language-plaintext highlighter-rouge">audioContext</code>를 만든다</li>
  <li>해당 <code class="language-plaintext highlighter-rouge">audioContext</code>의 <code class="language-plaintext highlighter-rouge">analyser</code>(분석기)를 만든다</li>
  <li>나의 stream을 source로 하는 <code class="language-plaintext highlighter-rouge">audioContext</code>, 이하 <code class="language-plaintext highlighter-rouge">microphone</code>을 생성한다</li>
  <li>해당하는 <code class="language-plaintext highlighter-rouge">microphone</code>과 미리 만둘어둔 <code class="language-plaintext highlighter-rouge">analyser</code>를 연동시킨다.</li>
  <li><code class="language-plaintext highlighter-rouge">analyser</code>의 <code class="language-plaintext highlighter-rouge">fftSize</code>를 제어한다.</li>
  <li>나의 <code class="language-plaintext highlighter-rouge">analyser</code>에서 <code class="language-plaintext highlighter-rouge">bufferLength를</code> 구한다.</li>
  <li><code class="language-plaintext highlighter-rouge">bufferLength에</code> 해당하는 빈 양수배열의 <code class="language-plaintext highlighter-rouge">dataArray를</code> 생성한다</li>
  <li>필요한 요소들을 리턴해준다</li>
</ol>

<p>여기서 생소한 요소들이 나올 수 있는데, fftSize는 mdn 문서상의 설명으로 <code class="language-plaintext highlighter-rouge">fftSize 속성은 unsigned long 값이고 주파수 영역 데이터를 얻기 위해 고속 푸리에 변환(FFT)을 수행할 때 사용될 샘플에서의 window 사이즈</code> 라고 한다. 즉 내가 자세한 정보를 가지고 싶다면 높일 수 있고, 자세하지 않은 정보를 원한다면 작게 설정이 가능하다는 뜻이다.</p>

<p>예제를 들어 더 자세하게 설명해보면, 주로 오디오 비주얼라이저의 예시는 두개로 볼 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">block</code> 형태의 audio visualizer
<img width="307" height="200" alt="스크린샷 2022-09-13 오후 3 24 24" src="https://user-images.githubusercontent.com/66371206/189825782-d7832949-5654-4f87-9201-a5df168ec634.png" /></p>

<p><code class="language-plaintext highlighter-rouge">주파수</code> 형태의 audio visualizer
<img width="307" height="200" alt="스크린샷 2022-09-13 오후 3 24 52" src="https://user-images.githubusercontent.com/66371206/189825786-cfbde43f-7883-4cb6-9ba4-7fb5bc9f6cbd.png" /></p>

<p>여기서 과연 어떤것이 더 정확한 수치 및 촘촘한 결과가 필요할까? 당연히 아래에 있는 주파수 대역일것이다. 블럭형태는 크게 잘라봐야 30 구간으로 잘려있지만, 주파수는 적어도 300 단위로 자른 후 선을 이어야 되기 때문이다. 이런 경우에서, block형태인 경우 fftSize를 조금 줄여도 되고, 주파수 형태인 경우 fftSize 즉 높은 sampleRate를 가지는것이 용이하다.</p>

<h3 id="get-frequency">get Frequency</h3>

<p>이제 앞서 만든 audioContext를 가지고, 실제 volume 즉 frequency를 구해보도록 하자.</p>

<p>우선 <code class="language-plaintext highlighter-rouge">analyser</code>, <code class="language-plaintext highlighter-rouge">bufferLength</code>, <code class="language-plaintext highlighter-rouge">dataArray</code> 를 잘 가져오고, 가져온 <code class="language-plaintext highlighter-rouge">analyser</code>롤 통하여 <code class="language-plaintext highlighter-rouge">getByteFrequencyData()</code>함수를 실행하고, 인자로 <code class="language-plaintext highlighter-rouge">dataArray</code>를 넣는다.
그렇게 되면, 해당하는 <code class="language-plaintext highlighter-rouge">analyser</code>의 오디오 stream에서 호출된 시점의 frequency data를 앞서 만든 dataArray에 삽입해준다.
그렇게 완성된 data를 가지고, bufferLength만큼 loop을 돌며 평균을 내어주면, 호출한 시점의 audio volume값이라 볼 수 있다.</p>

<p>해당 코드는 아래와 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">analyser</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">,</span> <span class="nx">dataArray</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">(</span><span class="nx">userMediaStream</span><span class="p">);</span>
<span class="nx">analyser</span><span class="p">.</span><span class="nx">getByteFrequencyData</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">vol</span> <span class="o">=</span> <span class="nx">audioFrequency</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// audioFrequency.ts</span>
<span class="kd">const</span> <span class="nx">audioFrequency</span> <span class="o">=</span> <span class="p">(</span><span class="nx">dataArray</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">bufferLength</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">total</span> <span class="o">+=</span> <span class="nx">dataArray</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">total</span> <span class="o">/</span> <span class="nx">bufferLength</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">audioFrequency</span><span class="p">;</span>
</code></pre></div></div>

<p>그럼 이제 getByteFrequencyData를 호출할 때 마다, 그에 해당하는 볼륨값을 찾을 수 있다.</p>

<p>나는 이 값을 setting이라는 모달창이 켜졌을 때만 동작하며, 30ms에서 한번씩 동작하면 되므로, 호출하는 완성된 코드는 다음과 같다. 그리고 이러한 volume을 state로 변경하여, 추후에 값이 바뀔 때 마다 렌더링 할 수 있게 설정하였다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">myInterval</span><span class="p">;</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">analyser</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">,</span> <span class="nx">dataArray</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">audioContext</span><span class="p">(</span><span class="nx">userMediaStream</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">setting</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">myInterval</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">analyser</span><span class="p">.</span><span class="nx">getByteFrequencyData</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">vol</span> <span class="o">=</span> <span class="nx">audioFrequency</span><span class="p">(</span><span class="nx">dataArray</span><span class="p">,</span> <span class="nx">bufferLength</span><span class="p">);</span>
      <span class="nx">setVol</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">vol</span> <span class="o">/</span> <span class="mi">256</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span><span class="p">));</span>
    <span class="p">},</span> <span class="mi">30</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">myInterval</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">setting</span><span class="p">]);</span>
</code></pre></div></div>

<p>앞서 volume을 console에 찍어보면 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/189828981-909b12d2-1059-4952-a644-5a3d0c8e6f37.gif" alt="ezgif-3-ebf554f342" /></p>

<h3 id="volume-bar-구현">Volume bar 구현</h3>

<p>이제 거의 끝이 보인다. 해당하는 값을 int로 return 할 수 있게 완성하였으니, 해당하는 값을 volume에 맞게 초록색이 나오도록 설정만 하면 된다.</p>

<p>이 부분은 굳이 js를 사용할 필요도 없이, css로 넘겨주는 prop 즉 volume과 내가 몇번째 volume 아이콘인지 알아 낸후 몇 이상일 때, 초록색으로 표시를 해야 되는지 비교하며 관리할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">VolumeBar</span><span class="p">({</span> <span class="nx">volume</span> <span class="p">}:</span> <span class="p">{</span> <span class="nl">volume</span><span class="p">:</span> <span class="kr">number</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">Bars</span><span class="o">&gt;</span>
        <span class="p">{[...</span><span class="nb">Array</span><span class="p">(</span><span class="nx">n</span><span class="p">)].</span><span class="nx">map</span><span class="p">((</span><span class="nx">no</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">Bar</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nb">Symbol</span><span class="p">(</span><span class="nx">index</span><span class="p">).</span><span class="nx">toString</span><span class="p">()}</span> <span class="nx">volume</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span> <span class="nx">no</span><span class="o">=</span><span class="p">{</span><span class="nx">index</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/Bars</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Bars</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 0.4rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  gap: 0.8rem;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Bar</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">volume</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">no</span><span class="p">:</span> <span class="kr">number</span> <span class="p">}</span><span class="o">&gt;</span><span class="s2">`
  width: 100%;
  height: 1.6rem;
  background-color: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span>
    <span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="o">/</span> <span class="mi">8</span> <span class="o">&gt;</span> <span class="mi">7</span> <span class="o">-</span> <span class="nx">props</span><span class="p">.</span><span class="nx">no</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">#4ADE80</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">rgba(255, 255, 255, 0.3)</span><span class="dl">"</span><span class="p">}</span><span class="s2">;
  border-radius: 5rem;
`</span><span class="p">;</span>
</code></pre></div></div>

<blockquote>
  <p>map 의 index로 내가 아래에서 몇번째인 볼륨 바 인지 알아 낸 후, volume / 8 보다 클 경우 초록색, 아니면 회색으로 처리</p>
</blockquote>

<h3 id="시연">시연</h3>

<p>그렇게 해서 완성된 모습은 다음과 같다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/189821154-647e4008-d940-407d-91b3-b03b7ce4d364.gif" alt="ezgif-3-7171c44a73" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="javascript" /><category term="web" /><summary type="html"><![CDATA[개요]]></summary></entry><entry><title type="html">브라우저에서 입출력 제어하기</title><link href="http://localhost:4000/modoco/2022/09/06/audio-inputoutput.html" rel="alternate" type="text/html" title="브라우저에서 입출력 제어하기" /><published>2022-09-06T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/06/audio-inputoutput</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/06/audio-inputoutput.html"><![CDATA[<h2 id="브라우저에서-입출력-제어">브라우저에서 입출력 제어</h2>

<p>현재 만들고 있는 프로제긑는 디스코드와 게더타운과 유사한, 실시간 통신이 들어간 웹 플랫폼이다. 이런 유사한 프로젝트에 필수적으로 들어가야 되는 요소는 오디오의 제어이다.</p>

<blockquote>
  <p>말을 하다가 마이크를 바꿔야 되는 상황이 된다면?</p>
</blockquote>

<blockquote>
  <p>음질이 좋지 않다고 해서, 이어폰을 꼈을 때, 소리를 스피커에서 이어폰을 바꿔야 한다면?</p>
</blockquote>

<blockquote>
  <p>이어폰 배터리가 나가서 중간에 스피커로 교체 해야된다면?</p>
</blockquote>

<p>등 등 정말 많은 상황들이 연출 될 수 있다. 물론 가장 간편한 방법은, 알아서 시스템의 Default장비를 교체 후 브라우저를 refresh 해버리면 된다.
하지만 UX 관점에서, 오디오의 입출력을 브라우저에서 하는건 중요하다. 사실, 웹 플랫폼이 아닌 electron처럼 앱으로 만들었다면 쉬웠겠지만…</p>

<p>그렇게 브라우저 오디오 입출력 제어에 대한 글을 찾아보던 중 정말 쉽게 정리된 글도 없고, 오래된 내용들 특히 이미 지원이 끝난 함수들이 많아 막 사용하기 정말 쉽지 않았다. 그래서 내가 한번 정리를 해보았다.</p>

<h4 id="제공할-기능-목록">제공할 기능 목록</h4>

<ol>
  <li>카메라 입력 디바이스 제어가능</li>
  <li>음성 입력 디바이스 제어가능</li>
  <li>음성 출력 디바이스 제어가능</li>
</ol>

<p>드랍다운 까지 완성된 형태는 <a href="https://velog.io/@071yoon/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%93%9C%EB%9E%8D%EB%8B%A4%EC%9A%B4-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90">참고</a>링크에 있다.</p>

<h3 id="입출력-디바이스-찾기">입출력 디바이스 찾기</h3>

<p>우선, 선택을 하기 위해서는 나의 입출력 디바이스를 찾는것 부터 해야된다.</p>

<p>모든 선택 및 제어는 드랍다운에서 렌더링에도 사용되므로 전부 상태로 관리해주었다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Selectors.tsx</span>
<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Selectors</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">audioInput</span><span class="p">,</span> <span class="nx">setAudioInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">audioOutput</span><span class="p">,</span> <span class="nx">setAudioOutput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">videoInput</span><span class="p">,</span> <span class="nx">setVideoInput</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span> <span class="o">|</span> <span class="kc">null</span><span class="o">&gt;</span><span class="p">([]);</span>
  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">getDevice</span><span class="p">(</span><span class="nx">setAudioInput</span><span class="p">,</span> <span class="nx">setAudioOutput</span><span class="p">,</span> <span class="nx">setVideoInput</span><span class="p">);</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">SelectorContainer</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">camera</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">videoInput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">mic</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">audioInput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="nx">Selector</span> <span class="nx">select</span><span class="o">=</span><span class="dl">"</span><span class="s2">speaker</span><span class="dl">"</span> <span class="nx">device</span><span class="o">=</span><span class="p">{</span><span class="nx">audioOutput</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="sr">/SelectorContainer</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>그리고 getDevice함수에서 현재 사용하고 있는 모든 장비들을 불러올 수 있는 <code class="language-plaintext highlighter-rouge">navigator.mediaDevices.enumerateDevices()</code>함수를 사용하였다.</p>

<p><code class="language-plaintext highlighter-rouge">console</code>을 찍어보면 나온 device의 리스트는 다음과 같다.
<img width="985" alt="image" src="https://user-images.githubusercontent.com/66371206/188820065-c76d2d54-9e2a-4031-867f-1c3853347934.png" /></p>

<p>여기서 <code class="language-plaintext highlighter-rouge">kind</code>로 분류하여 비디오 입력, 오디오 입력, 오디오 출력을 구별하여 따로 저장하였다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// getDevice.ts</span>
<span class="kd">const</span> <span class="nx">getDevice</span> <span class="o">=</span> <span class="k">async</span> <span class="p">(</span>
  <span class="nx">setAudioInput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span><span class="p">,</span>
  <span class="nx">setAudioOutput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span><span class="p">,</span>
  <span class="nx">setVideoInput</span><span class="p">:</span> <span class="nx">Dispatch</span><span class="o">&lt;</span><span class="nx">SetStateAction</span><span class="o">&lt;</span><span class="nx">MediaDeviceInfo</span><span class="p">[]</span><span class="o">&gt;&gt;</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">devices</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">enumerateDevices</span><span class="p">();</span>
    <span class="nx">setAudioInput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audioinput</span><span class="dl">"</span><span class="p">));</span>
    <span class="nx">setAudioOutput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audiooutput</span><span class="dl">"</span><span class="p">));</span>
    <span class="nx">setVideoInput</span><span class="p">(</span><span class="nx">devices</span><span class="p">.</span><span class="nx">filter</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">device</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">videoinput</span><span class="dl">"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">devices</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="dl">"</span><span class="s2">error getting devices</span><span class="dl">"</span><span class="p">);</span>
    <span class="k">return</span> <span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>이렇게 주르륵 나온 devices들을 가지고 저번 포스트에서 다뤘던 드랍다운을 통하여 유저가 선택한 디바이스 정보를 나의 상태에 저장될 수 있게 설정해주었다.</p>

<blockquote>
  <p><a href="https://velog.io/@071yoon/%EC%BB%A4%EC%8A%A4%ED%85%80-%EB%93%9C%EB%9E%8D%EB%8B%A4%EC%9A%B4-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90">저번 블로그 주소</a></p>
</blockquote>

<h3 id="출력-디바이스-제어">출력 디바이스 제어</h3>

<p>무사히 유저가 원하는 입출력 디바이스를 선택하였고, 그 정보가 <code class="language-plaintext highlighter-rouge">userAudioOutputDevice</code>라는 상태에 존재한다고 가정하고 진행하도록 하겠다.</p>

<p>사실 여기까지 왔다면 거의 다한것이나 마찬가지다. 적어도 출력은 정말 간단하다.</p>

<p>현재 우리의 플랫폼에서 지원하는 오디오 출력은 두가지 존재한다.</p>

<ol>
  <li>테마 bgm</li>
  <li>상대방의 마이크 음성</li>
</ol>

<p>우선 상대방의 마이크 음성을 제어하는 부분을 보면 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Screen.tsx</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">&amp;&amp;</span> <span class="nx">stream</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">srcObject</span> <span class="o">=</span> <span class="nx">stream</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">newRef</span> <span class="o">=</span> <span class="nx">videoRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
  <span class="p">(</span><span class="nx">newRef</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">setSinkId</span><span class="p">(</span><span class="nx">userAudioOutputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">stream</span><span class="p">,</span> <span class="nx">videoRef</span><span class="p">,</span> <span class="nx">userAudioOutputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>테마로 나오는 음성을 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Theme.tsx</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">volume</span> <span class="o">=</span> <span class="nx">volume</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kd">const</span> <span class="nx">newAudio</span> <span class="o">=</span> <span class="nx">volumeRef</span><span class="p">.</span><span class="nx">current</span><span class="p">;</span>
  <span class="p">(</span><span class="nx">newAudio</span> <span class="k">as</span> <span class="kr">any</span><span class="p">).</span><span class="nx">setSinkId</span><span class="p">(</span><span class="nx">userAudioOutputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">);</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">volume</span><span class="p">,</span> <span class="nx">userAudioOutputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>여기서 새로 추가된 부분은 setSinkId를 해주는 부분이다. 바로 deviceId를 넣어주면, 해당하는 device로 출력이 바뀌는 것이다. userAudioOutputDevice가 상태이므로, 해당 상태가 바뀔때 마다 sink를 맞춰서 video의 오디오를 변경 할 수 있게 useEffect로 감싸주고, dependency로 넣어주었다.</p>

<p>type을 any로 변경해준 이유는, 컴파일 할 때 setSinkId를 찾지못해 에러를 내기 때문이다. 추후에 Interface를 하나 만들어 setSinkId를 추가하여 방지할 예정이다.</p>

<p>여기서 문제는 호환성 문제이다.
<img width="823" alt="image" src="https://user-images.githubusercontent.com/66371206/188821917-ecf262ae-c9d0-449f-a9d6-e3675c879224.png" />
보시다시피, Chrome, IE, Opera만 공식적으로 지원하기에, 만약 Safari로 접속한다면 바로 백색화면이 뜨는것을 볼 수 있다. 이 경우에는 browser 감지를 우선하여, Safari에서는 해당 함수를 실행하지 않도록 방지해줘야된다.</p>

<h3 id="입력-디바이스-설정">입력 디바이스 설정</h3>

<p>입력디바이스는 생각보다 까다롭다.</p>

<p>우선, 전송하는 mediaTrack이 이미 getUserMedia에서 audio를 default로 가져왔을테니, 여기서 내가 마음대로 media 장비를 바꾼다고 해서 바로 바뀌지 않을 것이다. 그래서 생각해낸 방법은 다음과 같다.</p>

<ol>
  <li>새로운 오디오 트랙을 만들어낸다 (새로 바뀔 입력 device인 트랙)</li>
  <li>현재 송출하고 있는 오디오 트랙을 삭제한다</li>
  <li>내 stream에 새로운 트랙을 추가한다</li>
  <li>보내고 있는 stream에 audio를 찾아 새로운 track으로 교체한다</li>
</ol>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// useCreateMediaStream.tsx</span>
<span class="kd">const</span> <span class="nx">replaceAudioStream</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">audioStream</span> <span class="o">=</span> <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">mediaDevices</span><span class="p">.</span><span class="nx">getUserMedia</span><span class="p">({</span>
      <span class="na">audio</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">deviceId</span><span class="p">:</span> <span class="nx">userAudioInputDevice</span><span class="p">?.</span><span class="nx">deviceId</span><span class="p">,</span>
      <span class="p">},</span>
    <span class="p">});</span>
    <span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">removeTrack</span><span class="p">(</span><span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nx">myStream</span><span class="p">.</span><span class="nx">localStream</span><span class="p">.</span><span class="nx">addTrack</span><span class="p">(</span><span class="nx">audioStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">pcs</span><span class="p">).</span><span class="nx">forEach</span><span class="p">((</span><span class="nx">pc</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">sender</span> <span class="o">=</span> <span class="nx">pcs</span><span class="p">[</span><span class="nx">pc</span><span class="p">].</span><span class="nx">getSenders</span><span class="p">().</span><span class="nx">find</span><span class="p">((</span><span class="nx">s</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">track</span><span class="p">.</span><span class="nx">kind</span> <span class="o">===</span> <span class="dl">"</span><span class="s2">audio</span><span class="dl">"</span><span class="p">);</span>
      <span class="nx">sender</span><span class="p">.</span><span class="nx">replaceTrack</span><span class="p">(</span><span class="nx">audioStream</span><span class="p">.</span><span class="nx">getAudioTracks</span><span class="p">()[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">});</span>
  <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">failed to change audio stream</span><span class="dl">"</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MediaStream</span><span class="p">();</span>
    <span class="nx">setUserMediaStream</span><span class="p">(</span><span class="nx">stream</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>

<p>그리고 이런 과정을 useEffect로 감싸서, userAudioInput이 바뀔때 마다 선언해준다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// settingModal</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">replaceAudioStream</span><span class="p">();</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">replaceAudioStream</span><span class="p">,</span> <span class="nx">userAudioInputDevice</span><span class="p">]);</span>
</code></pre></div></div>

<p>무사히 마치고 나면 입력 버튼에서, 이어폰 -&gt; 맥북으로 바꾸어도 음성 입력트랙이 잘 바뀌는것을 확인 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188824872-87f9ddaf-9bcc-44fc-955d-f7abe2beb227.gif" alt="ezgif-2-3f5a74b33f" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="javascript" /><category term="web" /><summary type="html"><![CDATA[브라우저에서 입출력 제어]]></summary></entry><entry><title type="html">드랍다운 애니메이션 제작</title><link href="http://localhost:4000/modoco/2022/09/05/dropdown-animation.html" rel="alternate" type="text/html" title="드랍다운 애니메이션 제작" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-05T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/09/05/dropdown-animation</id><content type="html" xml:base="http://localhost:4000/modoco/2022/09/05/dropdown-animation.html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/66371206/188813661-d31a95d8-8a3d-4916-a82e-8a924d5010f2.gif" alt="ezgif-4-8e32a6168e" /></p>

<h2 id="why">Why?</h2>

<p>나만의 드랍다운을 만들어보자.</p>

<p>사실 커스텀 드랍다운은 옛날부터 만들고 싶었지만, 시간 투자 대비 사소한 디자인이여서 그냥 기본 custom selector를 주로 사용했었다.
그러다 이제는 더이상 미룰 수 없기에 커스텀 드랍다운 제작에 나섰다.
우선 이번 드랍다운의 기능은 다음과 같다.</p>

<ol>
  <li>드랍다운 메뉴를 클릭하면, 드랍다운 메뉴(현재 내가 선택 가능한 입출력 디바이스)가 나타난다.</li>
  <li>드랍다운 메뉴를 다시 클릭 혹은 select하면, 드랍다운 메뉴가 사라진다.</li>
  <li>select된 입출력 디바이스는 해당 브라우저 탭에서 오디오 입출력 디바이스가 된다.</li>
</ol>

<p>입출력 디바이스를 선택하는 부분은, 따로 라이브러리를 사용하지 않고, 브라우저의 MediaDevices API를 사용하여 구현하였다.
내용이 생각보다 길어 다음 포스트에 이어서 작성하겠다.</p>

<h3 id="드랍다운-프레임-만들기">드랍다운 프레임 만들기</h3>

<p>드랍다운을 만들기 전에, 먼저 디자인을 해보자.</p>

<p>우선 어떠한 버튼을 누르면 DropDown이 나오게 될지 만들어야 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">dropDown</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">MouseEvent</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="nx">setDropDown</span><span class="p">(</span><span class="o">!</span><span class="nx">showDropDown</span><span class="p">);</span>
<span class="p">};</span>

<span class="o">&lt;</span><span class="nx">DropDownContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">dropDown</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">myDevice</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">myDevice</span><span class="p">?.</span><span class="nx">label</span> <span class="p">:</span> <span class="nx">defaultDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">BottomArrow</span> <span class="o">/&gt;</span>
<span class="o">&lt;</span><span class="sr">/DropDownContainer&gt;</span><span class="err">;
</span></code></pre></div></div>

<p>여기서 DropDownContainer를 누르면, !setDropDown을 해주어, 껐다 킬 수 있는 toggle을 만들어 주었다. 그렇게 되면, 애니메이션이 없는 누르면 껐다 켜질 수 있는 토글 버튼이 만들어 지게 된다.</p>

<p>그 다음에, <code class="language-plaintext highlighter-rouge">DropDownItem</code>에 내가 원하는 디바이스의 아이템들을 이쁘게 담아둔다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">setDevice</span> <span class="o">=</span> <span class="p">(</span>
  <span class="nx">device</span><span class="p">:</span> <span class="nx">MediaDeviceInfo</span><span class="p">,</span>
  <span class="nx">event</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">MouseEvent</span><span class="o">&lt;</span><span class="nx">HTMLDivElement</span><span class="o">&gt;</span>
<span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">();</span>
  <span class="nx">setMyDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">);</span>
  <span class="nx">setDropDown</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
<span class="p">};</span>

<span class="o">&lt;</span><span class="nx">DropDownItem</span>
  <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceId</span><span class="p">}</span>
  <span class="nx">onClick</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
  <span class="p">}}</span>
<span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/DropDownItem&gt;</span><span class="err">;
</span>
<span class="kd">const</span> <span class="nx">DropDownItem</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  padding: 1rem;
  cursor: pointer;
  &amp;:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>DropDown을 클릭하게 되면, 현재 내가 선택한 디바이스state로 설정한 후 추후에 state변화를 감지하여, 입출력 디바이스로 변경할 것이다. 그리고, 자연스럽게 DropDown을 닫아준다.
디자인적으로 <code class="language-plaintext highlighter-rouge">Text</code>로 디바이스의 이름을 이쁘게 출력할 수 있게 설정해주었다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188814527-971f756d-5b06-4b7f-b2ed-0004c1465103.gif" alt="ezgif-4-76b3c89864" /></p>

<p>이렇게 되면, 애니메이션 없는 드랍다운이 완성된다. 하지만 내가 원하는건 그저 토글이 되는 드랍다운이 아닌, 밑으로 죽 내려오는 드랍다운이다.</p>

<h3 id="드랍다운-애니메이션-만들기">드랍다운 애니메이션 만들기</h3>

<p>여기서 내적 고민을 잠깐 하였다… 간단하게 Bootstrap혹은 이미 있는걸 가져다 사용할 지 아니면 직접 CSS로 완성할지… 그러다 내가 원하는 디자인 및 감성으로 제작하기 위해 커스텀 DropDown을 만들게 되었다.</p>

<p>생각보다 자료도 많이 없고, 아이디어를 생각해내기 쉽지 않았다. 그러다 생각해낸 방법은, 드랍다운이 내려오는 창 바로 위에 선을 하나 두고 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>으로 감싼 뒤 toggle되면 드랍다운을 내리는 animation transition을 넣는 방식이였다.</p>

<p>animation은 간단하게 keyframes 로 구성하였다</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">@</span><span class="nd">keyframes</span> <span class="nx">dropdown</span> <span class="p">{</span>
    <span class="mi">0</span><span class="o">%</span> <span class="p">{</span>
      <span class="na">transform</span><span class="p">:</span> <span class="nx">translateY</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="o">%</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="mi">100</span><span class="o">%</span> <span class="p">{</span>
      <span class="na">transform</span><span class="p">:</span> <span class="nx">translateY</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nl">animation</span><span class="p">:</span> <span class="nx">dropdown</span> <span class="mf">0.4</span><span class="nx">s</span> <span class="nx">ease</span><span class="p">;</span>
</code></pre></div></div>

<p>영상으로 보는것이 이해가 쉬울 것 같아 가져왔다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188813331-8fd6e3ca-6739-429b-84d0-cb6250365424.gif" alt="ezgif-4-c2ecb01224" /></p>

<p>보이는것과 같이, 바를 기준으로 드랍다운이 내려오게 설정하였고, <code class="language-plaintext highlighter-rouge">overflow: hidden</code> 을 하지 않았을 때 상황이다.</p>

<p>이 상태에서, <code class="language-plaintext highlighter-rouge">overflow</code> 를 가려서 위에 부분을 안보이게만 하면 이쁜 드랍다운이 완성된다.</p>

<p>주요 코드는 다음과 같다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">DropDownContainer</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">dropDown</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">myDevice</span> <span class="o">!==</span> <span class="kc">null</span> <span class="p">?</span> <span class="nx">myDevice</span><span class="p">?.</span><span class="nx">label</span> <span class="p">:</span> <span class="nx">defaultDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">)}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="nx">BottomArrow</span> <span class="o">/&gt;</span>
  <span class="p">{</span><span class="nx">showDropDown</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">DropDownPosition</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">DropDown</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">map</span><span class="p">((</span><span class="nx">device</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span>
          <span class="o">&lt;</span><span class="nx">DropDownItem</span>
            <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">deviceId</span><span class="p">}</span>
            <span class="nx">onClick</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
              <span class="nx">setDevice</span><span class="p">(</span><span class="nx">device</span><span class="p">,</span> <span class="nx">event</span><span class="p">);</span>
            <span class="p">}}</span>
          <span class="o">&gt;</span>
            <span class="o">&lt;</span><span class="nx">Text</span><span class="o">&gt;</span><span class="p">{</span><span class="nx">device</span><span class="p">.</span><span class="nx">label</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>          <span class="o">&lt;</span><span class="sr">/DropDownItem</span><span class="err">&gt;
</span>        <span class="p">))}</span>
      <span class="o">&lt;</span><span class="sr">/DropDown</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/DropDownPosition</span><span class="err">&gt;
</span>  <span class="p">)}</span>
<span class="o">&lt;</span><span class="sr">/DropDownContainer&gt;</span><span class="err">;
</span>
<span class="kd">const</span> <span class="nx">DropDownPosition</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  position: absolute;
  top: 5rem;
  left: 0;
  width: 100%;
  overflow: hidden;
  z-index: 1;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DropDown</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
  background-color: #31343e;
  @keyframes dropdown {
    0% {
      transform: translateY(-100%);
    }
    100% {
      transform: translateY(0);
    }
  }
  animation: dropdown 0.4s ease;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">DropDownItem</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  border-radius: 0.5rem;
  padding: 1rem;
  cursor: pointer;
  &amp;:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>완성된 버전</p>

<p><img src="https://user-images.githubusercontent.com/66371206/188813661-d31a95d8-8a3d-4916-a82e-8a924d5010f2.gif" alt="ezgif-4-8e32a6168e" /></p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="css" /><category term="javascript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">S3 &amp;amp; CloudFront를 활용한 CDN 서버 만들기</title><link href="http://localhost:4000/til/2022/08/10/aws-cloudFront.html" rel="alternate" type="text/html" title="S3 &amp;amp; CloudFront를 활용한 CDN 서버 만들기" /><published>2022-08-10T00:00:00+09:00</published><updated>2022-08-10T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/08/10/aws-cloudFront</id><content type="html" xml:base="http://localhost:4000/til/2022/08/10/aws-cloudFront.html"><![CDATA[<p><img width="300" alt="image" src="https://user-images.githubusercontent.com/66371206/183911780-90c424e9-e115-44e2-8163-f0b4ab823458.png" /></p>

<p>CDN 서버를 만들기 앞서, 왜 CDN 서버를 만드는지에 대해 알아보자</p>

<h2 id="cdn">CDN</h2>

<h3 id="cdn-이란">CDN 이란?</h3>

<p>콘텐츠 전송 네트워크(CDN)는 데이터 사용량이 많은 애플리케이션의 웹 페이지 로드 속도를 높이는 상호 연결된 서버 네트워크로 콘텐츠 전송 혹은 배포 용도로 사용된다.</p>

<p>실제 사용자는 웹사이트에 접속 시, 해당 웹사이트의 데이터를 다운받기 위해 인터넷으로 접속한다. 하지만, 사용자가 서버에서 떨어질 수록, 웹사이트의 정적 이미지(이미지, 동영상, 음악 등)를 다운받는데 오래 걸리게 됩니다. 이러한 경우, CDN 서버를 전 세계에 있는 엣지 포인트를 두어 캐싱처리를 하여 사용자가 가장 가까운 지역의 엣지 포인트로 접속하게 하여 해당 문제를 해결 할 수 있다.</p>

<h2 id="cdn이-중요한-이유">CDN이 중요한 이유?</h2>

<p>콘텐츠 전송 네트워크(CDN)의 주 목적은 대기 시간을 줄이거나 네트워크 설계로 인해 발생하는 통신 지연을 줄이는 것이다. CDN은 클라이언트와 웹 사이트 서버 간에 중간 서버를 두어 효율성을 높일 수 있다. 이러한 CDN 서버는 클라이언트-서버 통신을 관리하며, 웹 서버에 대한 웹 트래픽을 줄이고, 대역폭 소비를 줄이며, 애플리케이션의 사용자 환경을 개선할 수 있다.</p>

<h2 id="cdn의-장점">CDN의 장점?</h2>

<p>CDN을 사용함으로써 다음과 같은 이득을 볼 수 있다.</p>

<h3 id="페이지-로드-시간-단축">페이지 로드 시간 단축</h3>

<p>페이지 로드 시간이 너무 느리면 웹 사이트 트래픽이 감소할 수 있으므로, 반송률을 줄이고 사용자가 사이트에서 보내는 시간을 늘릴 수 있다.</p>

<h3 id="대역폭-비용-절감">대역폭 비용 절감</h3>

<p>들어오는 모든 웹 사이트 요청은 네트워크 대역폭을 사용하기 때문에 대역폭 비용이 상당히 높다. 캐싱 및 기타 최적화를 통해 CDN은 오리진 서버가 제공해야 하는 데이터의 양을 줄여 웹 사이트 소유자의 호스팅 비용을 절감할 수 있음.</p>

<h3 id="콘텐츠-가용성-제고">콘텐츠 가용성 제고</h3>

<p>한 번에 너무 많은 방문자가 방문하거나 네트워크 하드웨어 오류가 발생하면 웹 사이트가 중단될 수 있습니다. CDN 서비스는 더 많은 웹 트래픽을 처리하고 웹 서버의 로드를 줄일 수 있습니다. 또한 하나 이상의 CDN 서버가 오프라인으로 전환되면 다른 운영 서버가 해당 서버를 대체하여 서비스가 중단되지 않도록 할 수 있습니다.</p>

<h3 id="웹-사이트-보안-강화">웹 사이트 보안 강화</h3>

<p>분산 서비스 거부(DDoS) 공격은 대량의 가짜 트래픽을 웹 사이트로 전송하여 애플리케이션이 작동 중지되도록 만들려고 시도합니다. CDN은 여러 중간 서버 간에 로드를 분산하여 오리진 서버에 미치는 영향을 줄임으로써 이러한 트래픽 급증을 처리할 수 있습니다.</p>

<h2 id="cdn-구현">CDN 구현</h2>

<h3 id="s3-버킷-생성">S3 버킷 생성</h3>

<p>먼저 S3 버킷을 일반적으로 생성한다.
<img width="844" alt="image" src="https://user-images.githubusercontent.com/66371206/183887243-2b1dd102-166b-4e1f-bbc8-846ff990d27f.png" /></p>

<blockquote>
  <p>CloudFront에서 public으로 열어줄 예정이라, 액세스 차단을 해도 된다</p>
</blockquote>

<p><img width="835" alt="image" src="https://user-images.githubusercontent.com/66371206/183887348-9e248bf8-a7c3-4b79-857f-68a672208981.png" /></p>

<p>다음으로, 프로젝트에서 사용할 static 파일들을 넣어준다.</p>

<p><img width="1202" alt="image" src="https://user-images.githubusercontent.com/66371206/183887581-979abfb6-6557-416a-813c-a7cf04a79817.png" /></p>

<p>마지막으로 버킷정책과 CORS 정책을 수립해주면 된다.
<img src="https://user-images.githubusercontent.com/66371206/183889538-902d219b-75f3-48aa-a7b9-541a9a788125.png" alt="image" /></p>

<blockquote>
  <p>버킷정책</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2008-10-17"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"PolicyForCloudFrontPrivateContent"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"AWS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity [my id]"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::static.[myDomain].com/*"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Principal"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"AWS"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity [my id]"</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"s3:GetObject"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:s3:::static.[myDomain].com/*"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>CORS 정책</p>
</blockquote>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="w">
    </span><span class="nl">"AllowedHeaders"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"*"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"AllowedMethods"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"HEAD"</span><span class="p">,</span><span class="w"> </span><span class="s2">"GET"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"AllowedOrigins"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"*"</span><span class="p">],</span><span class="w">
    </span><span class="nl">"ExposeHeaders"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="s2">"ETag"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-server-side-encryption"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-request-id"</span><span class="p">,</span><span class="w">
      </span><span class="s2">"x-amz-id-2"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"MaxAgeSeconds"</span><span class="p">:</span><span class="w"> </span><span class="mi">3000</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div></div>

<h3 id="cloudfront-연동">CloudFront 연동</h3>

<p>아까만든 S3 버킷으로 CloudFront를 생성해주면 된다
<img src="https://user-images.githubusercontent.com/66371206/183890057-0a6c3ebb-9a0f-4886-8113-f6cc92ab5010.png" alt="image" /></p>

<p>여기서 나온 ID를 앞서 버킷 정책에서의 [my id]에 넣어주면 된다.</p>

<p>상세 정책은 다음과 같다</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895266-496ab645-577b-45a2-a003-b374bfcabe70.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895316-83d7189c-5310-4d2e-931f-84dd6c21a565.png" alt="image" /></p>

<p>CloudFront를 public으로 열어두고, CORS 정책을 S3에 위임하면 된다.</p>

<h2 id="domain-달기">Domain 달기</h2>

<p>Domain은 AWS 내 Route 53에서 미리 구매한 Domain을 확장해서 사용하였다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895726-b2486618-83c4-48a9-b269-9f4af7a8fb24.png" alt="image" /></p>

<p><img src="https://user-images.githubusercontent.com/66371206/183895901-8c996509-d9b8-461d-8ec4-f611672fbb01.png" alt="image" /></p>

<p>그리고 다시 CloudFront로 와서, 생성한 대체 도메인을 선택 후, https 를 사용하기에 해당 SSL 인증서를 등록해주면 static.domain.com 으로 접근 가능한 cdn 서버가 완료가 된다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/183910403-19ac163e-a202-4a59-8430-a81beae4385b.png" alt="image" /></p>

<p>참조
<a href="https://aws.amazon.com/ko/what-is/cdn/">https://aws.amazon.com/ko/what-is/cdn/</a></p>]]></content><author><name>071yoon</name></author><category term="TIL" /><category term="TIL" /><category term="AWS" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">React에서 Volume Slider 구현하기</title><link href="http://localhost:4000/modoco/2022/07/31/react-volume-slider.html" rel="alternate" type="text/html" title="React에서 Volume Slider 구현하기" /><published>2022-07-31T00:00:00+09:00</published><updated>2022-07-31T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/31/react-volume-slider</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/31/react-volume-slider.html"><![CDATA[<h2 id="react-볼륨-슬라이더-만들기">React 볼륨 슬라이더 만들기</h2>

<p>프로젝트를 진행중에, 이러한 시안이 날라왔다. 대충 볼륨을 컨트롤 할 수 있는 Slider를 제작하는 것.</p>

<p><img width="758" alt="image" src="https://user-images.githubusercontent.com/66371206/182016262-70befb1d-aa0f-4e68-b26d-4c61d20f1199.png" /></p>

<p>우선 여러가지 선택사항이 있는데, material UI를 사용하여, 간단하고 이쁜 슬라이더를 가져다 쓰는것, 아니면 직접 구현이 있었다.</p>

<p>우선 라이브러리를 쓰는것 보다 구현을 하는것을 좋아하기에, 한번 알아보았고, <code class="language-plaintext highlighter-rouge">input type</code> 을 <code class="language-plaintext highlighter-rouge">range</code>로 선택하여 간단하게 구현할 수 있음을 알게되었다.</p>

<h3 id="vanilla-html로-구현">Vanilla HTML로 구현</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">input</span>
  <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">range</span><span class="dl">"</span>
  <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
  <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
  <span class="nx">color</span><span class="o">=</span><span class="dl">"</span><span class="s2">gray</span><span class="dl">"</span>
  <span class="nx">step</span><span class="o">=</span><span class="p">{</span><span class="mf">0.02</span><span class="p">}</span>
  <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span>
  <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">setVolume</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">valueAsNumber</span><span class="p">);</span>
  <span class="p">}}</span>
<span class="sr">/</span><span class="err">&gt;
</span></code></pre></div></div>

<p>간단하게 구현을 해보면 위의 코드와 같다.</p>

<p>setVolume같은 경우에는, state로 관리하기 위해서 넣었고, step 기준으로 volume bar를 컨트롤 할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182019180-9500a561-ee79-468d-b97b-220abb93d398.gif" alt="ezgif-3-5e9fa8f258" /></p>

<p>괜찮아 보이지만, 여러 문제가 있다.</p>

<ol>
  <li>컨트롤 하는 동그라미 (thumb) 도 파란색이 마음에 안든다</li>
  <li>볼륨이 0이 됐을 때 투명해졌으면 좋겠다</li>
  <li>볼륨이 올라갈때 색이 파란색이 마음에 안든다</li>
</ol>

<p>이러한 문제를 해결하기 위해 CSS에서 노력을 해주어야 한다.</p>

<h3 id="css-적용">CSS 적용</h3>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">VolumeControl</span> <span class="nx">volume</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span> <span class="o">*</span> <span class="mi">100</span><span class="p">}</span> <span class="nx">speaker</span><span class="o">=</span><span class="p">{</span><span class="nx">userSpeaker</span><span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">input</span>
    <span class="kd">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">range</span><span class="dl">"</span>
    <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span>
    <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span>
    <span class="nx">step</span><span class="o">=</span><span class="p">{</span><span class="mf">0.02</span><span class="p">}</span>
    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">volume</span><span class="p">}</span>
    <span class="nx">onChange</span><span class="o">=</span><span class="p">{(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">setVolume</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">valueAsNumber</span><span class="p">);</span>
    <span class="p">}}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/VolumeControl</span><span class="err">&gt;
</span></code></pre></div></div>

<p>우선 styled로 크게 VolumeControl이라는 component로 분할하였고, speaker로 스피커가 꺼져있음을 판단할 수 있고, volume으로 나의 speaker 크기를 판단할 수 있게 만들었다. 여기서 <code class="language-plaintext highlighter-rouge">volume === 0</code> 인 경우 speaker 가 꺼져있다고 판단할것이다.</p>

<h4 id="컨트롤-하는-동그라미-thumb-도-파란색이-마음에-안든다">컨트롤 하는 동그라미 (thumb) 도 파란색이 마음에 안든다</h4>

<p>우선 처음에는 1번 문제를 해결하기 위해 slider-thumb를 손봐주었다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&amp;</span><span class="nd">::-webkit-slider-thumb</span> <span class="p">{</span>
      <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="nl">width</span><span class="p">:</span> <span class="m">16px</span><span class="p">;</span>
      <span class="nl">border-radius</span><span class="p">:</span> <span class="m">50%</span><span class="p">;</span>
      <span class="nl">background</span><span class="p">:</span> <span class="err">${</span><span class="p">(</span><span class="n">props</span><span class="p">)</span> <span class="err">=&gt;</span> <span class="p">(</span><span class="n">props</span><span class="p">.</span><span class="n">volume</span> <span class="err">?</span> <span class="s1">"#d9d9d9"</span> <span class="p">:</span> <span class="s1">"#E5E7EB"</span><span class="p">)}</span><span class="o">;</span>
      <span class="nt">margin-top</span><span class="o">:</span> <span class="nt">-5px</span><span class="o">;</span>
      <span class="nt">cursor</span><span class="o">:</span> <span class="nt">pointer</span><span class="o">;</span>
    <span class="err">}</span>
</code></pre></div></div>

<p>해당코드는 별 문제 없이 가능하다. 그냥 volume 이 0이라면 볼륨이 꺼졌을 때의 색상이 나올 수 있게 지정하고 끝이다.</p>

<h4 id="볼륨이-0이-됐을-때-투명해졌으면-좋겠다">볼륨이 0이 됐을 때 투명해졌으면 좋겠다</h4>

<p>이부분도 그렇게 어렵지 않다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">&amp;</span><span class="nd">::-webkit-slider-runnable-track</span> <span class="p">{</span>
      <span class="nl">height</span><span class="p">:</span> <span class="m">0.6rem</span><span class="p">;</span>
      <span class="nl">opacity</span><span class="p">:</span> <span class="err">${</span><span class="p">(</span><span class="n">props</span><span class="p">)</span> <span class="err">=&gt;</span> <span class="p">(</span><span class="n">props</span><span class="p">.</span><span class="n">volume</span> <span class="err">&amp;&amp;</span> <span class="n">props</span><span class="p">.</span><span class="n">speaker</span> <span class="err">?</span> <span class="s1">"1"</span> <span class="p">:</span> <span class="s1">"0.5"</span><span class="p">)}</span><span class="o">;</span>
    <span class="err">}</span>
</code></pre></div></div>

<p>그냥 opacity를 volume과 speaker가 존재 시 1, 아니면 0.5를 줘서 간단히 해결하였다.</p>

<h4 id="볼륨이-올라갈때-색이-파란색이-마음에-안든다">볼륨이 올라갈때 색이 파란색이 마음에 안든다</h4>

<p>이부분이 상당히 애를 먹었다. 우선 여러번의 삽질과 해결법이 존재하였고, 나는 나름 정말 우아한 해결법을 찾았다고 생각한다.</p>

<p>우선 첫번째는 너무나 쉬운 material-UI 를 사용하는것이다. 하지만, 이미 돌아가기엔, 너무 많이 구현을 해버린 나… 끝까지 바닐라로 해결해보았다.</p>

<p>두번째는 내장 CSS 옵션을 사용하는 방법. CSS 는 브라우저에 의존적이기에, <code class="language-plaintext highlighter-rouge">fill-lower, fill-upper</code> 를 사용하여 색 지정이 되는 브라우저가 있다고 한다. 하지만 이건 IE만 지원을 하며, 크롬이나 파이어폭스는 지원하지 않아, 무시하였다.</p>

<p>혹시라도 사용하고 싶다면</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-ms-fill-lower</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">red</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-ms-fill-upper</span> <span class="p">{</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="no">blue</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이러한 방식을 사용하면 된다.</p>

<p>세번째는 인터넷에 떠돌아 다니는 방법을 사용하는 것. 바로 thumb의 box-shadow를 두어 0부터 thumb까지 전부 색칠하는 방법이다. 그리고 남는 부분은 input 전체에 <code class="language-plaintext highlighter-rouge">overflow: hidden</code>을 두어 새어 나오는것을 방지하는 방법이다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span> <span class="p">{</span>
  <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">80px</span><span class="p">;</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">background-color</span><span class="p">:</span> <span class="m">#9a905d</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-webkit-slider-runnable-track</span> <span class="p">{</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">color</span><span class="p">:</span> <span class="m">#13bba4</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">-1px</span><span class="p">;</span>
<span class="p">}</span>

<span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"range"</span><span class="o">]</span><span class="nd">::-webkit-slider-thumb</span> <span class="p">{</span>
  <span class="nl">-webkit-appearance</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="nl">width</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">height</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
  <span class="nl">background</span><span class="p">:</span> <span class="m">#434343</span><span class="p">;</span>
  <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">-80px</span> <span class="m">0</span> <span class="m">0</span> <span class="m">80px</span> <span class="m">#43e5f7</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이건 괜찮아 보이지만 문제가 많다. 우선 완성된 결과물부터 보자.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182020050-bbbdd186-67b7-45b0-849f-fc0eec3c075b.gif" alt="ezgif-3-875a95cf4c" /></p>

<p>우선 box shadow를 활용하기에, 동그라미인 thumb 를 사용할 수 없으며 overflow-hidden이 필수적으로 필요해 원하는 이쁜 디자인을 절대 만들 수 없다. 그래서 더 고민을 하고 linear-gradient를 활용한 우아한 해결법을 찾았다.</p>

<p>linear-gradient 가 단순히 서서히 적용되지 않고, 완전 다른 색으로 hard line을 그릴 수 있는 방법을 이용하였다. 코드를 보면 다음과 같다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">background</span><span class="o">:</span> <span class="err">$</span><span class="p">{</span><span class="err">(props)</span> <span class="err">=&gt;</span>
        <span class="err">props.volume</span>
          <span class="err">?</span> <span class="err">`linear-gradient(to</span> <span class="err">right,</span> <span class="err">#D9D9D9</span> <span class="err">${props.volume</span><span class="p">}</span><span class="o">%,</span> <span class="nt">rgba</span><span class="o">(</span><span class="err">229</span><span class="o">,</span> <span class="err">231</span><span class="o">,</span> <span class="err">235</span><span class="o">,</span> <span class="err">0</span><span class="o">.</span><span class="err">5</span><span class="o">)</span>
 <span class="err">$</span><span class="p">{</span><span class="err">props.volume</span><span class="p">}</span><span class="o">%</span> <span class="err">100</span><span class="o">%)</span><span class="err">`</span>
          <span class="o">:</span> <span class="s1">"#E5E7EB"</span><span class="err">}</span><span class="o">;</span>
</code></pre></div></div>

<p>우선 볼륨을 0 ~ 100 의 수를 주므로, 해당하는 볼륨 % 까지, <code class="language-plaintext highlighter-rouge">#d9d9d9</code>의 색으로, 그 다음부터는 rgba(229, 231, 235, 0.5) 에 해당하는 색으로 지정하였다. 그렇게 완성된 볼륨 슬라이더는 다음과 같다.</p>

<p><img src="https://user-images.githubusercontent.com/66371206/182032799-34a4b224-7e92-4388-8d45-58db2714bad0.gif" alt="ezgif-3-10012500c9" /></p>

<blockquote>
  <p>최종적으로 적용된 CSS 는 다음과 같다.</p>
</blockquote>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">VolumeControl</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="o">&lt;</span><span class="p">{</span> <span class="na">volume</span><span class="p">:</span> <span class="kr">number</span><span class="p">;</span> <span class="nl">speaker</span><span class="p">:</span> <span class="nx">boolean</span> <span class="p">}</span><span class="o">&gt;</span><span class="s2">`
  display: flex;
  justify-content: center;
  align-items: center;
  margin-left: 1rem;
  width: 6rem;

  input[type='range'] {
    -webkit-appearance: none;
    height: 100%;
    background: transparent;

    &amp;:focus {
      outline: none;
    }

    //WEBKIT
    &amp;::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 16px;
      width: 16px;
      border-radius: 50%;
      background: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">#d9d9d9</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">#E5E7EB</span><span class="dl">"</span><span class="p">)}</span><span class="s2">;
      margin-top: -5px;
      cursor: pointer;
    }

    &amp;::-webkit-slider-runnable-track {
      height: 0.6rem;
      background: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span>
        <span class="nx">props</span><span class="p">.</span><span class="nx">volume</span>
          <span class="p">?</span> <span class="s2">`linear-gradient(to right, #D9D9D9 </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span><span class="p">}</span><span class="s2">%, rgba(229, 231, 235, 0.5)
 </span><span class="p">${</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span><span class="p">}</span><span class="s2">% 100%)`</span>
          <span class="p">:</span> <span class="dl">"</span><span class="s2">#E5E7EB</span><span class="dl">"</span><span class="p">}</span><span class="s2">;
      opacity: </span><span class="p">${(</span><span class="nx">props</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">volume</span> <span class="o">&amp;&amp;</span> <span class="nx">props</span><span class="p">.</span><span class="nx">speaker</span> <span class="p">?</span> <span class="dl">"</span><span class="s2">1</span><span class="dl">"</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">0.5</span><span class="dl">"</span><span class="p">)}</span><span class="s2">;
      border-radius: 3rem;
      transition: all 0.5s;
      cursor: pointer;
    }
`</span><span class="p">;</span>
</code></pre></div></div>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="React" /><summary type="html"><![CDATA[React 볼륨 슬라이더 만들기]]></summary></entry><entry><title type="html">React + Typescript 에서 Horizontal Scroll 구현</title><link href="http://localhost:4000/modoco/2022/07/11/react-horizontal-scroll.html" rel="alternate" type="text/html" title="React + Typescript 에서 Horizontal Scroll 구현" /><published>2022-07-11T00:00:00+09:00</published><updated>2022-07-11T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/11/react-horizontal-scroll</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/11/react-horizontal-scroll.html"><![CDATA[<h2 id="react-에서-가로-스크롤-구현을-해보자">React 에서 가로 스크롤 구현을 해보자</h2>

<p>좌우 스크롤은 직접 구현해도 되지만, 누군가 이쁜 library를 만들어 두었길래, 바로 사용하였다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>yarn add react-horizontal-scrolling-menu
</code></pre></div></div>

<p>공식 페이지나 깃허브에 상세하게 설명이 있으니, 참고해도 좋아보임</p>

<p><a href="https://www.npmjs.com/package/react-horizontal-scrolling-menu">공식 페이지</a>
<a href="https://github.com/asmyshlyaev177/react-horizontal-scrolling-menu#readme">깃허브</a></p>

<h2 id="사용">사용</h2>

<h3 id="scrollmenu">ScrollMenu</h3>

<p>ScrollMenu라는 컴포넌트에 Block을 설정해두면, 바로 가로스크롤을 사용할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">import</span> <span class="p">{</span> <span class="nx">ScrollMenu</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-horizontal-scrolling-menu</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">LeftArrow</span><span class="p">,</span> <span class="nx">RightArrow</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Arrow</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">Block</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">./Block</span><span class="dl">'</span><span class="p">;</span>
<span class="p">...</span>

<span class="k">export</span> <span class="k">default</span> <span class="kd">function</span> <span class="nx">Scrolls</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">);</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Container</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">ScrollMenu</span> <span class="nx">LeftArrow</span><span class="o">=</span><span class="p">{</span><span class="nx">LeftArrow</span><span class="p">}</span> <span class="nx">RightArrow</span><span class="o">=</span><span class="p">{</span><span class="nx">RightArrow</span><span class="p">}</span><span class="o">&gt;</span>
            <span class="p">{</span><span class="nx">Data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span>
                <span class="p">({</span> <span class="nx">nickname</span><span class="p">,</span> <span class="nx">avatar</span><span class="p">,</span> <span class="nx">itemId</span> <span class="p">}:</span> <span class="nx">Interface</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
                    <span class="k">return</span> <span class="p">(</span>
                        <span class="o">&lt;</span><span class="nx">Block</span>
                            <span class="nx">itemId</span><span class="o">=</span><span class="p">{</span><span class="nx">itemId</span><span class="p">}</span>
                            <span class="nx">nickname</span><span class="o">=</span><span class="p">{</span><span class="nx">nickname</span><span class="p">}</span>
                            <span class="nx">avatar</span><span class="o">=</span><span class="p">{</span><span class="nx">avatar</span><span class="p">}</span>
                        <span class="sr">/</span><span class="err">&gt;
</span>                    <span class="p">);</span>
                <span class="p">},</span>
            <span class="p">)}</span>
        <span class="o">&lt;</span><span class="sr">/ScrollMenu</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/Container</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">Container</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  overflow: hidden;
  .react-horizontal-scrolling-menu--scroll-container::-webkit-scrollbar {
    display: none;
  }
  .react-horizontal-scrolling-menu--scroll-container {
    -ms-overflow-style: none; /* IE and Edge */
    scrollbar-width: none; /* Firefox */
  }
`</span><span class="p">;</span>
</code></pre></div></div>

<p>일반적으로 이렇게 구현을 하면, horizontal-scrolling-scroll-bar가 생기게 된다. 하지만, 일반적으로 가로 스크롤바를 사용하는 경우에 안그래도 비좁은데 스크롤바 까지 생겨버리면 너무 못생겨지기 때문에 삭제 코드를 넣어둔다. 그게 위 Container에서 선언한 style 이다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.react-horizontal-scrolling-menu--scroll-container</span><span class="nd">::-webkit-scrollbar</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.react-horizontal-scrolling-menu--scroll-container</span> <span class="p">{</span>
  <span class="nl">-ms-overflow-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="c">/* IE and Edge */</span>
  <span class="py">scrollbar-width</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="c">/* Firefox */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이렇게만 구현을 해도, 일반적으로는 문제가 없다. 하지만, 마우스를 쓰는 유저에게 문제가 생기는데, 마우스는 버티컬 움직임을 제어 할 수 없어 우측방향 스크롤이 불가능하게 된다. 심지어, 위에서 못생겼다고 스크롤바까지 없애버린 상황! 그걸 해결하기위해 우측 좌측으로 하나씩 화살표를 넣어 버튼형식으로 이동할 수 있게 설정해 두었다.</p>

<h3 id="arrow">Arrow</h3>

<p>Block은 그냥 일반적으로 디자인을 해도 상관이 없으니 넘어가고, Arrow 부분을 살펴보겠다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">styled</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">styled-components</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">VisibilityContext</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">react-horizontal-scrolling-menu</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">function</span> <span class="nx">Left</span><span class="p">({</span>
  <span class="nx">children</span><span class="p">,</span>
  <span class="nx">onClick</span><span class="p">,</span>
<span class="p">}:</span> <span class="p">{</span>
  <span class="nl">children</span><span class="p">:</span> <span class="nx">React</span><span class="p">.</span><span class="nx">ReactNode</span><span class="p">;</span>
  <span class="nl">onClick</span><span class="p">:</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="k">void</span><span class="p">;</span>
<span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">show</span><span class="p">,</span> <span class="nx">setShow</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">show</span> <span class="p">?</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Button</span>
      <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onClick</span><span class="p">}</span>
      <span class="nx">onMouseLeave</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setShow</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="p">}}</span>
    <span class="o">&gt;</span>
      <span class="p">{</span><span class="nx">children</span><span class="p">}</span>
    <span class="o">&lt;</span><span class="sr">/Button</span><span class="err">&gt;
</span>  <span class="p">)</span> <span class="p">:</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">Transparent</span>
      <span class="nx">onMouseEnter</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">setShow</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
      <span class="p">}}</span>
    <span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">Transparent</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">div</span><span class="s2">`
  width: 10rem;
  position: absolute;
  z-index: 999;
  height: 50rem;
`</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">Button</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">button</span><span class="s2">`
  cursor: pointer;
  color: white;
  cursor: pointer;
`</span><span class="p">;</span>

<span class="k">export</span> <span class="kd">function</span> <span class="nx">LeftArrow</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">scrollPrev</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">VisibilityContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Left</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">scrollPrev</span><span class="p">()}</span><span class="o">&gt;</span><span class="err">←</span><span class="o">&lt;</span><span class="sr">/Left&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<p>모든 코드를 다 넣자니, 코드가 너무 길어져 나름 핵심 부분만 가져왔다.</p>

<p>이 library에서 제공하는 기능 중 제일 마음에 드는것이 바로 VisibilityContext 이다. 즉 해당하는 block이 화면상에서 보이는지 안보이는지 체크를 해주는 기능인데, 이게 Arrow를 사용하는 핵심이 된다.</p>

<p>그리고 장황하게 써두었지만, 사실 핵심 코드는 아래만 보면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">export</span> <span class="kd">function</span> <span class="nx">LeftArrow</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">scrollPrev</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">useContext</span><span class="p">(</span><span class="nx">VisibilityContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;</span><span class="nx">Left</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">scrollPrev</span><span class="p">()}</span><span class="o">&gt;</span><span class="err">←</span><span class="o">&lt;</span><span class="sr">/Left&gt;</span><span class="err">;
</span><span class="p">}</span>
</code></pre></div></div>

<p>즉 onClick 이벤트로 클릭을 하면 VisibilityContext 즉 현재 보이지 않는 곳으로 scroll을 움직이게 할 수 있는 설정이다. 이 기능을 좌 우측으로 두어서 깔끔하게 좌우 스크롤바를 구현할 수 있다.</p>

<h2 id="완성본">완성본</h2>

<p><img src="https://user-images.githubusercontent.com/66371206/178254938-aadfeab6-89fb-4af4-8813-cf2278b31e27.gif" alt="ezgif-3-ca65f790f8" /></p>

<p>부드럽게 잘 작동한다..!</p>

<p>만족 ㅎㅎ</p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[React 에서 가로 스크롤 구현을 해보자]]></summary></entry><entry><title type="html">Typescript React Styled-Component 에서 Font 적용하기</title><link href="http://localhost:4000/modoco/2022/07/09/typescript-font.html" rel="alternate" type="text/html" title="Typescript React Styled-Component 에서 Font 적용하기" /><published>2022-07-09T00:00:00+09:00</published><updated>2022-07-09T00:00:00+09:00</updated><id>http://localhost:4000/modoco/2022/07/09/typescript-font</id><content type="html" xml:base="http://localhost:4000/modoco/2022/07/09/typescript-font.html"><![CDATA[<h2 id="typescript-react-styled-component-환경에서-font-적용하기">Typescript, React, Styled-Component 환경에서 Font 적용하기</h2>

<p>프로젝트를 진행하다보니, Font를 설정해야 되는데, 일반적으로 App.css를 사용하는 방식이 아니라, Styled-Component를 사용했기에 조금 더 복잡했다.</p>

<h2 id="적용순서">적용순서</h2>

<h3 id="font-다운받기">Font 다운받기</h3>

<p>font는 OpenSource 나 원하는곳에서 잘 다운 받으면 된다. 나는 <a href="https://noonnu.cc">눈누</a>라는 폰트 저장소를 애용한다. 저작권에 주의하며 다운받자.</p>

<p>다운을 받을 때, ttf, otf, woff 중 어떤것을 받을지 선택 할 수 있는데, 우선 ttf로 적용하였다.</p>

<p><code class="language-plaintext highlighter-rouge">ttf</code>는 true type font <code class="language-plaintext highlighter-rouge">otf</code>는 open type font 으로 pc에 설치하는 폰트이며 <code class="language-plaintext highlighter-rouge">woff</code>는 web open font format 으로 웹에서 사용하는 포맷이다.</p>

<blockquote>
  <p>로딩속도는 woff2 &gt; woff &gt; ttf 순서</p>
</blockquote>

<p>그럼 잘 다운받은 폰트를 src폴더 안에 fonts라는 디렉토리를 만들어 잘 저장해둔다.</p>

<p>프로젝트 내부의 폴더구조는 다음과 같다
<img width="273" alt="image" src="https://user-images.githubusercontent.com/66371206/178093254-5ca4bbff-b528-41a3-a7c0-d17afe8a2d9d.png" /></p>

<h3 id="globalstyle에-font-추가">GlobalStyle에 Font 추가</h3>

<p>원래는 App.css에 font를 적용시켜 <code class="language-plaintext highlighter-rouge">&lt;App&gt;</code>에 감싸주기만 하면 됐다. 하지만, 지금은 Styled-Component를 사용하므로 GlobalStyle로 잘 적용시켜보자.</p>

<p>우선 styles 디렉토리에 있는 GlobalStyle을 담당하고있는 global.ts에 사용하고싶은 font들을 추가해주었다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// global.ts</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">createGlobalStyle</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">styled-components</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFBold</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFBold.ttf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFMedium</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFMedium.ttf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GmarketSansTTFLight</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">../fonts/GmarketSansTTFLight.ttf</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">GlobalStyle</span> <span class="o">=</span> <span class="nx">createGlobalStyle</span><span class="s2">`
  @font-face {
        font-family: 'GmarketSansTTFBold';
        src: local('GmarketSansTTFBold'), local('GmarketSansTTFBold');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFBold</span><span class="p">}</span><span class="s2">) format('truetype');
  }
  @font-face {
        font-family: 'GmarketSansTTFMedium';
        src: local('GmarketSansTTFMedium'), local('GmarketSansTTFMedium');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFMedium</span><span class="p">}</span><span class="s2">) format('truetype');
  }
  @font-face {
        font-family: 'GmarketSansTTFLight';
        src: local('GmarketSansTTFLight'), local('GmarketSansTTFLight');
        font-style: normal;
        src: url(</span><span class="p">${</span><span class="nx">GmarketSansTTFLight</span><span class="p">}</span><span class="s2">) format('truetype');
  }
</span></code></pre></div></div>

<p>여기서 문제가 하나 생기는데, <code class="language-plaintext highlighter-rouge">.ttf</code> 파일을 제대로 import 해줄 수 없다. 해당 문제는 src의 디렉토리위에 <code class="language-plaintext highlighter-rouge">fonts.d.ts</code>를 만들어 해당 타입의 모듈을 import 해줄 수 있게 수정해주면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// fonts.d.ts</span>
<span class="kr">declare</span> <span class="kr">module</span> <span class="dl">"</span><span class="s2">*.ttf</span><span class="dl">"</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="globalstyle-적용">GlobalStyle 적용</h3>

<p>이제 index.tsx에 폰트들이 추가된 GlobalStyle을 잘 둘러주기만 하면 된다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">App</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./App</span><span class="dl">"</span><span class="p">;</span>
<span class="k">import</span> <span class="nx">GlobalStyle</span> <span class="k">from</span> <span class="dl">"</span><span class="s2">./styles/global</span><span class="dl">"</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">rootElement</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="dl">"</span><span class="s2">root</span><span class="dl">"</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">rootElement</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed to find the root element</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">root</span> <span class="o">=</span> <span class="nx">createRoot</span><span class="p">(</span><span class="nx">rootElement</span><span class="p">);</span>
<span class="nx">root</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span>
  <span class="o">&lt;</span><span class="nx">StrictMode</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">GlobalStyle</span> <span class="o">/&gt;</span>
    <span class="o">&lt;</span><span class="nx">App</span> <span class="o">/&gt;</span>
  <span class="o">&lt;</span><span class="sr">/StrictMode</span><span class="err">&gt;
</span><span class="p">);</span>
</code></pre></div></div>

<h3 id="사용하고-싶은-font를-component에-적용">사용하고 싶은 Font를 Component에 적용</h3>

<p>이제 해당 App 안에 있는 컴포넌트에서 자유롭게 폰트를 꺼내서 사용할 수 있다.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// main.tsx</span>
<span class="p">...</span>
<span class="kd">const</span> <span class="nx">Title</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">p</span><span class="s2">`
  margin-top: 5rem;
  height: 10rem;
  font-size: 10rem;
  font-family: GmarketSansTTFLight, sans-serif, Arial;
`</span><span class="p">;</span>
</code></pre></div></div>

<p><img width="651" alt="image" src="https://user-images.githubusercontent.com/66371206/178093400-3c5fa099-f561-4f21-954e-650dfa98b0b5.png" /></p>

<p>잘 적용된 모습을 볼 수 있다.</p>

<h2 id="후기">후기</h2>

<p>이번에는 우선 ttf로 통일을 했지만, 역시나 개선을 위해 woff로 하는것이 좋아보인다. 튜닝을 하게된다면, 웹폰트로 지정을 해서 로딩속도를 개선해보자.</p>]]></content><author><name>071yoon</name></author><category term="modoco" /><category term="TIL" /><category term="TypeScript" /><summary type="html"><![CDATA[Typescript, React, Styled-Component 환경에서 Font 적용하기]]></summary></entry></feed>