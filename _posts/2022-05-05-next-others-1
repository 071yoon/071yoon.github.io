---
layout: post
title: NEXT-Others-1
subtitle: NEXT의 Static File Serving, Fast Refresh, ESLint, TypeScript에 대하여 알아보자
categories: next.js
tags: [next.js, javascript, web, study]
---


## Static File Serving

`Next.js`는 파일을 `public`에서 이미지처럼 정적으로 활용 할 수 있다. `public`은 root 안에 있어야 하며, `public` 안에서는 `/`로 시작하는 base URL을 따라가야된다.

`public/me.png`를 삽입하는 과정은 다음과 같다.

```javascript
import Image from 'next/image'

function Avatar() {
    return <Image src="/me.png" alt="me" width="64" height="64" />
}

export default Avatar
```

`next/img`의 대한 내용은 [NextOptimization](2022-05-04-next-optimization.md) 를 참고.

이러한 폴더는 `robots.txt` 혹은 `favicon.ico` 에서도 사용이 될 수 있으며, Google Site Verification 등에도 활용될 수 있다.

| 주의사항! `public`이란 명명은 다른곳에서 사용하면 안된다. 해당 폴더는 정적인 asset만 포함되어야 된다!

| 주의사항2! 마찬가지로 정적 파일을 `pages/`라는 폴더 안에 넣게되면 에러가 난다!

| 주의사항3! `public` 폴더 안에 들어간 assets 들 만이 빌드 타임에서 Next.js로 넘겨진다. 런타임중에서는 추가가 되어도 활용되지 않으므로, `AWS S3`과 같은 third party를 사용하는 것이 좋다.

## Fast Refresh

Fast Refresh는 React component에 편집을 한 즉시 피드백을 주는 기능이다. 이러한 기능은 Next.jsdml 9.4 이상에서 자동으로 작동하며, 켜져있다면 component 의 상태정보를 잃지 않고 바로 확인을 할 수 있다.

### How It Works

- 만약 `React component`만 export하는 환경이라면, Fast Refresh는 오직 그 한 파일만 업데이트를 하며, 컴포넌트를 다시 렌더링 해준다. 해당 파일 안에서는 style, logic, handler, effects 등 아무거나 편집을 해도 된다!

- `React component`가 아닌 파일을 편집한다면, Fast Refresh는 두 파일 모두와 import 된 다른 파일들을 재실행 할 것이다. 예를들어, `Button.tsx`와 `Modal.tsx`가 `theme.tsx`를 import 한다면, `theme.tsx`를 편집하게 되면, 두 컴포넌트 다 업데이트가 된다.

- 만약 React 구조에서 벗어난 import 파일을 편집하게 된다면, Fast Refresh는 full reload를 어쩔 수 없이 하게된다. 

## ESLint

## TypeScript