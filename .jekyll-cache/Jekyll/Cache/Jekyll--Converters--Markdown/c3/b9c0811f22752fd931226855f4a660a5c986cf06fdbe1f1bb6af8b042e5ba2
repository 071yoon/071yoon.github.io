I"O7<h2 id="자료구조와-자료형">자료구조와 자료형</h2>

<p>기본적으로, 프로그래밍 언어들에 대한 기본지식이 있는 상태로 공부를 진행하여, 기본적인 유형인 부분들은 스킵하도록 하였다</p>

<h3 id="원시값과-객체의-차이">원시값과 객체의 차이</h3>

<p>원시값이란</p>
<ul>
  <li>원시형의 값</li>
  <li>종류로는 <code class="language-plaintext highlighter-rouge">string, number, bigint, boolean, symbol, null, undefined </code>으로 총 7가지가 올 수 있다</li>
</ul>

<p>객체</p>
<ul>
  <li>Property에 다양한 종류의 값을 저장 할 수 있다</li>
  <li><code class="language-plaintext highlighter-rouge">{name: "Yoon", age: 25}</code>와 같이 {}를 사용해 만들 수 있다</li>
  <li>자바스크립트에는 여러 종류의 객체가 있으며, 함수도 객체의 일종이다</li>
</ul>

<h3 id="문자열">문자열</h3>
<blockquote>
  <p>자바스크립트는 글자 하나만 저장 할 수 있는 <code class="language-plaintext highlighter-rouge">char</code> 형의 자료형이 없다!</p>
</blockquote>

<p>따옴표의 종류가 <code class="language-plaintext highlighter-rouge">'</code> 와 <code class="language-plaintext highlighter-rouge">"</code> 으로 두개 있고, 둘 다 사용 할 수 있으며, 백틱으로도 감쌀 수가 있다. 그리고 백틱에는 특별한 기능이 있는데, 표현식을 ${…} 으로 감싸고 이를 백틱에 감싼 문자열에 넣어주면, 표현식을 쉽게 삽입을 할 수 있게 해준다</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">template literal</code> 이라 부른다
예시를 보면</p>
  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span>
	<span class="k">return</span> <span class="p">(</span><span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">alert</span><span class="p">(</span><span class="s2">`1 + 2 = </span><span class="p">${</span><span class="nx">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)}</span><span class="s2">.`</span><span class="p">);</span>
</code></pre></div>  </div>
  <p>또한 백틱을 이용하여 문자열을 여러줄로 작성 할 수 도 있다</p>
  <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">guests</span> <span class="o">=</span> <span class="s2">`Guests:
	* Kim
	* Yoon
	* Lee
`</span><span class="p">;</span>
</code></pre></div>  </div>
</blockquote>

<h3 id="배열">배열</h3>

<p>배열 선언에는 두가지 방법이 있다</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">();</span><span class="c1">//no.1</span>
<span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[];</span><span class="c1">//no.2</span>
</code></pre></div></div>
<ul>
  <li>그리고 두번째 방법으로 대괄호 안에, 초기화를 시켜주는 것 또한 가능하다.</li>
  <li>배열 요소의 자료형에는 제약이 없다
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">let</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">apple</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">yoon</span><span class="dl">'</span><span class="p">},</span> <span class="kc">true</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span><span class="nx">alert</span><span class="p">(</span><span class="dl">'</span><span class="s1">hello</span><span class="dl">'</span><span class="p">);}];</span>
  <span class="nx">arr</span><span class="p">[</span><span class="mi">3</span><span class="p">]();</span> <span class="c1">//hello</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="반복문">반복문</h4>
<p><code class="language-plaintext highlighter-rouge">for</code>문은 배열을 순회 할 때 사용하는 가장 쉬운 방법이다
배열에 적용하는 순회 방법중 가장 쉬운 for…of를 사용해 보자</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="dl">'</span><span class="s1">apple</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">orange</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">pear</span><span class="dl">'</span><span class="p">];</span>
<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">fruit</span> <span class="k">of</span> <span class="nx">fruits</span><span class="p">){</span>
	<span class="nx">alert</span> <span class="p">(</span><span class="nx">fruit</span><span class="p">);</span><span class="c1">//apple -&gt; orange -&gt; pear</span>
<span class="c1">//	or alert(arr[key]);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">for..of</code>를 사용하면 현재 요소의 인덱스는 얻을 수 없고 값만 얻을 수 있다. 하지만 구현하기가 쉽고 문법도 짧아 배열의 요소를 대상으로 반복 작업을 할 때는 매우 편리하다</p>

<h3 id="iterable-객체"><code class="language-plaintext highlighter-rouge">iterable</code> 객체</h3>

<ul>
  <li>반복 가능한 객체는 배열을 일반화 한 객체이다</li>
  <li><code class="language-plaintext highlighter-rouge">iterable</code>을 사용하여 어떤 객체에서든 <code class="language-plaintext highlighter-rouge">for..of</code> 반복문을 적용 시킬 수 있다</li>
</ul>

<h4 id="symboliterator"><code class="language-plaintext highlighter-rouge">Symbol.iterator</code></h4>
<ol>
  <li><code class="language-plaintext highlighter-rouge">range</code> 를 iterable로 만들기 위해 객체에 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code> 를 추가한다</li>
  <li><code class="language-plaintext highlighter-rouge">for..of</code> 가 시작되면 <code class="language-plaintext highlighter-rouge">Symbol.iterator</code>를 호출 해 조건성을 만족시킨다</li>
  <li><code class="language-plaintext highlighter-rouge">for..of</code>는 반환된 객체만을 대상으로 동작한다</li>
  <li><code class="language-plaintext highlighter-rouge">for..of</code>에 다음값이 필요하면 iterator의 <code class="language-plaintext highlighter-rouge">next()</code>를 호출한다</li>
  <li><code class="language-plaintext highlighter-rouge">next()</code>의 반환값은 <code class="language-plaintext highlighter-rouge">{done: Boolean, value: any}</code> 와 같은 형태이고 <code class="language-plaintext highlighter-rouge">done===true</code>면 반복이 종료되었다는 뜻이다</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">range</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">from</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
  <span class="na">to</span><span class="p">:</span> <span class="mi">5</span>
<span class="p">};</span>

<span class="c1">// 1. for..of 최초 호출 시, Symbol.iterator가 호출됩니다.</span>
<span class="nx">range</span><span class="p">[</span><span class="nb">Symbol</span><span class="p">.</span><span class="nx">iterator</span><span class="p">]</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>

  <span class="c1">// Symbol.iterator는 이터레이터 객체를 반환합니다.</span>
  <span class="c1">// 2. 이후 for..of는 반환된 이터레이터 객체만을 대상으로 동작하는데, 이때 다음 값도 정해집니다.</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">current</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="k">from</span><span class="p">,</span>
    <span class="na">last</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">to</span><span class="p">,</span>

    <span class="c1">// 3. for..of 반복문에 의해 반복마다 next()가 호출됩니다.</span>
    <span class="nx">next</span><span class="p">()</span> <span class="p">{</span>
      <span class="c1">// 4. next()는 값을 객체 {done:.., value :...}형태로 반환해야 합니다.</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">current</span> <span class="o">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">last</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span> <span class="na">done</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">current</span><span class="o">++</span> <span class="p">};</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span> <span class="na">done</span><span class="p">:</span> <span class="kc">true</span> <span class="p">};</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="c1">// 이제 의도한 대로 동작합니다!</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">num</span> <span class="k">of</span> <span class="nx">range</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span> <span class="c1">// 1, then 2, 3, 4, 5</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="date-객체와-날짜">Date 객체와 날짜</h3>
<p>날짜를 저장 할 수 있고, 관련된 함수를 제공하는 <code class="language-plaintext highlighter-rouge">Date</code>에 대해 알아보자</p>
<ul>
  <li>객체의 생성
    <ul>
      <li><code class="language-plaintext highlighter-rouge">new Date()</code> 를 호출해 새로운 객체를 만들어 사용 할 수 있다</li>
    </ul>
  </li>
  <li>날짜 찾기
    <ul>
      <li>getFullYear() -&gt; 네자릿수 연도</li>
      <li>getMonth() -&gt; 0부터 11까지의 월</li>
      <li>getDate() -&gt; 1부터 31까지 날</li>
      <li>getHours()</li>
      <li>getMinutes()</li>
      <li>getSeconds()</li>
      <li>getMillioseconds()</li>
      <li>getDay() -&gt; 0부터 6까지, 일요일부터 토요일</li>
      <li>getTime() -&gt; 주어진 시간과 1970년 1월 1일 00초 사이의 간격</li>
      <li>getTimezoneOffset() -&gt; 현지 시간과 표준 시간의 차이를 반환</li>
    </ul>
  </li>
</ul>

<h3 id="json과-method">JSON과 Method</h3>

<p>복잡한 객체를 사용하고 있어, 네트워크를 통해 객체를 보내거나 로깅 목적으로 객체를 출력해야 할 때 사용하는 방법으로 <code class="language-plaintext highlighter-rouge">JSON</code>을 사용 할 수 있다</p>

<h4 id="jsonstringify">JSON.stringify</h4>
<ul>
  <li>JSON,stringify -&gt; 객체를 JSON으로 바꿔준다</li>
  <li>JSON.parse -&gt; JSON을 객체로 바꿔준다</li>
</ul>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">student</span> <span class="o">=</span> <span class="p">{</span>
	<span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Yoon</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">age</span><span class="p">:</span> <span class="mi">25</span><span class="p">,</span>
	<span class="na">isAdmin</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
	<span class="na">courses</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">html</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">css</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">js</span><span class="dl">'</span><span class="p">],</span>
	<span class="na">wifi</span><span class="p">:</span><span class="kc">null</span>
<span class="p">};</span>

<span class="kd">let</span> <span class="nx">json</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">student</span><span class="p">);</span>

<span class="nx">alert</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">json</span><span class="p">);</span> <span class="c1">//string</span>
<span class="nx">alert</span><span class="p">(</span><span class="nx">json</span><span class="p">);</span><span class="c1">//student의 내용을 string으로 출력</span>
</code></pre></div></div>
:ET